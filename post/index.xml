<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://colinder.github.io/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 26 Sep 2020 00:07:40 +0900</lastBuildDate><atom:link href="https://colinder.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SW Expert Academy_D3 3975, , , </title>
      <link>https://colinder.github.io/post/algorithm/sw_20.09.26/</link>
      <pubDate>Sat, 26 Sep 2020 00:07:40 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/algorithm/sw_20.09.26/</guid>
      <description>​
D3_3975_승률 비교하기 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  result = [] for T in range(int(input())): A, B, C, D = map(int, input().split()) if B/A &amp;gt; D/C: result.append(&amp;#34;BOB&amp;#34;) elif B/A &amp;lt; D/C: result.append(&amp;#34;ALICE&amp;#34;) else: result.append(&amp;#34;DRAW&amp;#34;) for t in range(T+1): print(f&amp;#34;#{t+1} {result[t]}&amp;#34;) # 아니 이게 D3라고? 완전 난이도 설정 실수네. 했다가 런타임 오류 보고 # 왜 그런건지 알았다. # python은 결과를 모았다가 출력하는 게 더 빠르다.</description>
    </item>
    
    <item>
      <title>REST</title>
      <link>https://colinder.github.io/post/rest-api-reference/</link>
      <pubDate>Thu, 24 Sep 2020 09:54:40 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/rest-api-reference/</guid>
      <description>​
REST API Reference [TOC]
1.사용자 API    Members Descriptions     POST /accounts/signup 회원가입   POST /accounts/login 회원 로그인   POST /accounts/userDetail 회원정보   PUT /accounts/update 회원정보 수정   DELETE /accounts/dropUser 회원탈퇴   GET /accounts/emailAuth 이메일 인증   GET /accounts/emailCheck 이메일 중복 확인   GET /accounts/nicknameCheck 닉네임 중복 확인    1.1 회원 로그인 POST /accounts/login ​	회원 로그인 API 입니다.</description>
    </item>
    
    <item>
      <title>SW Expert Academy_D3 3307, 3304, 4371, 10726</title>
      <link>https://colinder.github.io/post/algorithm/sw_20.09.21/</link>
      <pubDate>Mon, 21 Sep 2020 22:43:28 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/algorithm/sw_20.09.21/</guid>
      <description>​
D3_3307_최장 증가 부분 수열(LIS) 1 2 3 4 5 6 7 8 9 10 11 12 13 14  for T in range(int(input())): N = int(input()) arr = list(map(int, input().split())) dp= [1] * N for i in range(1, N): for j in range(i): if arr[j] &amp;lt; arr[i]: dp[i]= max(dp[i], dp[j] + 1) print(f&amp;#39;#{T+1} {max(dp)}&amp;#39;) # dp는 쉬운듯 어렵고 어려운듯 쉽다... # LIS로 검색하면 도움이 되는 글이 많다.    ​</description>
    </item>
    
    <item>
      <title>SW Expert Academy_D3 3131, 3233, 1860, 4047</title>
      <link>https://colinder.github.io/post/algorithm/sw_20.09.15/</link>
      <pubDate>Sat, 19 Sep 2020 22:52:51 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/algorithm/sw_20.09.15/</guid>
      <description>​
D3_3131_100만 이하의 모든 소수 1 2 3 4 5 6 7 8 9 10 11 12  a = [0, 0] + [1] * 1000000 for i in range(2, 1000000): if a[i] == 1: for j in range(2*i, 1000001, i): a[j] = 0 for i in range(2, 1000000): if a[i] == 1: print(i, end=&amp;#34; &amp;#34;) # 에라토스테네스의 체   ​
D3_3233_정삼각형 분할 놀이 1 2 3 4 5 6 7 8 9 10  for T in range(int(input())): A, B = map(int, input().</description>
    </item>
    
    <item>
      <title>block_chain private Vs public / blockchain Vs network</title>
      <link>https://colinder.github.io/post/block_chain/private-vs-public-blockchain-vs-network/</link>
      <pubDate>Thu, 17 Sep 2020 15:04:00 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/block_chain/private-vs-public-blockchain-vs-network/</guid>
      <description>​
🧔프라이빗 블록체인 VS 👨🏻‍🤝‍👨🏻퍼블릭 블록체인 VS 🔒프라이빗 네트워크 VS 🔐퍼블릭 네트워크   Why 이런 질문을?
 블록체인 관련 정보를 구글링하다보면, 프라이빗 네트워크, 퍼블릭 네트워크, 프라이빗 블록체인, 퍼블릭 블록체인. 이 4가지의 말을 혼용해서 사용하고 있는 것을 쉽게 볼 수 있다. 여기서
프라이빗 네트워크와 프라이빗 블록체인과 같이 네트워크와 블록체인을 같은 의미로 많이 사용하는데. 과연 이 둘이 같은 것을 의미하는지 알아보았다.
 ​
결론 - 블록체인=&amp;gt; 사용자의 접근조건을 기준으로 프라이빗과 퍼블릭을 나눔 - 네트워크=&amp;gt; 서비스 운용형태를 기준으로 프라이빗과 퍼블릭을 나눔 ​</description>
    </item>
    
    <item>
      <title>Python_Library</title>
      <link>https://colinder.github.io/post/algorithm/python_library/</link>
      <pubDate>Fri, 11 Sep 2020 22:39:31 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/algorithm/python_library/</guid>
      <description>​
자주 쓰는 Python Library  자주 사용하게되는 파이썬 라이브러리를 정리한다.
 ​
  정규표현식  일대일 매칭되는 문자
 정규표현식 안에서, 바로 다음 절에서 설명하는 메타문자를 제외한 모든 문자 하나는 일반 문자열 하나와 매칭된다. 예를 들어, a는 a와 매칭되고, 가는 ‘가’와 매칭되는 식이다. 당연히 a가 ‘b’ 또는 ‘가’와 매칭되지는 않는다.
1 2 3 4 5 6 7 8 9 10 11 12  어떤 프로그래밍 언어의 정규표현식이든 메타문자(특수한 기능을 하는 문자)라는 것이 존재한다.</description>
    </item>
    
    <item>
      <title>SW Expert Academy_D3 4698, 1493, 10570, 3032</title>
      <link>https://colinder.github.io/post/algorithm/sw_20.09.09/</link>
      <pubDate>Tue, 08 Sep 2020 23:13:31 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/algorithm/sw_20.09.09/</guid>
      <description>​
D3_4698_테네스의 특별한 소수 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  for T in range(int(input())): D, A, B = map(int, input().split()) D = str(D) a = [0, 0] + [1] * (B - 1) rootB = int(B**0.5)	👈 이 아이디어를 얻기까지 오랜시간이 걸렸다. for i in range(2, rootB+1):	👈 if a[i] == 1:	👈 for j in range(2*i, B+1, i):	👈 에라토스테네스의 체 를 활용 a[j] = 0	👈 result = [] for i in range(A, B+1): if a[i] == 1 and D in str(i): result.</description>
    </item>
    
    <item>
      <title>SW Expert Academy_D3 2817, 1491, 1229, 5515</title>
      <link>https://colinder.github.io/post/algorithm/sw_20.09.05/</link>
      <pubDate>Sat, 05 Sep 2020 00:06:14 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/algorithm/sw_20.09.05/</guid>
      <description>​
D3_2817_부분 수열의 합 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  import itertools for T in range(int(input())): N, K = map(int, input().split()) # N: 갯수, K: 목표 합 Nums = list(map(int, input().split())) count = 0 for i in range(1, N+1): boxs = itertools.combinations(Nums, i) for box in boxs: if sum(box) == K: count += 1 print(count) # 하... 라이브러리 쓰자..   ​</description>
    </item>
    
    <item>
      <title>SW Expert Academy_D3 10505, 10200, 3376, 5642</title>
      <link>https://colinder.github.io/post/algorithm/sw_20.09.04/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:59 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/algorithm/sw_20.09.04/</guid>
      <description>​
D3_10505_소득 불균형 1 2 3 4 5 6 7 8 9  for T in range(int(input())): N = int(input()) dp = [0] * 100001 Max = 0 for i in list(map(int, input().split())): dp[i] += 1 Max += i print(f&amp;#39;#{T+1} {sum(dp[:int(Max/N)+1])}&amp;#39;)   ​
D3_10200_구독자 전쟁 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  for T in range(int(input())): N, A, B = map(int, input().</description>
    </item>
    
    <item>
      <title>Block_Chain setting &amp; basic</title>
      <link>https://colinder.github.io/post/block_chain/block_chain/</link>
      <pubDate>Thu, 03 Sep 2020 22:06:15 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/block_chain/block_chain/</guid>
      <description>​
🎈가상환경에서 블록체인 채굴 및 기본 시스템 정리 ​
1. geth(Go-ethereum) 설치  블록체인 기술은 중앙집중화된 데이터베이스에 반기를 들고 나온 개념이기 때문에 중앙 서버 이런게 없다. 즉 누구라도 해당 블록체인 네트워크에 참여하고 싶다면 언제라도 블록체인 데이터베이스를 싱크해주는 로컬 프로그램을 다운 받아 실행하면 데이터를 받을 수 있다.
그렇다면 블록체인 네트워크에 참여하고 싶다면 어떻게 해야 할까? 앞서 말한 로컬 프로그램을 다운 받으면 참여가 가능하다.
이 프로그램들 중 하나인 GO 로 짜여진 Go Ethereum(줄여서, geth)을 설치해본다.</description>
    </item>
    
    <item>
      <title>08_Vuex_03</title>
      <link>https://colinder.github.io/post/vue/08_vuex_03/</link>
      <pubDate>Thu, 27 Aug 2020 21:48:19 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/vue/08_vuex_03/</guid>
      <description>​
Vuex 핵심컨셉(getters, mutations, actions, modules)  3. Actions  공식문서에 따르면 액션(Actions)은 변이(mutations)와 유사하나, 몇가지 다른 점이 있다고 한다.
 상태를 변이시키는 대신 액션으로 변이에 대한 커밋을 합니다. 작업에는 임의의 비동기 작업이 포함될 수 있습니다.    Q. 상태를 변이시키는 대신 액션으로 변이에 대한 커밋을 합니다.
A. mutations의 역할은 State를 관리하는 것이다. 그런데 만약 비동기적 요청을 마구잡이로 보내게 된다면, State가 변질될 가능성이 높아진다. 결국 비동기 요청의 경우에도 mutations에 정의한 메소드의 형태로 보내어 상태가 변화하는 것을 추적한다.</description>
    </item>
    
    <item>
      <title>BEAKJOON 10844, 2156, </title>
      <link>https://colinder.github.io/post/algorithm/bj_20.08.25/</link>
      <pubDate>Tue, 25 Aug 2020 23:01:50 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/algorithm/bj_20.08.25/</guid>
      <description>​
10844_쉬운 계단 수 1    ​
2156_포도주 시식 1       포도주 6 10 13 8 8 1     넘버링 c1 c2 c3 c4 c5 c6    |경우의 수| c1| c1 + c2 | c1 + c2 | | | | | | | | c1 + C3 | | |</description>
    </item>
    
    <item>
      <title>07_Vuex_02</title>
      <link>https://colinder.github.io/post/vue/07_vuex_02/</link>
      <pubDate>Sun, 16 Aug 2020 19:39:10 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/vue/07_vuex_02/</guid>
      <description>​
Vuex 핵심컨셉(getters, mutations, actions, modules)  1. Getters  만약? A.vue와 B.vue에서 각각 store의 state에 등록된 second의 2를 3으로 변형해 사용하고 싶다면 어떻게 해야 할까? 저장소에 등록되어 있는 상태(state)를 변경하고 싶다면?
 이런 모습으로&#34;이런 모습으로 아마 귀찮겠지만, 각각의 파일에서
1 2 3 4 5 6 7  // A.vue  computed: { change() { return this.$store.state.second + 1 } }   1 2 3 4 5 6 7  // B.</description>
    </item>
    
    <item>
      <title>04_Vue_Reactivity</title>
      <link>https://colinder.github.io/post/vue/04_vue_reactivity/</link>
      <pubDate>Sun, 16 Aug 2020 12:22:44 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/vue/04_vue_reactivity/</guid>
      <description>​
Vue_반응형 </description>
    </item>
    
    <item>
      <title>06_Vue_LifeCycle</title>
      <link>https://colinder.github.io/post/vue/06_vue_lifecycle/</link>
      <pubDate>Fri, 14 Aug 2020 21:04:53 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/vue/06_vue_lifecycle/</guid>
      <description>​
Vue_LifeCycle  솔직한 고백으로, 처음 라이프사이클이란 것을 배웠을 때는 이게 무슨 말인지?, 어떤 경우에 이 삶의 주기를 고려하게 되는지 전혀 납득, 이해하지 못했다. Vue 공식문서에는 나와 비슷한 사용자들에게 말하고 있다.
지금 당장 모든 것을 완전히 이해할 필요는 없지만 다이어그램은 앞으로 도움이 될 것입니다.
 </description>
    </item>
    
    <item>
      <title>BEAKJOON 1149, 1932, 2579, 1463</title>
      <link>https://colinder.github.io/post/algorithm/bj_20.08.06/</link>
      <pubDate>Wed, 05 Aug 2020 22:11:35 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/algorithm/bj_20.08.06/</guid>
      <description>​
1149_RGB거리 1 2 3 4 5 6 7 8 9 10 11 12 13  N = int(input()) RGB = [list(map(int, input().split())) for _ in range(N)] for i in range(1, len(RGB)): RGB[i][0] = RGB[i][0] + min(RGB[i-1][1], RGB[i-1][2]) RGB[i][1] = RGB[i][1] + min(RGB[i-1][0], RGB[i-1][2]) RGB[i][2] = RGB[i][2] + min(RGB[i-1][0], RGB[i-1][1]) print(min(RGB[i][0], RGB[i][1], RGB[i][2])) # 2시간이 넘게 고민한 결과... # 문제 속 조건3 &amp;#34;&amp;#34;i(2 ≤ i ≤ N-1)번 집의 색은 i-1번, i+1번 집의 색과 같지 않아야 한다.</description>
    </item>
    
    <item>
      <title>BEAKJOON 1103, 1904, 2748, 9461</title>
      <link>https://colinder.github.io/post/algorithm/bj_20.08.04/</link>
      <pubDate>Tue, 04 Aug 2020 22:12:11 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/algorithm/bj_20.08.04/</guid>
      <description>​
1003_피보나치 함수 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  def Fibonacci(N): if N &amp;lt; 3: print(zero[N], one[N]) else: f = 1 s = 2 for i in range(N-2): zero.append(zero[f] + zero[s]) one.append(one[f] + one[s]) f += 1 s += 1 print(zero[N], one[N]) for T in range(int(input())): N = int(input()) zero = [1, 0, 1] one = [0, 1, 1] Fibonacci(N)   ​</description>
    </item>
    
    <item>
      <title>Naming Convention</title>
      <link>https://colinder.github.io/post/namingconvention/</link>
      <pubDate>Sun, 02 Aug 2020 22:24:45 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/namingconvention/</guid>
      <description>​
Naming Convention  정해진 규정은 없으나, 많은 개발자들이 암묵적으로 지키고 있는 이름짓는 방법.
 ​
  snake_case 🐍
1 2 3  # _ == snake some_var = 5 my_awesome = 3   ​
  camelCase 🐪
1 2 3  # 낙타등이 솟아 있는 모습 someVar = 5 pyAwesome = 3   ​
  UpperCamelCase 🐪🐪
1 2 3  # 낙타얼굴과 등이 중간에 솟아 있는 모습 (파스칼식(Pascal case)이라고도 불린다.</description>
    </item>
    
    <item>
      <title>05_Vuex_01</title>
      <link>https://colinder.github.io/post/vue/05_vuex_01/</link>
      <pubDate>Sun, 02 Aug 2020 22:22:58 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/vue/05_vuex_01/</guid>
      <description>​
Vuex 란? (공식문서)  Vuex는 Vue.js 애플리케이션에 대한 상태 관리 패턴 + 라이브러리 입니다. 애플리케이션의 모든 컴포넌트에 대한 중앙 집중식 저장소 역할을 하며 예측 가능한 방식으로 상태를 변경할 수 있습니다. 또한 Vue의 공식 devtools 확장 프로그램과 통합되어 설정 시간이 필요 없는 디버깅 및 상태 스냅 샷 내보내기/가져오기와 같은 고급 기능을 제공합니다. (공식문서 설명)
 ​
1 2 3 4 5  # 설치 명령어 npm i vuex or npm install vuex # 이후 src폴더안에 vuex폴더를 만들고 store.</description>
    </item>
    
    <item>
      <title>SW Expert Academy_D3 4466, 4406, 4371, 4299</title>
      <link>https://colinder.github.io/post/algorithm/sw_20.07.29/</link>
      <pubDate>Wed, 29 Jul 2020 22:59:28 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/algorithm/sw_20.07.29/</guid>
      <description>​
D3_4466_최대 성적표 만들기 1 2 3 4 5 6 7 8 9 10 11  for T in range(int(input())): N, K = map(int, input().split()) score = list(map(int, input().split())) score.sort(reverse=True) result = 0 for i in range(K): result += score[i] print(&amp;#39;#{} {}&amp;#39;.format(T+1, result))   ​
D3_4406_모음이 보이지 않는 사람 1 2 3 4 5 6 7  for T in range(int(input())): sent = input() result = &amp;#39;&amp;#39; for i in sent: if i not in &amp;#39;aeiou&amp;#39;: result += i print(&amp;#39;#{} {}&amp;#39;.</description>
    </item>
    
    <item>
      <title>03_Vue_cli &amp; router &amp; histoyMode</title>
      <link>https://colinder.github.io/post/vue/03_vue_cli/</link>
      <pubDate>Fri, 17 Jul 2020 22:03:11 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/vue/03_vue_cli/</guid>
      <description>​
1. Vue CLI 란? (공식문서) 간단히 vue-cli 는 기본 vue 개발 환경을 설정해주는 도구
 여기서 CLI 란 ?
명령 줄 인터페이스(CLI, Command line interface) 또는 명령어 인터페이스는 텍스트 터미널을 통해 사용자와 컴퓨터가 상호 작용하는 방식. 즉, 작업 명령은 사용자가 컴퓨터 키보드 등을 통해 문자열의 형태로 입력하며, 컴퓨터로부터의 출력 역시 문자열의 형태로 주어진다. (위키백과)
 ​
2. Vue router 프로젝트 생성 후 보통의 경우 편의를 위해 terminal에 vue add router를 입력해 router설치를 진행한다.</description>
    </item>
    
    <item>
      <title>02_Vue_basic (Vue 문법2)</title>
      <link>https://colinder.github.io/post/vue/02_vue_basic/</link>
      <pubDate>Fri, 17 Jul 2020 22:03:09 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/vue/02_vue_basic/</guid>
      <description>​
Vue의 기본 문법 및 동작 방법을 계속 알아보자 08_methods
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  ✨Point 1. method는 methods: {}의 문법으로 구성한다. &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Methods&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#39;app&amp;#39;&amp;gt; {{ message }} &amp;lt;/div&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>01_Vue_basic (Vue란? &amp; Vue 문법1)</title>
      <link>https://colinder.github.io/post/vue/01_vue_basic/</link>
      <pubDate>Fri, 17 Jul 2020 22:03:05 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/vue/01_vue_basic/</guid>
      <description>​
Vue  Vue.js는 웹 애플리케이션의 사용자 인터페이스를 만들기 위해 사용하는 오픈 소스 프로그레시브 자바스크립트 프레임워크
 ​
Vue의 이론적 구성 및 설명을 알아보자 1. Vue는 MVVM 패턴을 따른다.
 MVVM(Model-View-ViewModel) 패턴?
모델과 뷰 사이에 뷰모델이 위치하는 구조
 MVVM 패턴&#34;MVVM 패턴 ​
2. Vue는 SPA (Single-Page Application)
 서버로부터 완전한 새로운 페이지를 불러오지 않고 현재의 페이지를 동적으로 다시 작성함으로써 사용자와 소통하는 웹 애플리케이션을 말한다.
내가 이해한 방식: 변경사항이 발생했을 때 새로고침을하며 매번 페이지를 새롭게 구서하는 것이 아니라, 서버를 돌릴 때 이미 모든 페이지가 제작되어 있고 이를 사용자의 선택에 따라 보여주는 것.</description>
    </item>
    
    <item>
      <title>00_Vue_setting</title>
      <link>https://colinder.github.io/post/vue/00_vue_setting/</link>
      <pubDate>Fri, 17 Jul 2020 21:56:29 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/vue/00_vue_setting/</guid>
      <description>​
Vue  Vue.js는 웹 애플리케이션의 사용자 인터페이스를 만들기 위해 사용하는 오픈 소스 프로그레시브 자바스크립트 프레임워크
 ​
1. 시작하기   &amp;lsquo;Vue&amp;rsquo; VS &amp;lsquo;Django&amp;rsquo;
 어느 정도 공부를 하면서 체득한 가장 큰 구분점은 &amp;ldquo;Django는 App별로 응답을 구분하고, Vue는 Component별로 응답을 구분한다.&amp;ldquo;는 것이다.
큰 차이가 없어보이고, 큰 의미가 없어보일 수 있으나 이는 내가 vue를 이해하는데 가장 많은 도움이 된 부분이다.
    개발 환경 설정 &amp;amp; 프로젝트 생성</description>
    </item>
    
    <item>
      <title>SW Expert Academy_D3 4676, 4615, 4579, 4522</title>
      <link>https://colinder.github.io/post/algorithm/sw_20.07.10/</link>
      <pubDate>Fri, 10 Jul 2020 11:27:50 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/algorithm/sw_20.07.10/</guid>
      <description>​
D3_4676_늘어지는 소리 만들기 1 2 3 4 5 6 7 8 9 10 11 12  for T in range(int(input())): sent = list(input()) # wow H = int(input()) po = sorted(list(map(int, input().split()))) # 2 3 2 for i in range(H): a = po[i]+i sent.insert(a,&amp;#39;-&amp;#39;) print(&amp;#39;#{} {}&amp;#39;.format(T+1, &amp;#39;&amp;#39;.join(sent))) # 단순 산수로 해결   ​
D3_4615_재미있는 오셀로 게임 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  dx = [0, 1, 1, 1, 0, -1, -1, -1] dy = [1, 1, 0, -1, -1, -1, 0, 1] def dfs(x, y, i ,stone): if board[x][y] == 0: return 0 elif board[x][y] == stone: return 1 else: if dfs(x+dx[i], y+dy[i], i, stone): board[x][y] = stone return 1 else: return 0 for T in range(int(input())): N, M = map(int, input().</description>
    </item>
    
    <item>
      <title>Django_02_CRUD(02)</title>
      <link>https://colinder.github.io/post/django/django_02_crud_c/</link>
      <pubDate>Fri, 10 Jul 2020 11:04:11 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/django/django_02_crud_c/</guid>
      <description>CRUD?  CRUD는 대부분의 컴퓨터 소프트웨어가 가지는 기본적인 데이터 처리 기능인 Create(생성), Read(읽기), Update(갱신), Delete(삭제)를 묶어서 일컫는 말이다. 사용자 인터페이스가 갖추어야 할 기능(정보의 참조/검색/갱신)을 구현해보자
 </description>
    </item>
    
    <item>
      <title>SW Expert Academy_D3 5162, 4789, 4751, 4698</title>
      <link>https://colinder.github.io/post/algorithm/sw_20.07.08/</link>
      <pubDate>Wed, 08 Jul 2020 15:07:10 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/algorithm/sw_20.07.08/</guid>
      <description>​
D3_5162_두가지 빵의 딜레마 1 2 3 4 5 6 7  for T in range(int(input())): A, B, C = map(int, input().split()) N = min(A, B) print(&amp;#34;#{} {}&amp;#34;.format(T+1, int(C/N))) # 단순 산수로 해결   ​
D3_4789_성공적인 공연 기획 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  for T in range(int(input())): P = list(map(int, map(str, input())))	need = P[0] count = 0 for i in range(1, len(P)): if need &amp;gt;= i: need += P[i] else: count += i - need need = i + P[i] print(f&amp;#39;#{T+1} {count}&amp;#39;) # 문제를 이해하는 것이 Point였다.</description>
    </item>
    
    <item>
      <title>SW Expert Academy_D3 5431, 5356, 5293, 5215</title>
      <link>https://colinder.github.io/post/algorithm/sw_20.07.01/</link>
      <pubDate>Wed, 01 Jul 2020 21:09:36 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/algorithm/sw_20.07.01/</guid>
      <description>​
D3_5431_민석이의 과제 체크하기 1 2 3 4 5 6 7 8 9 10 11 12  for T in range(int(input())): N, K = map(int, input().split()) P = list(map(int, input().split())) result = [] for i in range(1,N+1): if i not in P: result.append(str(i)) print(&amp;#39;#{} {}&amp;#39;.format(T+1, &amp;#39; &amp;#39;.join(result))) # 제출한 수강생 리스트를 만들고(P) 이를 for로 돌리며 검증   ​
D3_5356_의석이의 세로로 말해요 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  for T in range(int(input())): sent = [list(str(input())) for _ in range(5)] #입력받은 요소의 길이를 알아내야 한다.</description>
    </item>
    
    <item>
      <title>Hugo_setting stroy (feat.LoveTt 제작자)</title>
      <link>https://colinder.github.io/post/hugo/hugo_setting/</link>
      <pubDate>Mon, 29 Jun 2020 15:49:37 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/hugo/hugo_setting/</guid>
      <description>​
블로그를 만들면서&amp;hellip; 최초 기술블로그를 제작하면서 바닥부터 모든 것을 스스로 만들어 보기로 결심하고 제작을 시작하지만, 결코 쉽지 않았다. 개인적으로 꼭 원했던 기능이었던 tag기능과 categories를 구현하지 못하면서&amp;hellip; 결국 기존에 있는 라이브러리들을 활용하기로 한다.
​
**가장 많은 사용자가 존재하는 jekyll로 시작한다. **
​
jekyll 기초 설정  Jekyll : Jekyll은 Ruby Gem으로 제공되며 템플릿과 템플릿의 구성요소, 인라인 코드, 마크다운과 같은 동적인 구성요소를 정적인 웹페이지로 만들어주는 파싱 엔진
 ​
jekyll 서버 구동 방법 1 2 3 4 5  # 공식 홈페이지 설명 ~$ gem install bundler jekyll	# jekyll 구동을 위한 프로그램 설치 ~$ jekyll new MYBLOG	# MYBLOG 라는 이름의 블로그 폴더 &amp;amp; 기초틀 생성  ~$ cd MYBLOG	# MYBLOG 폴더로 이동 ~/MYBLOG $ bundle exec jekyll serve	# MYBLOG 서버 구동   1 2 3  # 이후 명령창에 Servuer address : http://127.</description>
    </item>
    
    <item>
      <title>Django_02_CRUD(01)</title>
      <link>https://colinder.github.io/post/django/django_02_crud_setting/</link>
      <pubDate>Thu, 25 Jun 2020 22:52:40 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/django/django_02_crud_setting/</guid>
      <description>​
Django 개발환경준비   편리함을 추구하기 위해 AWS Cloud9을 사용하여 진행
  https://ide.cs50.io/ 주소로 접속하면 진행이 가능하며, 진행을 위해선 Git 아이디가 있어야 한다.
Git? : 버전 관리 시스템이며 Git은 소프트웨어를 개발하는 기업의 핵심 자산인 소스코드를 효과적으로 관리할 수 있게 해주는 무료, 공개소프트웨어. git에 대한 내용은 따로 정리해보도록 한다.
  로그인까지 마치면 이제 Django 개발 준비 끝.
  C9 접속 화면(블랙테마 적용되어 있음)&#34;C9 접속 화면(블랙테마 적용되어 있음) ​</description>
    </item>
    
    <item>
      <title>SW Expert Academy_D3 5948, 5789, 5688, 5549</title>
      <link>https://colinder.github.io/post/algorithm/sw_20.06.25/</link>
      <pubDate>Thu, 25 Jun 2020 10:57:11 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/algorithm/sw_20.06.25/</guid>
      <description>​
D3_5948_새샘이의 7-3-5 게임 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  for T in range(int(input())): N = list(map(int, input().split())) result = set() for i in range(5): for j in range(i+1, 6): for x in range(j+1, 7): result.add(N[i]+N[j]+N[x]) result = list(result) result.sort() print(&amp;#39;#{} {}&amp;#39;.format(T+1, result[-5])) # 3수의 합을 정리하는데 set으로 중복을 제거하는 방법으로 result set을 정리 # set은 순서가 없기 때문에 result를 다시 list로 정리하고 .</description>
    </item>
    
    <item>
      <title>Django_01_basic</title>
      <link>https://colinder.github.io/post/django/django_01/</link>
      <pubDate>Tue, 23 Jun 2020 09:57:09 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/django/django_01/</guid>
      <description>​
Web ?  월드 와이드 웹(World Wide Web)이란 인터넷에 연결된 사용자들이 서로의 정보를 공유할 수 있는 공간을 의미하며, 줄여서 WWW나 W3라고도 부르며, 간단히 웹(Web)이라고 가장 많이 불린다.
인터넷과 같은 의미로 많이 사용되고 있지만, 정확히 말해 웹은 인터넷상의 인기 있는 하나의 서비스일 뿐.
Web의 작동방식을 간단히 설명하자면, 요청과 응답.
사용자는 서버에 어떠한 요구사항을 요청하고 서버는 이에 따라 처리결과를 응답한다.
예를들어 사용자가 Login 버튼을 누른 행위는 user가 서버에 로그인 하고 싶다고 요청한 것이며, 서버는 로그인 창을 띄움으로서 user가 로그인할 수 있게 응답한 것입니다.</description>
    </item>
    
    <item>
      <title>SW Expert Academy_D3 6190, 6057, 6019, 5986</title>
      <link>https://colinder.github.io/post/algorithm/sw_20.06.23/</link>
      <pubDate>Tue, 23 Jun 2020 09:05:05 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/algorithm/sw_20.06.23/</guid>
      <description>​
D3_6190_정곤이의 단조 증가하는 수 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  for T in range(int(input())): N = int(input()) L = list(map(int, input().split())) result = -1 for i in range(N-1): for j in range(i+1, N): num = str(L[i]*L[j]) if len(num) &amp;gt; 1 and &amp;#39;0&amp;#39; not in num and result &amp;lt; int(num) and list(num) == sorted(num): result = int(num) print(f&amp;#39;#{T+1} {result}&amp;#39;) # 단조증가하는 지를 검증하는 방법으로 sorted를 썼는데 이를 활용하기 위해서는 str형태로 변경해야 검증이 가능하다.</description>
    </item>
    
    <item>
      <title>SW Expert Academy_D3 9700, 7675, 6692, 6485</title>
      <link>https://colinder.github.io/post/algorithm/sw_20.06.20/</link>
      <pubDate>Sat, 20 Jun 2020 22:46:41 +0900</pubDate>
      
      <guid>https://colinder.github.io/post/algorithm/sw_20.06.20/</guid>
      <description>​
D3_9700_USB 꽂기의 미스터리 1 2 3 4 5 6 7 8 9 10 11  for T in range(int(input())): p, q = map(float, input().split()) s1 = (1-p)*q s2 = p*(1-q)*q if s1 &amp;lt; s2: print(f&amp;#39;#{T+1} YES&amp;#39;) else: print(f&amp;#39;#{T+1} NO&amp;#39;) # 단순 수학을 통해 해결.   ​
D3_7675_통역사 성경이 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  for T in range(int(input())): N = int(input()) sent = input() sent = sent.</description>
    </item>
    
  </channel>
</rss>

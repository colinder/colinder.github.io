<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Django - Category - </title>
        <link>https://colinder.github.io/categories/django/</link>
        <description>Django - Category - </description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 24 Sep 2020 09:54:40 &#43;0900</lastBuildDate><atom:link href="https://colinder.github.io/categories/django/" rel="self" type="application/rss+xml" /><item>
    <title>REST</title>
    <link>https://colinder.github.io/rest-api-reference/</link>
    <pubDate>Thu, 24 Sep 2020 09:54:40 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/rest-api-reference/</guid>
    <description><![CDATA[​
REST API Reference [TOC]
1.사용자 API    Members Descriptions     POST /accounts/signup 회원가입   POST /accounts/login 회원 로그인   POST /accounts/userDetail 회원정보   PUT /accounts/update 회원정보 수정   DELETE /accounts/dropUser 회원탈퇴   GET /accounts/emailAuth 이메일 인증   GET /accounts/emailCheck 이메일 중복 확인   GET /accounts/nicknameCheck 닉네임 중복 확인    1.1 회원 로그인 POST /accounts/login ​	회원 로그인 API 입니다.]]></description>
</item><item>
    <title>Naming Convention</title>
    <link>https://colinder.github.io/namingconvention/</link>
    <pubDate>Sun, 02 Aug 2020 22:24:45 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/namingconvention/</guid>
    <description><![CDATA[​
Naming Convention  정해진 규정은 없으나, 많은 개발자들이 암묵적으로 지키고 있는 이름짓는 방법.
 ​
  snake_case 🐍
1 2 3  # _ == snake some_var = 5 my_awesome = 3   ​
  camelCase 🐪
1 2 3  # 낙타등이 솟아 있는 모습 someVar = 5 pyAwesome = 3   ​
  UpperCamelCase 🐪🐪
1 2 3  # 낙타얼굴과 등이 중간에 솟아 있는 모습 (파스칼식(Pascal case)이라고도 불린다.]]></description>
</item><item>
    <title>Django_02_CRUD(02)</title>
    <link>https://colinder.github.io/django_02_crud_c/</link>
    <pubDate>Fri, 10 Jul 2020 11:04:11 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_02_crud_c/</guid>
    <description><![CDATA[CRUD?  CRUD는 대부분의 컴퓨터 소프트웨어가 가지는 기본적인 데이터 처리 기능인 Create(생성), Read(읽기), Update(갱신), Delete(삭제)를 묶어서 일컫는 말이다. 사용자 인터페이스가 갖추어야 할 기능(정보의 참조/검색/갱신)을 구현해보자
 ]]></description>
</item><item>
    <title>Django_02_CRUD(01)</title>
    <link>https://colinder.github.io/django_02_crud_setting/</link>
    <pubDate>Thu, 25 Jun 2020 22:52:40 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_02_crud_setting/</guid>
    <description><![CDATA[​
Django 개발환경준비   편리함을 추구하기 위해 AWS Cloud9을 사용하여 진행
  https://ide.cs50.io/ 주소로 접속하면 진행이 가능하며, 진행을 위해선 Git 아이디가 있어야 한다.
Git? : 버전 관리 시스템이며 Git은 소프트웨어를 개발하는 기업의 핵심 자산인 소스코드를 효과적으로 관리할 수 있게 해주는 무료, 공개소프트웨어. git에 대한 내용은 따로 정리해보도록 한다.
  로그인까지 마치면 이제 Django 개발 준비 끝.
  C9 접속 화면(블랙테마 적용되어 있음)"C9 접속 화면(블랙테마 적용되어 있음) ​]]></description>
</item><item>
    <title>Django_01_basic</title>
    <link>https://colinder.github.io/django_01/</link>
    <pubDate>Tue, 23 Jun 2020 09:57:09 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_01/</guid>
    <description><![CDATA[​
Web ?  월드 와이드 웹(World Wide Web)이란 인터넷에 연결된 사용자들이 서로의 정보를 공유할 수 있는 공간을 의미하며, 줄여서 WWW나 W3라고도 부르며, 간단히 웹(Web)이라고 가장 많이 불린다.
인터넷과 같은 의미로 많이 사용되고 있지만, 정확히 말해 웹은 인터넷상의 인기 있는 하나의 서비스일 뿐.
Web의 작동방식을 간단히 설명하자면, 요청과 응답.
사용자는 서버에 어떠한 요구사항을 요청하고 서버는 이에 따라 처리결과를 응답한다.
예를들어 사용자가 Login 버튼을 누른 행위는 user가 서버에 로그인 하고 싶다고 요청한 것이며, 서버는 로그인 창을 띄움으로서 user가 로그인할 수 있게 응답한 것입니다.]]></description>
</item></channel>
</rss>

<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Nest - Category - </title>
        <link>https://colinder.github.io/categories/nest/</link>
        <description>Nest - Category - </description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 03 Jan 2024 13:36:17 &#43;0900</lastBuildDate><atom:link href="https://colinder.github.io/categories/nest/" rel="self" type="application/rss+xml" /><item>
    <title>Nest Official_01_(Introduction, First steps, Controllers, Providers)</title>
    <link>https://colinder.github.io/nest-official_01_introduction-first-steps-controllers-providers/</link>
    <pubDate>Wed, 03 Jan 2024 13:36:17 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/nest-official_01_introduction-first-steps-controllers-providers/</guid>
    <description><![CDATA[​
Introduction Nest.js 는 효율적이고 확장가능한 node.js SSR을 구축하기 위한 프레임워크.
Nest.js는 progressive(점진적인) JavaScript를 사용하며.(progressive JavaScript; 웹과 네이티브 엡을 모두 대응하는 등 점진적인 방법론을 javascript를 통해 개발하는 개념.) TypeScript를 지원(javascript로 개발도 가능) 그리고 OOP(객체 지향 프로그래밍), FP(기능적 프로그래밍), FRP(기능적 반응 프로그래밍)의 요소들을 결합합니다.
후드 아래에서 Nest는 Express(기본값)와 같은 강력한 HTTP 서버 프레임워크를 사용하며 Fastify를 사용하도록 구성할 수도 있습니다!
Nest는 이러한 일반적인 Node.js 프레임워크(Express/Fastify) 이상의 추상화 수준을 제공하지만 개발자에게 API를 직접 노출시킵니다.]]></description>
</item></channel>
</rss>

<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Web Socket - Category - </title>
        <link>https://colinder.github.io/categories/web-socket/</link>
        <description>Web Socket - Category - </description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 25 Feb 2022 12:20:35 &#43;0900</lastBuildDate><atom:link href="https://colinder.github.io/categories/web-socket/" rel="self" type="application/rss+xml" /><item>
    <title>What is Web Socket?</title>
    <link>https://colinder.github.io/what_is_web_socket/</link>
    <pubDate>Fri, 25 Feb 2022 12:20:35 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/what_is_web_socket/</guid>
    <description><![CDATA[​
What is Web Socket?  Web 통신은 무조건 두 단계를 걸쳐 동작합니다. 요청과 응답. 간단히 어떤 요청이 있을 때만 서버와 연결되어 어떤 응답을 하게 됩니다. 이러한 방식을 HTTP라고 합니다. 예를 들어, Naver.com에 접속하는 것은 &lsquo;Naver.com&rsquo;이라는 요청을 보낸 것이고 그에 대한 응답으로 naver의 메인 화면을 보여주는 것이죠. 그런데 만약 실시간 채팅 서비스나 푸시 알람을 구현해야 한다면, 매우 잦은 요청을 보내야 하고 네트워크 상 많은 부하를 발생시킬 수 있습니다.
 HTML5이라는 웹 표준이 생긴이래로 이러한 HTTP의 단점을 보완하기 위해 웹 소켓(Web Socket)이 등장했습니다.]]></description>
</item></channel>
</rss>

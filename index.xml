<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title></title>
        <link>https://colinder.github.io/</link>
        <description>Hello New World</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 22 Apr 2021 23:13:25 &#43;0900</lastBuildDate>
            <atom:link href="https://colinder.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Django_01_startproject</title>
    <link>https://colinder.github.io/django_01_startproject/</link>
    <pubDate>Thu, 22 Apr 2021 23:13:25 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_01_startproject/</guid>
    <description><![CDATA[Django 개발환경준비   편리함을 추구하기 위해 AWS Cloud9을 사용하여 진행
  https://ide.cs50.io/ 주소로 접속하면 진행이 가능하며, 진행을 위해선 Git 아이디가 있어야 한다.
Git? : 버전 관리 시스템이며 Git은 소프트웨어를 개발하는 기업의 핵심 자산인 소스코드를 효과적으로 관리할 수 있게 해주는 무료, 공개소프트웨어. git에 대한 내용은 따로 정리해보도록 한다.
  로그인까지 마치면 이제 Django 개발 준비 끝.
​
   👏 21.04.18 기준 django : 3.2 V 으로 다시 정리 합니다.]]></description>
</item><item>
    <title>Django_00_basic</title>
    <link>https://colinder.github.io/django_00_whatisdjango/</link>
    <pubDate>Thu, 22 Apr 2021 23:10:27 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_00_whatisdjango/</guid>
    <description><![CDATA[​
Web ?  월드 와이드 웹(World Wide Web)이란 인터넷에 연결된 사용자들이 서로의 정보를 공유할 수 있는 공간을 의미하며, 줄여서 WWW나 W3라고도 부르며, 간단히 웹(Web)이라고 가장 많이 불린다.
인터넷과 같은 의미로 많이 사용되고 있지만, 정확히 말해 웹은 인터넷상의 인기 있는 하나의 서비스일 뿐.
Web의 작동방식을 간단히 설명하자면, 요청과 응답.
사용자는 서버에 어떠한 요구사항을 요청하고 서버는 이에 따라 처리결과를 응답한다.
예를들어 사용자가 Login 버튼을 누른 행위는 user가 서버에 로그인 하고 싶다고 요청한 것이며, 서버는 로그인 창을 띄움으로서 user가 로그인할 수 있게 응답한 것입니다.]]></description>
</item><item>
    <title>programmers_21.04.21</title>
    <link>https://colinder.github.io/pg_21.04.21/</link>
    <pubDate>Wed, 21 Apr 2021 23:42:17 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/pg_21.04.21/</guid>
    <description><![CDATA[​
타겟 넘버 1 2 3 4 5 6 7 8 9 10 11 12  numbers = [1, 1, 1, 1, 1] target = 3 # return = 5 from itertools import product l = [(-number, number)for number in numbers] s = list(map(sum, product(*l))) print(s.count(target)) ## 미쳤다. product()..   ​
K번째 수 1 2 3 4 5 6 7 8 9 10 11 12 13 14  array = [1, 5, 2, 6, 3, 7, 4]	commands = [[2, 5, 3], [4, 4, 1], [1, 7, 3]] def solution(array, commands): answer = [] for _ in commands: i, j, k = _ q = array[i-1: j] q.]]></description>
</item><item>
    <title>SW Expert Academy_D4 11316</title>
    <link>https://colinder.github.io/sw_21.04.04/</link>
    <pubDate>Sun, 04 Apr 2021 14:56:09 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sw_21.04.04/</guid>
    <description><![CDATA[​
D4_11316_주기 찾기 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  for T in range(int(input())): s, p, q, m = map(int, input().split()) V = s visited = [0]*m i = 1 while True: V = (p*V + q) % m i += 1 if visited[V] != 0: result = i - visited[V] break visited[V] = i print(f&#39;#{T+1} {result}&#39;) # 한 번 나왔던 숫자의 &#39;위치 정보(i)&#39;를  # visited에 저장해 두었다가 # 한 번이라도 방문했던 숫자가 나왔을 때 # 저장해주었던 &#39;위치 정보&#39;의 차리를 계산해 준다.]]></description>
</item><item>
    <title>Git_LFS</title>
    <link>https://colinder.github.io/git_lfslarge-file-storage/</link>
    <pubDate>Thu, 25 Mar 2021 22:28:20 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/git_lfslarge-file-storage/</guid>
    <description><![CDATA[​
Git LFS(Large File Storage) 사용법  Git은 개당 파일에 100MB의 용량 제한이 걸려 있다. (전체 용량 제한은 없다.) 다만, 프로젝트를 하다보면 대용량의 자료나 파일이 생기는 경우가 있다. 이때 용량 제한의 문제를 해소할 수 있는 방법이 LFS이다.
LFS는 별도로 설치하여 사용하면 되며, 방법을 정리한다.
 *주소: https://git-lfs.github.com
​
  git LFS을 다운을 받고 설치 합니다.
​
  git LFS를 적용할 폴더로 이동해 다음 명령어를 입력합니다.
1  $ git lfs install   ​]]></description>
</item><item>
    <title>SW Expert Academy_D3 11445, 11387, 11285, 11315</title>
    <link>https://colinder.github.io/sw_21.03.24/</link>
    <pubDate>Wed, 24 Mar 2021 18:34:58 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sw_21.03.24/</guid>
    <description><![CDATA[​
D3_11445_무한 사전 1 2 3 4 5 6 7 8 9 10 11 12  for T in range(int(input())): P = input().rstrip() Q = input().rstrip() if P + &#34;a&#34; != Q: result = &#34;Y&#34; else: result = &#34;N&#34; print(f&#39;#{T+1} {result}&#39;) # 왜 D3 인가.   ​
D3_11387_몬스터 사냥 1 2 3 4 5 6 7 8  for T in range(int(input())): D, L, N = map(int, input().split()) result = 0 for i in range(N): result += D * (1 + L*i/100) print(f&#39;#{T+1} {int(result)}&#39;)   ​]]></description>
</item><item>
    <title>Python_Library</title>
    <link>https://colinder.github.io/python_library/</link>
    <pubDate>Mon, 08 Mar 2021 22:39:31 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/python_library/</guid>
    <description><![CDATA[​
Python Library 😀   Idea 1 2 3 4 5 6 7 8 9 10 11 12 13  # 모두 &#39;거짓&#39;이 들어있는 리스트는 &#39;거짓&#39;으로 볼 수 있지 않을까? # 라고 생각해봤다.  a = [False, False, False] if a == False: print(&#34;거짓&#34;) else: print(&#34;오류&#34;) # &gt;&gt;&gt; 오류 # 안된다. 생각을 말아라..ㅎㅎ   ​
  raise 예외(&lsquo;에러메시지&rsquo;) 1 2 3 4 5 6 7 8 9 10 11 12  # python에서는 의도적으로 오류를 일으킬 수 있는데 # 이를 해주는 것이 raise 메서드.]]></description>
</item><item>
    <title>BEAKJOON 2630, 1992</title>
    <link>https://colinder.github.io/bj_21.03.02/</link>
    <pubDate>Tue, 02 Mar 2021 21:03:23 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/bj_21.03.02/</guid>
    <description><![CDATA[​
2630_색종이 만들기 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  import sys def DFS(x, y, N): global W, B color = arr[x][y] for cx in range(x, x+N): for cy in range(y, y+N): if arr[cx][cy] != color: DFS(x, y, N//2) DFS(x, N//2+y, N//2) DFS(N//2+x, y, N//2) DFS(N//2+x, N//2+y, N//2) return	# 이걸 안해주면 쓸모 없는 DFS에 더 들어가게 된다.]]></description>
</item><item>
    <title>BEAKJOON 5052, 9372</title>
    <link>https://colinder.github.io/bj_21.02.25/</link>
    <pubDate>Thu, 25 Feb 2021 20:42:26 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/bj_21.02.25/</guid>
    <description><![CDATA[​
5052_전화번호 목록 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  import sys for T in range(int(sys.stdin.readline().rstrip())): N = int(sys.stdin.readline().rstrip()) Numbers = [] for _ in range(N): Numbers.append(sys.stdin.readline().rstrip()) Numbers.sort() result = &#34;YES&#34; for i in range(len(Numbers)-1): if Numbers[i+1].find(Numbers[i], 0, len(Numbers[i])) != -1: result = &#39;NO&#39; break print(result) # 흠.. 다른 사람들은 트리로 풀었나..? # 이게 왜 트리에 있지.]]></description>
</item><item>
    <title>BEAKJOON 1991, 11725, 1967, 1167</title>
    <link>https://colinder.github.io/bj_21.02.18/</link>
    <pubDate>Thu, 18 Feb 2021 21:24:02 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/bj_21.02.18/</guid>
    <description><![CDATA[​
1991_트리 순회 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  class Node: def __init__(self, data, L, R): self.data = data self.left = L self.right = R def preorder(node): # 전위 순회 print(node.data, end=&#34;&#34;) if node.]]></description>
</item></channel>
</rss>

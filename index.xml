<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title></title>
        <link>http://example.org/</link>
        <description>Hello New World</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 17 Jul 2020 22:03:11 &#43;0900</lastBuildDate>
            <atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Vue_basic_03</title>
    <link>http://example.org/vue_basic_03/</link>
    <pubDate>Fri, 17 Jul 2020 22:03:11 &#43;0900</pubDate>
    <author>Author</author>
    <guid>http://example.org/vue_basic_03/</guid>
    <description><![CDATA[​
1. VUE CLI 란? (공식문서) 간단히 vue-cli 는 기본 vue 개발 환경을 설정해주는 도구
 여기서 CLI 란 ?
명령 줄 인터페이스(CLI, Command line interface) 또는 명령어 인터페이스는 텍스트 터미널을 통해 사용자와 컴퓨터가 상호 작용하는 방식. 즉, 작업 명령은 사용자가 컴퓨터 키보드 등을 통해 문자열의 형태로 입력하며, 컴퓨터로부터의 출력 역시 문자열의 형태로 주어진다. (위키백과)
 ​
2. vue router 프로젝트 생성 후 보통의 경우 편의를 위해 terminal에 vue add router를 입력해 router설치를 진행한다.]]></description>
</item><item>
    <title>Vue_basic_02</title>
    <link>http://example.org/vue_basic_02/</link>
    <pubDate>Fri, 17 Jul 2020 22:03:09 &#43;0900</pubDate>
    <author>Author</author>
    <guid>http://example.org/vue_basic_02/</guid>
    <description><![CDATA[​
Vue의 기본 문법 및 동작 방법을 계속 알아보자 08_methods
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  ✨Point 1. method는 methods: {}의 문법으로 구성한다. &lt;!DOCTYPE html&gt; &lt;html lang=&#34;en&#34;&gt; &lt;head&gt; &lt;meta charset=&#34;UTF-8&#34;&gt; &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt; &lt;title&gt;Methods&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&#39;app&#39;&gt; {{ message }} &lt;/div&gt; &lt;!]]></description>
</item><item>
    <title>Vue_basic_01</title>
    <link>http://example.org/vue_basic_01/</link>
    <pubDate>Fri, 17 Jul 2020 22:03:05 &#43;0900</pubDate>
    <author>Author</author>
    <guid>http://example.org/vue_basic_01/</guid>
    <description><![CDATA[​
Vue  Vue.js는 웹 애플리케이션의 사용자 인터페이스를 만들기 위해 사용하는 오픈 소스 프로그레시브 자바스크립트 프레임워크
 ​
Vue의 이론적 구성 및 설명을 알아보자 1. Vue는 MVVM 패턴을 따른다.
 MVVM(Model-View-ViewModel) 패턴?
모델과 뷰 사이에 뷰모델이 위치하는 구조
 MVVM 패턴"MVVM 패턴 ​
2. Vue는 SPA (Single-Page Application)
 서버로부터 완전한 새로운 페이지를 불러오지 않고 현재의 페이지를 동적으로 다시 작성함으로써 사용자와 소통하는 웹 애플리케이션을 말한다.
내가 이해한 방식: 변경사항이 발생했을 때 새로고침을하며 매번 페이지를 새롭게 구서하는 것이 아니라, 서버를 돌릴 때 이미 모든 페이지가 제작되어 있고 이를 사용자의 선택에 따라 보여주는 것.]]></description>
</item><item>
    <title>Vue_setting</title>
    <link>http://example.org/vue_setting/</link>
    <pubDate>Fri, 17 Jul 2020 21:56:29 &#43;0900</pubDate>
    <author>Author</author>
    <guid>http://example.org/vue_setting/</guid>
    <description><![CDATA[​
Vue  Vue.js는 웹 애플리케이션의 사용자 인터페이스를 만들기 위해 사용하는 오픈 소스 프로그레시브 자바스크립트 프레임워크
 1. 시작하기  Vue VS Django
어느 정도 공부를 하면서 체득한 가장 큰 구분점은 &ldquo;Django는 App별로 응답을 구분하고, Vue는 Component별로 응답을 구분한다.&ldquo;는 것이다.
큰 차이가 없어보이고, 큰 의미가 없어보일 수 있으나 이는 내가 vue를 이해하는데 가장 많은 도움이 된 부분이다.
    개발 환경 설정 &amp; 프로젝트 생성
 vscode 설치 nodeJS 설치 vscode 실행 후 terminal에서 npm install 설치 vscode 실행 후 terminal에서 npm i -g @vue/cli 설치  설치가 잘 되었나 vue --version으로 확인 (버전이 보이면 ok)   (선택사항) vscode의 Extensions에서Vetur와 Vue VSCode Snippets 설치  Auto Rename Tag, Auto Close Tag    1 2 3 4  $ vue create myproject	# myproject 프로젝트 생성 $ cd myproject	# 생성한 myproject 폴더로 이동 $ vue add router	# (선택사항) myproject 히스토리를 관리해줄 router기능 설치 $ npm run serve	# myproject의 디폴트 서버 실행   1 2 3 4 5 6  App running at: - Local: http://localhost:8080/ - Network: http://192.]]></description>
</item><item>
    <title>주어들은 명언</title>
    <link>http://example.org/reminds_01/</link>
    <pubDate>Mon, 13 Jul 2020 22:56:13 &#43;0900</pubDate>
    <author>Author</author>
    <guid>http://example.org/reminds_01/</guid>
    <description><![CDATA[나한테 86400달러가 있는데 누가 10달러 훔쳐가면  도둑맞은 10달러 때문에 빡쳐서 86400달러를 다 버릴거냐 묻는다면 누구나 아니라고 할 것이다.
하루 중 기분나쁜 10초로 인해 모든 하루를 망치지 말자.
 ]]></description>
</item><item>
    <title>SW Expert Academy_D3 4676, 4615, 4579, 4522</title>
    <link>http://example.org/sw_20.07.10/</link>
    <pubDate>Fri, 10 Jul 2020 11:27:50 &#43;0900</pubDate>
    <author>Author</author>
    <guid>http://example.org/sw_20.07.10/</guid>
    <description><![CDATA[​
D3_4676_늘어지는 소리 만들기 1 2 3 4 5 6 7 8 9 10 11 12  for T in range(int(input())): sent = list(input()) # wow H = int(input()) po = sorted(list(map(int, input().split()))) # 2 3 2 for i in range(H): a = po[i]+i sent.insert(a,&#39;-&#39;) print(&#39;#{} {}&#39;.format(T+1, &#39;&#39;.join(sent))) # 단순 산수로 해결   ​
D3_4615_재미있는 오셀로 게임 1    ​
D3_4579_세상의 모든 팰린드롬 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14  for T in range(int(input())): arr = input() result = &#39;Exist&#39; for i in range(len(arr) // 2): if arr[i] == &#39;*&#39; or arr[-1 - i] == &#39;*&#39;: result = &#39;Exist&#39; break if arr[i] !]]></description>
</item><item>
    <title>Django_02_CRUD(02)</title>
    <link>http://example.org/django_02_crud_c/</link>
    <pubDate>Fri, 10 Jul 2020 11:04:11 &#43;0900</pubDate>
    <author>Author</author>
    <guid>http://example.org/django_02_crud_c/</guid>
    <description><![CDATA[CRUD?  CRUD는 대부분의 컴퓨터 소프트웨어가 가지는 기본적인 데이터 처리 기능인 Create(생성), Read(읽기), Update(갱신), Delete(삭제)를 묶어서 일컫는 말이다. 사용자 인터페이스가 갖추어야 할 기능(정보의 참조/검색/갱신)을 구현해보자
 ]]></description>
</item><item>
    <title>SW Expert Academy_D3 5162, 4789, 4751, 4698</title>
    <link>http://example.org/sw_20.07.08/</link>
    <pubDate>Wed, 08 Jul 2020 15:07:10 &#43;0900</pubDate>
    <author>Author</author>
    <guid>http://example.org/sw_20.07.08/</guid>
    <description><![CDATA[​
D3_5162_두가지 빵의 딜레마 1 2 3 4 5 6 7  for T in range(int(input())): A, B, C = map(int, input().split()) N = min(A, B) print(&#34;#{} {}&#34;.format(T+1, int(C/N))) # 단순 산수로 해결   ​
D3_4789_성공적인 공연 기획 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  for T in range(int(input())): P = list(map(int, map(str, input())))	need = P[0] count = 0 for i in range(1, len(P)): if need &gt;= i: need += P[i] else: count += i - need need = i + P[i] print(f&#39;#{T+1} {count}&#39;) # 문제를 이해하는 것이 Point였다.]]></description>
</item><item>
    <title>SW Expert Academy_D3 5431, 5356, 5293, 5215</title>
    <link>http://example.org/sw_20.07.01/</link>
    <pubDate>Wed, 01 Jul 2020 21:09:36 &#43;0900</pubDate>
    <author>Author</author>
    <guid>http://example.org/sw_20.07.01/</guid>
    <description><![CDATA[​
D3_5431_민석이의 과제 체크하기 1 2 3 4 5 6 7 8 9 10 11 12  for T in range(int(input())): N, K = map(int, input().split()) P = list(map(int, input().split())) result = [] for i in range(1,N+1): if i not in P: result.append(str(i)) print(&#39;#{} {}&#39;.format(T+1, &#39; &#39;.join(result))) # 제출한 수강생 리스트를 만들고(P) 이를 for로 돌리며 검증   ​
D3_5356_의석이의 세로로 말해요 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  for T in range(int(input())): sent = [list(str(input())) for _ in range(5)] #입력받은 요소의 길이를 알아내야 한다.]]></description>
</item><item>
    <title>Hugo_setting stroy (feat.LoveTt 제작자)</title>
    <link>http://example.org/hugo_setting/</link>
    <pubDate>Mon, 29 Jun 2020 15:49:37 &#43;0900</pubDate>
    <author>Author</author>
    <guid>http://example.org/hugo_setting/</guid>
    <description><![CDATA[​
블로그를 만들면서&hellip; 최초 기술블로그를 제작하면서 바닥부터 모든 것을 스스로 만들어 보기로 결심하고 제작을 시작하지만, 결코 쉽지 않았다. 개인적으로 꼭 원했던 기능이었던 tag기능과 categories를 구현하지 못하면서&hellip; 결국 기존에 있는 라이브러리들을 활용하기로 한다.
​
**가장 많은 사용자가 존재하는 jekyll로 시작한다. **
​
jekyll 기초 설정  Jekyll : Jekyll은 Ruby Gem으로 제공되며 템플릿과 템플릿의 구성요소, 인라인 코드, 마크다운과 같은 동적인 구성요소를 정적인 웹페이지로 만들어주는 파싱 엔진
 ​
jekyll 서버 구동 방법 1 2 3 4 5  # 공식 홈페이지 설명 ~$ gem install bundler jekyll	# jekyll 구동을 위한 프로그램 설치 ~$ jekyll new MYBLOG	# MYBLOG 라는 이름의 블로그 폴더 &amp; 기초틀 생성  ~$ cd MYBLOG	# MYBLOG 폴더로 이동 ~/MYBLOG $ bundle exec jekyll serve	# MYBLOG 서버 구동   1 2 3  # 이후 명령창에 Servuer address : http://127.]]></description>
</item></channel>
</rss>

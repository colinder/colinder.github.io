<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title></title>
        <link>https://colinder.github.io/</link>
        <description>Hello New World</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 03 Jan 2024 13:36:17 &#43;0900</lastBuildDate>
            <atom:link href="https://colinder.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Nest Official_01_(Introduction, First steps, Controllers, Providers)</title>
    <link>https://colinder.github.io/nest-official_01_introduction-first-steps-controllers-providers/</link>
    <pubDate>Wed, 03 Jan 2024 13:36:17 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/nest-official_01_introduction-first-steps-controllers-providers/</guid>
    <description><![CDATA[​
Introduction Nest.js 는 효율적이고 확장가능한 node.js SSR을 구축하기 위한 프레임워크.
Nest.js는 progressive(점진적인) JavaScript를 사용하며.(progressive JavaScript; 웹과 네이티브 엡을 모두 대응하는 등 점진적인 방법론을 javascript를 통해 개발하는 개념.) TypeScript를 지원(javascript로 개발도 가능) 그리고 OOP(객체 지향 프로그래밍), FP(기능적 프로그래밍), FRP(기능적 반응 프로그래밍)의 요소들을 결합합니다.
후드 아래에서 Nest는 Express(기본값)와 같은 강력한 HTTP 서버 프레임워크를 사용하며 Fastify를 사용하도록 구성할 수도 있습니다!
Nest는 이러한 일반적인 Node.js 프레임워크(Express/Fastify) 이상의 추상화 수준을 제공하지만 개발자에게 API를 직접 노출시킵니다.]]></description>
</item><item>
    <title>What is Abstraction(추상화)?</title>
    <link>https://colinder.github.io/abstraction/</link>
    <pubDate>Wed, 03 Jan 2024 13:32:55 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/abstraction/</guid>
    <description><![CDATA[​
추상화 &amp; 구체화  개발 미팅을 하다보면 자주 듣게 되었는데, 정확한 정의와 의미를 알기 위해 정리합니다.
 ​
​
추상화 추상화는 복잡한 시스템, 객체 또는 개념을 단순화하여 핵심 기능에 집중하고 불필요한 세부 사항을 숨기는 프로세스입니다. 이는 문제를 이해하기 쉽게 만들고, 핵심 개념에 집중하여 설계를 간소화하며, 재사용성을 높이는 데 도움이 됩니다.
프로그래밍에서 추상화는 여러 수준에서 발생할 수 있습니다:
 데이터 추상화: 데이터를 간소화하거나 숨기는 것으로, 특정 데이터 유형의 세부 정보를 숨기고 핵심 데이터만 표시하는 것을 의미합니다.]]></description>
</item><item>
    <title>What is static &amp; dynamic type?</title>
    <link>https://colinder.github.io/staticdynamictype/</link>
    <pubDate>Wed, 03 Jan 2024 13:29:10 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/staticdynamictype/</guid>
    <description><![CDATA[정적(Static) &amp; 동적(Dynamic) Type  정적 타입과 동적 타입은 프로그래밍 언어에서 변수나 값의 타입에 대한 접근 방식을 나타내는 두 가지 주요 패러다임.
 ​
정적 타입 (Static Typing):  타입 선언: 정적 타입 언어에서는 변수의 타입을 컴파일 시점에 명시적으로 선언합니다. 변수가 어떤 타입을 가질지 사전에 정의해야 합니다. 컴파일 시 타입 체크: 코드를 실행하기 전에 컴파일러가 변수의 타입을 검사합니다. 이로 인해 컴파일러는 타입과 일치하지 않는 연산이나 잘못된 타입의 변수 사용을 사전에 감지할 수 있습니다.]]></description>
</item><item>
    <title>JS(TS) 함수선언방식과 차이</title>
    <link>https://colinder.github.io/js_method/</link>
    <pubDate>Wed, 03 Jan 2024 13:23:57 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/js_method/</guid>
    <description><![CDATA[​
Javascript(TS) 함수 선언 방식과 차이 TypeScript는 JavaScript를 기반으로 하는 언어이기 때문에 JavaScript의 함수 선언 방식을 따르면서 몇 가지 추가적인 기능을 제공합니다. 주요 함수 선언 방식은 다음과 같습니다.
​
  함수 선언문 (Function Declaration):
1 2 3  function add(a: number, b: number): number { return a + b; }     TypeScript에서도 JavaScript와 마찬가지로 함수 선언문을 사용할 수 있습니다.
  함수 선언문은 function 키워드로 시작하며, 함수 이름이 바로 뒤에 나옵니다.]]></description>
</item><item>
    <title>What is webpack?</title>
    <link>https://colinder.github.io/what_is_webpack/</link>
    <pubDate>Tue, 01 Mar 2022 09:17:44 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/what_is_webpack/</guid>
    <description><![CDATA[​
What is webpack?  오늘나 자바스크립트 개발에서 모듈을 사용하여 개발하는 것은 선택이 아닌 필수입니다. 하지만 아직 모든 브라우저(마이크로소프트 - 앳지, 네이버 - 웨일, 구글 - 크롬 등등)가 *ES2015 모듈을 지원하지 않기 때문에 모듈 단위로 패키지를 관리할 수 없습니다. 이런 경우 전역 스코프를 공유하기 때문에 변수명이 충돌하거나 값이 덮어씌워지는 등 문제가 발생할 수 있습니다.
이런 문제를 해결하기 위해 *번들러를 사용하는데 wabpack은 가장 많이 사용되는 번들러 중 하나입니다.
 *번들러
애플리케이션에 필요한 모든 종류의 파일들을 모듈 단위로 나누어 최소한의 파일 묶음(번들)으로 만들어 낸다.]]></description>
</item><item>
    <title>What is ES2015?</title>
    <link>https://colinder.github.io/what_is_es2015/</link>
    <pubDate>Mon, 28 Feb 2022 09:23:51 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/what_is_es2015/</guid>
    <description><![CDATA[​
What is ES2015?  웹 개발 도구와 내용을 정리하다보면 등장하던 ES2015. 그냥 어떤 느낌의 단어인지 어렴풋이 알고만 있다가 확실하게 정리해 알아두고 싶어 내용을 정리합니다.
 ​
​
​
우선 javaScript에 대하여 조금 알아봅시다.  javaScript는 프로그래밍 언어입니다. 프로그래밍 언어는 지금도 꾸준히 개선되고 발전됩니다. 계속 변화하고 있기에 특정 시기에 개발된 상태를 1.2.1과 같이 버전으로 등록해 배포합니다. 자바스크립트는 결점이 상당히 많은 언어였고, 사용자들이 직접 결점을 보완하는 방법으로 발전되어 왔는데, **ECMA(European Computer Manufacturer&rsquo;s Association)**라는 단체에서 기존의 결점을 보완한 표준 자바스크립트 버전을 매년 발표하게 됩니다.]]></description>
</item><item>
    <title>What is Web Socket?</title>
    <link>https://colinder.github.io/what_is_web_socket/</link>
    <pubDate>Fri, 25 Feb 2022 12:20:35 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/what_is_web_socket/</guid>
    <description><![CDATA[​
What is Web Socket?  Web 통신은 무조건 두 단계를 걸쳐 동작합니다. 요청과 응답. 간단히 어떤 요청이 있을 때만 서버와 연결되어 어떤 응답을 하게 됩니다. 이러한 방식을 HTTP라고 합니다. 예를 들어, Naver.com에 접속하는 것은 &lsquo;Naver.com&rsquo;이라는 요청을 보낸 것이고 그에 대한 응답으로 naver의 메인 화면을 보여주는 것이죠. 그런데 만약 실시간 채팅 서비스나 푸시 알람을 구현해야 한다면, 매우 잦은 요청을 보내야 하고 네트워크 상 많은 부하를 발생시킬 수 있습니다.
 HTML5이라는 웹 표준이 생긴이래로 이러한 HTTP의 단점을 보완하기 위해 웹 소켓(Web Socket)이 등장했습니다.]]></description>
</item><item>
    <title>localStorage vs sessionStorage</title>
    <link>https://colinder.github.io/localvssession_storage/</link>
    <pubDate>Wed, 23 Feb 2022 14:32:36 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/localvssession_storage/</guid>
    <description><![CDATA[​
Local Storage와 Session Storage의 차이 를 알아보기 전에
​
​
 &lsquo;Storage(web storage)&lsquo;란 무엇인지 우선 알아봅시다.  HTML5에서 등장한 웹의 데이터를 클라이언트에 저장할 수 있는 기능
 인터넷상의 통신을 하는데 어떤 자료를 가지고 있어야 한다거나, 나의 정보(유저정보)를 관리하는 등의 데이터 관리를 위한 저장소 기능. 그리고 storage는 두 가지 종류가 존재
​
​
 Local Storage와 Session Storage   Local storage
origin(요청이 시작된 서버를 나타내는 URL)이 같을 경우, 여러 탭과 브라우저 창에서 공유되는 저장소.]]></description>
</item><item>
    <title>폴더안에 있는 특정 파일 리스트 가져오기</title>
    <link>https://colinder.github.io/filelistimport/</link>
    <pubDate>Tue, 22 Feb 2022 10:37:15 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/filelistimport/</guid>
    <description><![CDATA[​
폴더 안에 있는 특정 파일 리스트 정리  어떤 폴더 안에 있는 특정 확장자명의 파일들의 리스트를 정리하고 싶을 때 사용합니다.
 ​
1 2 3 4 5 6 7  ## 폴더안에 있는 .csv파일 리스트 가져오기 import os path = &#39;/경로/&#39; file_lists = os.listdir(path) file_list_result = [file for file in file_lists if file.endswith(&#39;.csv&#39;)] ## 파일명 끝이 .csv인 경우   ​
이후 pandas DataFrame에 넣을 때
1 2 3 4 5 6  import pandas as pd df = pd.]]></description>
</item><item>
    <title>Machine VS Deep Learning</title>
    <link>https://colinder.github.io/machine-deep/</link>
    <pubDate>Tue, 22 Feb 2022 09:43:00 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/machine-deep/</guid>
    <description><![CDATA[​
&lsquo;머신러닝&rsquo;이란 무엇인지 우선 알아봅시다.  머신 러닝(machine learning) 또는 기계 학습(機械學習)은 경험을 통해 자동으로 개선하는 컴퓨터 알고리즘 연구 분야입니다. 이는 인공지능의 한 분야로 간주되며, 컴퓨터가 학습할 수 있도록 하는 알고리즘과 기술을 개발합니다. 예를 들어 &lsquo;이 운동화가 진품이 맞는지?&rsquo;, &lsquo;특정 시간대에 A에서 B까지 가는데 얼마나 시간이 걸리는지?&rsquo;, &lsquo;수신한 메일이 스팸메일인지?&rsquo; 등 표현(representation)과 일반화(generalization)가 핵심인 기술입니다. 표현이란 데이터의 평가이며, 일반화란 아직 알 수 없는 데이터의 처리를 의미합니다.
 인공지능 ⊃ 머신러닝 ⊃ 딥러닝]]></description>
</item></channel>
</rss>

<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title></title>
        <link>https://colinder.github.io/</link>
        <description>Hello New World</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 19 Apr 2021 09:29:11 &#43;0900</lastBuildDate>
            <atom:link href="https://colinder.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Django_03_templates overriding</title>
    <link>https://colinder.github.io/django_03_overriding/</link>
    <pubDate>Mon, 19 Apr 2021 09:29:11 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_03_overriding/</guid>
    <description><![CDATA[​
Django Overriding Templates  웹개발을 하다보면 재활용되어야 하는 부분. 즉, 변경되지 않아야 하는 부분과, 변해야 하는 부분이 있습니다. (대표적으로 navbar) 그리고 이런 개발의 편의성을 위해 Django는 Overriding 이라는 기술을 제공합니다.
 ​
지난 &ldquo;app&quot;에 이어 진행
변경되지 않아야 하는 부분은 **그림의 &lsquo;배경&rsquo;**이고, 변해야 하는 부분은 **그림의 &lsquo;디테일 요소&rsquo;**라고 생각하면 이해가 쉽습니다. / 그럼 변경되지 않아야 하는 부분을 먼저 제작해봅시다.
1. 변경 하지 않을 부분 == 배경 제작 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  &lt;!]]></description>
</item><item>
    <title>Django_02_app</title>
    <link>https://colinder.github.io/django_02_addapp/</link>
    <pubDate>Sun, 18 Apr 2021 22:04:11 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_02_addapp/</guid>
    <description><![CDATA[​
Django  이번에는 생성된 프로젝트에서 1. app을 추가해 등록해보고 2. 서버 접속시 첫 메인 페이지를 등록해봅시다.
 ​
뜬금없이 CRUD를 알아보고 갑시다.  CRUD는 대부분의 컴퓨터 소프트웨어가 가지는 기본적인 데이터 처리 기능인 Create(생성), Read(읽기), Update(갱신), Delete(삭제)를 묶어서 일컫는 말입니다. 사용자 인터페이스가 갖추어야 할 기능(정보의 참조/검색/갱신 등) 중 가장 기본이라고 생각되는 기술들입니다.
 ​
이제 이어서 개발해봅시다. ​
1. App 생성 지난번에는 프로젝트를 생성하고 setting.py에서 기본 설정만 변경해주었습니다. 이제 app을 생성해봅시다.]]></description>
</item><item>
    <title>Django_01_start</title>
    <link>https://colinder.github.io/django_01_startproject/</link>
    <pubDate>Sun, 18 Apr 2021 19:52:40 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_01_startproject/</guid>
    <description><![CDATA[​
Django 개발환경준비   편리함을 추구하기 위해 AWS Cloud9을 사용하여 진행
  https://ide.cs50.io/ 주소로 접속하면 진행이 가능하며, 진행을 위해선 Git 아이디가 있어야 한다.
Git? : 버전 관리 시스템이며 Git은 소프트웨어를 개발하는 기업의 핵심 자산인 소스코드를 효과적으로 관리할 수 있게 해주는 무료, 공개소프트웨어. git에 대한 내용은 따로 정리해보도록 한다.
  로그인까지 마치면 이제 Django 개발 준비 끝.
C9 접속 화면(블랙테마 적용되어 있음)"C9 접속 화면(블랙테마 적용되어 있음) ​]]></description>
</item><item>
    <title>SW Expert Academy_D4 11316</title>
    <link>https://colinder.github.io/sw_21.04.04/</link>
    <pubDate>Sun, 04 Apr 2021 14:56:09 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sw_21.04.04/</guid>
    <description><![CDATA[​
D4_11316_주기 찾기 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  for T in range(int(input())): s, p, q, m = map(int, input().split()) V = s visited = [0]*m i = 1 while True: V = (p*V + q) % m i += 1 if visited[V] != 0: result = i - visited[V] break visited[V] = i print(f&#39;#{T+1} {result}&#39;) # 한 번 나왔던 숫자의 &#39;위치 정보(i)&#39;를  # visited에 저장해 두었다가 # 한 번이라도 방문했던 숫자가 나왔을 때 # 저장해주었던 &#39;위치 정보&#39;의 차리를 계산해 준다.]]></description>
</item><item>
    <title>04_SQLD_제1 절 성능데이터모델링의 개요 &amp; 제2 절 정규화와 성능</title>
    <link>https://colinder.github.io/04_sqld_%EC%A0%9C2-%EC%9E%A5-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%AA%A8%EB%8D%B8%EA%B3%BC-%EC%84%B1%EB%8A%A5/</link>
    <pubDate>Fri, 02 Apr 2021 21:30:34 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/04_sqld_%EC%A0%9C2-%EC%9E%A5-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%AA%A8%EB%8D%B8%EA%B3%BC-%EC%84%B1%EB%8A%A5/</guid>
    <description><![CDATA[​
# SQLD  제2 장 데이터 모델과 성능  제1 절 성능데이터모델링의 개요   성능데이터모델링의 정의
  데이터 용량이 커질수록 처리 속도 증가가 필요해진다.
  성능 저하의 대표적인 원인 3가지
 데이터 모델 구조에 의해 성능 저하 데이터가 대용량이 됨으로 인해 성능 저하 인덱스 특성을 고려하지 않고 생성해 성능 저하    즉, 어떤 작업 유형에 따라 성능향상을 도모해야 하는지 목표를 분명하게 해야 정확한 성능향상 모델링을 할 수 있다.]]></description>
</item><item>
    <title>03_SQLD_제4 절 관계 &amp; 제5 절 식별자</title>
    <link>https://colinder.github.io/03_sqld_%EC%A0%9C4-%EC%A0%88-%EA%B4%80%EA%B3%84-%EC%A0%9C5-%EC%A0%88-%EC%8B%9D%EB%B3%84%EC%9E%90/</link>
    <pubDate>Sun, 28 Mar 2021 20:42:45 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/03_sqld_%EC%A0%9C4-%EC%A0%88-%EA%B4%80%EA%B3%84-%EC%A0%9C5-%EC%A0%88-%EC%8B%9D%EB%B3%84%EC%9E%90/</guid>
    <description><![CDATA[​
# SQL  제1 장 데이터 모델링의 이해  제4 절 관계(Relationship)   관계의 개념
  관계의 정의
&ldquo;인스턴스 사이의 논리적인 연관성으로서 존재의 형태 or 행위로서 서로에게 연관성이 부여된 상태&rdquo;
  관계의 페어링
&ldquo;관계는 인스턴스가 개별적으로 관계를 가지는 것(페어링)이고, 이것의 집합을 관계로 표현하는 것&rdquo;
&ldquo;따라서 개별 인스턴스가 각각 다른 종류의 관계를 가지고 있다면, 두 엔터티 사이에 두 개 이상의 관계가 형성될 수 도 있다.&rdquo;
​
    관계의 분류]]></description>
</item><item>
    <title>Git_LFS</title>
    <link>https://colinder.github.io/git_lfslarge-file-storage/</link>
    <pubDate>Thu, 25 Mar 2021 22:28:20 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/git_lfslarge-file-storage/</guid>
    <description><![CDATA[​
Git LFS(Large File Storage) 사용법  Git은 개당 파일에 100MB의 용량 제한이 걸려 있다. (전체 용량 제한은 없다.) 다만, 프로젝트를 하다보면 대용량의 자료나 파일이 생기는 경우가 있다. 이때 용량 제한의 문제를 해소할 수 있는 방법이 LFS이다.
LFS는 별도로 설치하여 사용하면 되며, 방법을 정리한다.
  *주소: https://git-lfs.github.com
​
  git LFS을 다운을 받고 설치 합니다.
​
  git LFS를 적용할 폴더로 이동해 다음 명령어를 입력합니다.
1  $ git lfs install    ​]]></description>
</item><item>
    <title>02_SQLD_제2 절 엔터티 &amp; 제3 절 속성</title>
    <link>https://colinder.github.io/02_sqld_%EC%A0%9C2-%EC%A0%88-%EC%97%94%ED%84%B0%ED%8B%B0-%EC%A0%9C3-%EC%A0%88-%EC%86%8D%EC%84%B1/</link>
    <pubDate>Thu, 25 Mar 2021 19:25:43 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/02_sqld_%EC%A0%9C2-%EC%A0%88-%EC%97%94%ED%84%B0%ED%8B%B0-%EC%A0%9C3-%EC%A0%88-%EC%86%8D%EC%84%B1/</guid>
    <description><![CDATA[​
# SQL  제1 장 데이터 모델링의 이해  제2 절 엔터티(Entity)   엔터티의 개념
  실체, 객체 / 실무적으론는 앤터티라고 부른다. 즉 업무에 필요하고 유용한 정보를 저장하고 관리하기 위한 집합적인 것
​
    엔터티와 인스턴스에 대한 내용과 표기법
​	
  엔터티의 특징
  반드시 해당 업무에서 필요하고 관리하고자 하는 정보여야 한다.
  유일한 식별자에 의해 식별이 가능해야 한다.
  영속적으로 존재하는 인스턴스의 집합이어야 한다.]]></description>
</item><item>
    <title>SW Expert Academy_D3 11445, 11387, 11285, 11315</title>
    <link>https://colinder.github.io/sw_21.03.24/</link>
    <pubDate>Wed, 24 Mar 2021 18:34:58 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sw_21.03.24/</guid>
    <description><![CDATA[​
D3_11445_무한 사전 1 2 3 4 5 6 7 8 9 10 11 12  for T in range(int(input())): P = input().rstrip() Q = input().rstrip() if P + &#34;a&#34; != Q: result = &#34;Y&#34; else: result = &#34;N&#34; print(f&#39;#{T+1} {result}&#39;) # 왜 D3 인가.   ​
D3_11387_몬스터 사냥 1 2 3 4 5 6 7 8  for T in range(int(input())): D, L, N = map(int, input().split()) result = 0 for i in range(N): result += D * (1 + L*i/100) print(f&#39;#{T+1} {int(result)}&#39;)   ​]]></description>
</item><item>
    <title>01_SQLD_제1 절 데이터 모델링의 이해</title>
    <link>https://colinder.github.io/01_sqld_%EC%A0%9C1-%EC%9E%A5-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%AA%A8%EB%8D%B8%EB%A7%81%EC%9D%98-%EC%9D%B4%ED%95%B4/</link>
    <pubDate>Sun, 21 Mar 2021 23:06:59 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/01_sqld_%EC%A0%9C1-%EC%9E%A5-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%AA%A8%EB%8D%B8%EB%A7%81%EC%9D%98-%EC%9D%B4%ED%95%B4/</guid>
    <description><![CDATA[​
SQLD를 준비하면서 공부한 내용을 정리.
​
# SQL  제1 장 데이터 모델링의 이해  제1 절 데이터 모델링의 이해   모델링의 이해
  모델링의 정의
 복잡한 &ldquo;현실세계&quot;를 단순화(추상화)시켜 표현 사물 또는 사건에 관한 양상(Aspect)이나 관점(Perspective)을 명확하게 하는 것    특징 3가지
 추상화 - 현실세계를 일정한 형식에 맞추어 표현하는 것 단순화 - 복잡한 현실세계를 약속된 규약에 의해 쉽게 이해할 수 있게 표현하는 것 명확화 - 누구나 이해할 수 있도록 명확하게 표기하는 것    모델링의 3가지 관점]]></description>
</item></channel>
</rss>

<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title></title>
        <link>https://colinder.github.io/</link>
        <description>Hello New World</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 31 Jan 2024 09:48:40 &#43;0900</lastBuildDate>
            <atom:link href="https://colinder.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>what is REST api?</title>
    <link>https://colinder.github.io/restapi/</link>
    <pubDate>Wed, 31 Jan 2024 09:48:40 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/restapi/</guid>
    <description><![CDATA[​
REST ful API RESTful API는 Representational State Transfer(표현 상태 전이)를 기반으로 하는 웹 서비스의 설계 원칙을 따르는 API입니다. REST는 분산 시스템에서 리소스 간 상태 전이를 위한 아키텍처 스타일로, 간결하고 확장 가능한 디자인을 제공합니다. RESTful API는 HTTP를 통해 자원을 나타내고 상호 작용하는 방식을 규정하며, REST의 기본 원칙을 따라야 합니다.
​
RESTful API의 주요 특징과 원칙은 다음과 같습니다:
  자원 (Resource): 모든 것을 리소스로 표현합니다. 각 리소스는 고유한 식별자(URI)를 가지며, 이를 통해 리소스에 접근합니다.]]></description>
</item><item>
    <title>why use a decorator? And what&#39;s the benefit?</title>
    <link>https://colinder.github.io/decorator/</link>
    <pubDate>Wed, 31 Jan 2024 09:48:31 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/decorator/</guid>
    <description><![CDATA[​
데코레이터를 사용하는 이유와 장점 데코레이터는 코드에 메타데이터를 첨부하고, 이를 기반으로 코드를 변형하거나 행동을 추가하는 강력한 도구입니다.
​
여러 이유로 데코레이터를 사용할 수 있지만 주된 이점은 다음과 같습니다:
  메타프로그래밍(Metaprogramming): 데코레이터를 사용하면 코드에 대한 정보를 주석(annotation)으로 첨부할 수 있습니다. 이 메타데이터를 기반으로 코드를 동적으로 변형하거나 특정 동작을 추가할 수 있습니다.
  가독성과 모듈성 향상: 데코레이터를 사용하면 코드를 더 읽기 쉽게 만들 수 있습니다. 특히 프레임워크나 라이브러리에서 자주 사용되는 패턴이나 행동을 명시적으로 표현할 수 있습니다.]]></description>
</item><item>
    <title>Nest Official_03_(Guards, Interceptors, Custom_decorators)</title>
    <link>https://colinder.github.io/nest-official_03_guards-interceptors-custom_decorators/</link>
    <pubDate>Sun, 14 Jan 2024 09:14:13 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/nest-official_03_guards-interceptors-custom_decorators/</guid>
    <description><![CDATA[​
Guards  가드(Guard)는 라우트 핸들러 메서드의 실행 여부를 결정하는 역할을 합니다. 특히, 가드는 특정 조건이 충족되지 않으면 요청을 처리하기 전에 실행을 막습니다. 이는 권한 검사, 인증, 혹은 다양한 비즈니스 규칙을 적용할 때 유용합니다.
간단한 예로, 사용자의 권한을 확인하는 가드를 상상해볼 수 있습니다. 특정 엔드포인트에 접근하려는 사용자의 역할이나 권한이 충족되지 않으면 가드가 요청을 차단할 수 있습니다. 이를 통해 요청이 핸들러 메서드에 도달하기 전에 필요한 조건을 검사하고 처리할 수 있습니다.
 가드는 @Injectable() 데코레이터로 주석이 달린 클래스로, CanActivate 인터페이스를 구현합니다.]]></description>
</item><item>
    <title>Nest Official_02_(Modules, Middleware, Exception_filters, Pipes)</title>
    <link>https://colinder.github.io/nest-official_02_modules-middleware-exception_filters-pipes/</link>
    <pubDate>Sun, 14 Jan 2024 09:14:10 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/nest-official_02_modules-middleware-exception_filters-pipes/</guid>
    <description><![CDATA[​
Modules 모듈은 @Module() 데코레이터로 주석이 달린 클래스입니다. @Module() 데코레이터는 Nest가 애플리케이션 구조를 구성하는 데 사용하는 메타데이터를 제공합니다.
각 어플리케이션은 최소한 하나의 모듈, 루트 모듈을 가지고 있습니다. 루트 모듈은 Nest가 어플리케이션 그래프를 구축하는데 사용하는 시작점입니다. 어플리케이션 그래프는 Nest가 Modules 및 Providers 간의 관계와 의존성을 해결하는 데 사용하는 내부 데이터 구조입니다. 매우 작은 애플리케이션의 경우 이론적으로 루트 모듈만을 가질 수 있지만, 이는 일반적인 경우가 아닙니다. 모듈은 구성 요소를 효과적으로 구성하는 데 강력하게 권장되는 방법이며, 대부분의 애플리케이션에서는 각각이 밀접한 관련성을 가진 일련의 기능을 캡슐화하는 여러 모듈을 사용하는 결과로서의 아키텍처가 형성됩니다.]]></description>
</item><item>
    <title>what is 정적(static) &amp; 동적(dynamic) Type</title>
    <link>https://colinder.github.io/staticdynamictype/</link>
    <pubDate>Wed, 03 Jan 2024 14:26:13 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/staticdynamictype/</guid>
    <description><![CDATA[​
정의  정적 타입과 동적 타입은 프로그래밍 언어에서 변수나 값의 타입에 대한 접근 방식을 나타내는 두 가지 주요 패러다임.
 ​
​
정적 타입 (Static Typing):  타입 선언: 정적 타입 언어에서는 변수의 타입을 컴파일 시점에 명시적으로 선언합니다. 변수가 어떤 타입을 가질지 사전에 정의해야 합니다. 컴파일 시 타입 체크: 코드를 실행하기 전에 컴파일러가 변수의 타입을 검사합니다. 이로 인해 컴파일러는 타입과 일치하지 않는 연산이나 잘못된 타입의 변수 사용을 사전에 감지할 수 있습니다.]]></description>
</item><item>
    <title>Typesciprt(JS)_함수선언방법과 차이</title>
    <link>https://colinder.github.io/js_method/</link>
    <pubDate>Wed, 03 Jan 2024 14:23:13 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/js_method/</guid>
    <description><![CDATA[​
Typescript(JS) 함수 선언 방식과 차이 TypeScript는 JavaScript를 기반으로 하는 언어이기 때문에 JavaScript의 함수 선언 방식을 따르면서 몇 가지 추가적인 기능을 제공합니다. 주요 함수 선언 방식은 다음과 같습니다.
​
  함수 선언문 (Function Declaration):
1 2 3  function add(a: number, b: number): number { return a + b; }     TypeScript에서도 JavaScript와 마찬가지로 함수 선언문을 사용할 수 있습니다.
  함수 선언문은 function 키워드로 시작하며, 함수 이름이 바로 뒤에 나옵니다.]]></description>
</item><item>
    <title>Nest Official_01_(Introduction, First steps, Controllers, Providers)</title>
    <link>https://colinder.github.io/nest-official_01_introduction-first-steps-controllers-providers/</link>
    <pubDate>Wed, 03 Jan 2024 13:36:17 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/nest-official_01_introduction-first-steps-controllers-providers/</guid>
    <description><![CDATA[​
Introduction  Nest.js 는 효율적이고 확장가능한 node.js SSR을 구축하기 위한 프레임워크.
 Nest.js는 *progressive(점진적인) JavaScript를 사용하며. TypeScript를 지원(javascript로 개발도 가능) 그리고 OOP(객체 지향 프로그래밍), FP(기능적 프로그래밍), FRP(기능적 반응 프로그래밍)의 요소들을 결합합니다.
후드 아래에서 Nest는 Express(기본값)와 같은 강력한 HTTP 서버 프레임워크를 사용하며 Fastify를 사용하도록 구성할 수도 있습니다!
Nest는 이러한 일반적인 Node.js 프레임워크(Express/Fastify) 이상의 추상화 수준을 제공하지만 개발자에게 API를 직접 노출시킵니다. 이를 통해 개발자는 기본 플랫폼에 수많은 타사 모듈을 사용할 수 있습니다.]]></description>
</item><item>
    <title>what is Abstraction(추상화)?</title>
    <link>https://colinder.github.io/abstraction/</link>
    <pubDate>Wed, 03 Jan 2024 13:32:55 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/abstraction/</guid>
    <description><![CDATA[​
추상화 &amp; 구체화  개발 미팅을 하다보면 자주 듣게 되었는데, 정확한 정의와 의미를 알기 위해 정리합니다.
 ​
​
추상화 추상화는 복잡한 시스템, 객체 또는 개념을 단순화하여 핵심 기능에 집중하고 불필요한 세부 사항을 숨기는 프로세스입니다. 이는 문제를 이해하기 쉽게 만들고, 핵심 개념에 집중하여 설계를 간소화하며, 재사용성을 높이는 데 도움이 됩니다.
프로그래밍에서 추상화는 여러 수준에서 발생할 수 있습니다:
 데이터 추상화: 데이터를 간소화하거나 숨기는 것으로, 특정 데이터 유형의 세부 정보를 숨기고 핵심 데이터만 표시하는 것을 의미합니다.]]></description>
</item><item>
    <title>Time Complexity 시간복잡도</title>
    <link>https://colinder.github.io/time_complexity/</link>
    <pubDate>Tue, 17 Oct 2023 12:24:58 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/time_complexity/</guid>
    <description><![CDATA[​
Time Complexity (시간 복잡도)  효율적인 알고리즘 구성을 위해 항상 신경써야하는 시간 복잡도.
그리고 시간 복잡도를 표기하는 방법인 Big-O(빅-오) 표기법에 대해 정리합니다.
 ​
​
시간 복잡도  위키백과에 따르면 시간복잡도는 계산복잡도 이론에서 문제를 해결하는데 걸리는 시간과 입력의 함수 관계를 가리킨다. 또 컴퓨터과학에서 알고리즘의 시간복잡도는 입력을 나타내는 문자열 길이의 함수로서 작동하는 알고리즘을 취해 시간을 정량화하는 것인데, 간단히 input 후 연산이 진행되고 output을 반환하는데 시간이 얼마나 걸리는가?를 계산한 값입니다. 조금 더 간단하게는 알고리즘의 수행시간입니다.]]></description>
</item><item>
    <title>react-native Things</title>
    <link>https://colinder.github.io/things/</link>
    <pubDate>Thu, 20 Jul 2023 21:24:52 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/things/</guid>
    <description><![CDATA[​
React Native 시작하기 (with Typescript)  myApp은 본인이 원하는 프로젝트 이름으로 바꾸면 됩니다. 가장 최근 버전으로 프로젝트 세팅  1  npx react-native@latest init myApp --template react-native-template-typescript   ​
​
​
실행명령어 Metro 실행 명령어
1  npx react-native start   ​
​
​
절대 경로 세팅   공식문서 여기 참고하시면 좋습니다. v0.72 기준
  저는 아래와 같은 폴더 구조로 세팅했고 이 중 src를 root로 설정하고 싶었습니다.]]></description>
</item></channel>
</rss>

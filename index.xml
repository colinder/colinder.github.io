<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title></title>
        <link>https://colinder.github.io/</link>
        <description>Hello New World</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 26 Sep 2020 00:07:40 &#43;0900</lastBuildDate>
            <atom:link href="https://colinder.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>SW Expert Academy_D3 3975, 5176, , </title>
    <link>https://colinder.github.io/sw_20.09.26/</link>
    <pubDate>Sat, 26 Sep 2020 00:07:40 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sw_20.09.26/</guid>
    <description><![CDATA[​
D3_3975_승률 비교하기 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  result = [] for T in range(int(input())): A, B, C, D = map(int, input().split()) if B/A &gt; D/C: result.append(&#34;BOB&#34;) elif B/A &lt; D/C: result.append(&#34;ALICE&#34;) else: result.append(&#34;DRAW&#34;) for t in range(T+1): print(f&#34;#{t+1} {result[t]}&#34;) # 아니 이게 D3라고? 완전 난이도 설정 실수네. 했다가 런타임 오류 보고 # 왜 그런건지 알았다. # python은 결과를 모았다가 출력하는 게 더 빠르다.]]></description>
</item><item>
    <title>REST</title>
    <link>https://colinder.github.io/rest-api-reference/</link>
    <pubDate>Thu, 24 Sep 2020 09:54:40 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/rest-api-reference/</guid>
    <description><![CDATA[​
REST API Reference [TOC]
1.사용자 API    Members Descriptions     POST /accounts/signup 회원가입   POST /accounts/login 회원 로그인   POST /accounts/userDetail 회원정보   PUT /accounts/update 회원정보 수정   DELETE /accounts/dropUser 회원탈퇴   GET /accounts/emailAuth 이메일 인증   GET /accounts/emailCheck 이메일 중복 확인   GET /accounts/nicknameCheck 닉네임 중복 확인    1.1 회원 로그인 POST /accounts/login ​	회원 로그인 API 입니다.]]></description>
</item><item>
    <title>SW Expert Academy_D3 3307, 3304, 4371, 10726</title>
    <link>https://colinder.github.io/sw_20.09.21/</link>
    <pubDate>Mon, 21 Sep 2020 22:43:28 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sw_20.09.21/</guid>
    <description><![CDATA[​
D3_3307_최장 증가 부분 수열(LIS) 1 2 3 4 5 6 7 8 9 10 11 12 13 14  for T in range(int(input())): N = int(input()) arr = list(map(int, input().split())) dp= [1] * N for i in range(1, N): for j in range(i): if arr[j] &lt; arr[i]: dp[i]= max(dp[i], dp[j] + 1) print(f&#39;#{T+1} {max(dp)}&#39;) # dp는 쉬운듯 어렵고 어려운듯 쉽다... # LIS로 검색하면 도움이 되는 글이 많다.    ​]]></description>
</item><item>
    <title>SW Expert Academy_D3 3131, 3233, 1860, 4047</title>
    <link>https://colinder.github.io/sw_20.09.15/</link>
    <pubDate>Sat, 19 Sep 2020 22:52:51 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sw_20.09.15/</guid>
    <description><![CDATA[​
D3_3131_100만 이하의 모든 소수 1 2 3 4 5 6 7 8 9 10 11 12  a = [0, 0] + [1] * 1000000 for i in range(2, 1000000): if a[i] == 1: for j in range(2*i, 1000001, i): a[j] = 0 for i in range(2, 1000000): if a[i] == 1: print(i, end=&#34; &#34;) # 에라토스테네스의 체   ​
D3_3233_정삼각형 분할 놀이 1 2 3 4 5 6 7 8 9 10  for T in range(int(input())): A, B = map(int, input().]]></description>
</item><item>
    <title>block_chain private Vs public / blockchain Vs network</title>
    <link>https://colinder.github.io/private-vs-public-blockchain-vs-network/</link>
    <pubDate>Thu, 17 Sep 2020 15:04:00 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/private-vs-public-blockchain-vs-network/</guid>
    <description><![CDATA[​
🧔프라이빗 블록체인 VS 👨🏻‍🤝‍👨🏻퍼블릭 블록체인 VS 🔒프라이빗 네트워크 VS 🔐퍼블릭 네트워크   Why 이런 질문을?
 블록체인 관련 정보를 구글링하다보면, 프라이빗 네트워크, 퍼블릭 네트워크, 프라이빗 블록체인, 퍼블릭 블록체인. 이 4가지의 말을 혼용해서 사용하고 있는 것을 쉽게 볼 수 있다. 여기서
프라이빗 네트워크와 프라이빗 블록체인과 같이 네트워크와 블록체인을 같은 의미로 많이 사용하는데. 과연 이 둘이 같은 것을 의미하는지 알아보았다.
 ​
결론 - 블록체인=&gt; 사용자의 접근조건을 기준으로 프라이빗과 퍼블릭을 나눔 - 네트워크=&gt; 서비스 운용형태를 기준으로 프라이빗과 퍼블릭을 나눔 ​]]></description>
</item><item>
    <title>Python_Library</title>
    <link>https://colinder.github.io/python_library/</link>
    <pubDate>Fri, 11 Sep 2020 22:39:31 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/python_library/</guid>
    <description><![CDATA[​
자주 쓰는 Python Library  자주 사용하게되는 파이썬 라이브러리를 정리한다.
 ​
  정규표현식  일대일 매칭되는 문자
 정규표현식 안에서, 바로 다음 절에서 설명하는 메타문자를 제외한 모든 문자 하나는 일반 문자열 하나와 매칭된다. 예를 들어, a는 a와 매칭되고, 가는 ‘가’와 매칭되는 식이다. 당연히 a가 ‘b’ 또는 ‘가’와 매칭되지는 않는다.
1 2 3 4 5 6 7 8 9 10 11 12 13  어떤 프로그래밍 언어의 정규표현식이든 메타문자(특수한 기능을 하는 문자)라는 것이 존재한다.]]></description>
</item><item>
    <title>SW Expert Academy_D3 4698, 1493, 10570, 3032</title>
    <link>https://colinder.github.io/sw_20.09.09/</link>
    <pubDate>Tue, 08 Sep 2020 23:13:31 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sw_20.09.09/</guid>
    <description><![CDATA[​
D3_4698_테네스의 특별한 소수 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  for T in range(int(input())): D, A, B = map(int, input().split()) D = str(D) a = [0, 0] + [1] * (B - 1) rootB = int(B**0.5)	👈 이 아이디어를 얻기까지 오랜시간이 걸렸다. for i in range(2, rootB+1):	👈 if a[i] == 1:	👈 for j in range(2*i, B+1, i):	👈 에라토스테네스의 체 를 활용 a[j] = 0	👈 result = [] for i in range(A, B+1): if a[i] == 1 and D in str(i): result.]]></description>
</item><item>
    <title>SW Expert Academy_D3 2817, 1491, 1229, 5515</title>
    <link>https://colinder.github.io/sw_20.09.05/</link>
    <pubDate>Sat, 05 Sep 2020 00:06:14 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sw_20.09.05/</guid>
    <description><![CDATA[​
D3_2817_부분 수열의 합 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  import itertools for T in range(int(input())): N, K = map(int, input().split()) # N: 갯수, K: 목표 합 Nums = list(map(int, input().split())) count = 0 for i in range(1, N+1): boxs = itertools.combinations(Nums, i) for box in boxs: if sum(box) == K: count += 1 print(count) # 하... 라이브러리 쓰자..   ​]]></description>
</item><item>
    <title>SW Expert Academy_D3 10505, 10200, 3376, 5642</title>
    <link>https://colinder.github.io/sw_20.09.04/</link>
    <pubDate>Fri, 04 Sep 2020 00:00:59 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sw_20.09.04/</guid>
    <description><![CDATA[​
D3_10505_소득 불균형 1 2 3 4 5 6 7 8 9  for T in range(int(input())): N = int(input()) dp = [0] * 100001 Max = 0 for i in list(map(int, input().split())): dp[i] += 1 Max += i print(f&#39;#{T+1} {sum(dp[:int(Max/N)+1])}&#39;)   ​
D3_10200_구독자 전쟁 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  for T in range(int(input())): N, A, B = map(int, input().]]></description>
</item><item>
    <title>Block_Chain setting &amp; basic</title>
    <link>https://colinder.github.io/block_chain/</link>
    <pubDate>Thu, 03 Sep 2020 22:06:15 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/block_chain/</guid>
    <description><![CDATA[​
🎈가상환경에서 블록체인 채굴 및 기본 시스템 정리 ​
1. geth(Go-ethereum) 설치  블록체인 기술은 중앙집중화된 데이터베이스에 반기를 들고 나온 개념이기 때문에 중앙 서버 이런게 없다. 즉 누구라도 해당 블록체인 네트워크에 참여하고 싶다면 언제라도 블록체인 데이터베이스를 싱크해주는 로컬 프로그램을 다운 받아 실행하면 데이터를 받을 수 있다.
그렇다면 블록체인 네트워크에 참여하고 싶다면 어떻게 해야 할까? 앞서 말한 로컬 프로그램을 다운 받으면 참여가 가능하다.
이 프로그램들 중 하나인 GO 로 짜여진 Go Ethereum(줄여서, geth)을 설치해본다.]]></description>
</item></channel>
</rss>

[{"categories":["git"],"content":"​ Git LFS(Large File Storage) 사용법 Git은 개당 파일에 100MB의 용량 제한이 걸려 있다. (전체 용량 제한은 없다.) 다만, 프로젝트를 하다보면 대용량의 자료나 파일이 생기는 경우가 있다. 이때 용량 제한의 문제를 해소할 수 있는 방법이 LFS이다. LFS는 별도로 설치하여 사용하면 되며, 방법을 정리한다. *주소: https://git-lfs.github.com ​ git LFS을 다운을 받고 설치 합니다. ​ git LFS를 적용할 폴더로 이동해 다음 명령어를 입력합니다. $ git lfs install ​ git LFS로 관리할 파일을 지정해줍니다. // mp4 확장자 모두를 lfs로 관리 $ git lfs track \"*.mp4\" // 특정 파일만 lfs로 관리 (예시) $ git lfs track \"video/hahaha.mp4\" ​ 해당 경로의 설정을 저장할 .gitattributes 파일을 추가 합니다. $ git add .gitattributes ​ 이후로는 평소 git을 사용하는 것처럼 commit / push하면 됩니다. ​ 끝 ​ ","date":"2021-03-25","objectID":"https://colinder.github.io/git_lfslarge-file-storage/:0:0","tags":["git","LFS"],"title":"Git_LFS","uri":"https://colinder.github.io/git_lfslarge-file-storage/"},{"categories":["git"],"content":"🙂부록 *혹시 LFS를 풀고 싶다면 LFS설정한 폴더로 가서 아래 명령어를 입력하면 됩니다. $ git lfs uninstall ​ *또 LFS없이 대용량 파일을 올리려고 하면 오류가 발생하는데, 잘 보면 LFS를 소개 해줍니다. ​ ​ ","date":"2021-03-25","objectID":"https://colinder.github.io/git_lfslarge-file-storage/:1:0","tags":["git","LFS"],"title":"Git_LFS","uri":"https://colinder.github.io/git_lfslarge-file-storage/"},{"categories":["git"],"content":"​ Fork fork는 다른 사람(프로젝트)의 github repository에서 내가 어떤 부분을 수정하거나, 기능을 추가 하고 싶을 때 해당 repository를 그대로 복제하는 기능. fork한 저장소는 원본 repository와 연결되어 있습니다. 여기서 연결되어 있다는 의미는, 원본 repository에 어떤 변화가 생기면 이는 forked된 나의 repository에도 반영될 수 있다는 것입니다. (단, fetch나 rebase의 과정이 필요합니다. fetch나 rebase를 하지 않았다면, 단순히 원본 repository를 복사해서 가져온 상태라고 할 수 있습니다.) fork는 보통 2가지 목적을 위해 사용합니다. 오픈소스 기여를 위해 기존 오픈 소스의 사본을 만들어서 새로운 버전을 만들어나가기 위해 (예를 들어 장고 오리지널이 망했는데 누군가 이 프로젝트를 fork해서 새로운 버전으로 이어나가는 거죠) *fetch: Git에서 어떤 브랜치의 코드를 받아오는 방법 중 하나. (또 다른 하나는 pull) *rebase: Git에서 한 브랜치에서 다른 브랜치로 합치는 방법 중 하나. (또 다른 하나는 merge) ​ 🤔만약? 내가 손본(개발한) 내용을 push 하면 나의 repository에만 변경사항이 저장되고 원본 repository에는 영향을 주지 못합니다. 다만, 원본 repository에도 나의 변경사항을 반영하고 싶다면, 원본 repository에 pull request를 보내고 원본 repository 관리자가 수락하면 원본 repository에도 반영이 됩니다. == 타인 코드에 기여한다. ​ Clone clone은 특정 repository를 내 local machine(ex. 내 노트북)에 복사하여 새로운 저장소를 만드는 기능. clone하면 서버에 있는 프로젝트 히스토리를 포함한 거의 모든 데이터를 복사합니다. (거의 모든이라고 기록한 이유는 세부 명령어에 따라 clone되는 내용이 달라지기 때문입니다.) 또한 clone한 원본 repository의 remote가 origin으로 자동 설정됩니다. 만약 권한이 없다면 original repository의 로그를 보지 못하며, 해당 저장소로 push 하지도 못합니다. ​ 하지만! 로그까지도 모두 clone하는 등의 몇 가지 명령어가 존재합니다. 그중 많이 쓰이는 bare와 mirror에 대하여 정리해봤습니다. –bare 공식문서의 설명은 아래와 같음. Make a bare Git repository. That is, instead of creating \u003cdirectory\u003e and placing the administrative files in \u003cdirectory\u003e/.git, make the \u003cdirectory\u003e itself the $GIT_DIR. This obviously implies the --no-checkout because there is nowhere to check out the working tree. Also the branch heads at the remote are copied directly to corresponding local branch heads, without mapping them to refs/remotes/origin/. When this option is used, neither remote-tracking branches nor the related configuration variables are created. 간단히 bare옵션은 HEAD의 refs 정보가 clone됩니다. *HEAD: 현재 작업중인 브랜치 *refs: 알아보기 쉬운 이름으로 설정된 commit 이름을 “References” 또는 “Refs” 라고 부른다. ​ –mirror 공식문서의 설명은 아래와 같음. Set up a mirror of the source repository. This implies --bare. Compared to --bare, --mirror not only maps local branches of the source to local branches of the target, it maps all refs (including remote-tracking branches, notes etc.) and sets up a refspec configuration such that all these refs are overwritten by a git remote update in the target repository. 간단히 mirror옵션은 모든 브랜치의 refs 정보가 clone됩니다. ​ ​ ​ ✨Point # fork와 clone의 차이 원본 저장소와 연결이 되어 있냐(fork) 아니냐(clone)? ​ *Push Option –mirror Instead of naming each ref to push, specifies that all refs under refs/ (which includes but is not limited to refs/heads/, refs/remotes/, and refs/tags/) be mirrored to the remote repository. Newly created local refs will be pushed to the remote end, locally updated refs will be force updated on the remote end, and deleted refs will be removed from the remote end. This is the default if the configuration option remote.\u003cremote\u003e.mirror is set. ​ ​ Special Thanks to Eric✨. ","date":"2020-10-11","objectID":"https://colinder.github.io/git_fork_vs_clone/:0:0","tags":["git","fork","clone"],"title":"Git_fork vs clone","uri":"https://colinder.github.io/git_fork_vs_clone/"},{"categories":["git"],"content":"​ Git_Mirroring 기존에 사용하고 있던 A_Repo에서 B_Repo로 커밋히스토리 그대로 복사가 필요할 때가 있습니다. 여기서 A_Repo를 그대로 가져온다는 의미는 단지 파일을 새롭게 만드는 것이 아니라 A_Repo에서 작업하던 commit 이력 모두를 그대로 이전하는 의미를 뜻합니다. ​ 터미널을 엽니다. 복사하고자 하는 저장소(A_Repo)의 bare clone을 생성합니다. git clone --bare https://github.com/user/old-repository.git 새로운 저장소(B_Repo)를 만들고 mirror-push를 진행합니다. cd old-repository.git 👈 위에서 클론(bare)한 폴더로 이동 git push --mirror https://github.com/user/new-repository.git 2번 과정에서 클론된 저장소를 지웁니다.(선택사항) ​ 대부분의 경우 위의 방법으로 미러링이 가능하지만, github 정책상 크기가 100MB를 넘어가는 파일이 단 한번이라도 commit되었다면, 오류가 발생하는 이슈가 있을 수도 있음. ","date":"2020-10-08","objectID":"https://colinder.github.io/git_mirroring/:0:0","tags":["git","Mirroring"],"title":"Git_Mirroring","uri":"https://colinder.github.io/git_mirroring/"},{"categories":["web","django","vue"],"content":"​ REST API Reference [TOC] ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:0:0","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"1.사용자 API Members Descriptions POST /accounts/signup 회원가입 POST /accounts/login 회원 로그인 POST /accounts/userDetail 회원정보 PUT /accounts/update 회원정보 수정 DELETE /accounts/dropUser 회원탈퇴 GET /accounts/emailAuth 이메일 인증 GET /accounts/emailCheck 이메일 중복 확인 GET /accounts/nicknameCheck 닉네임 중복 확인 ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:1:0","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"1.1 회원 로그인 POST /accounts/login ​ 회원 로그인 API 입니다. ​ Request parameters Parameter Type Description email String 이메일 password String 비밀번호 ​ Response (Success) Field Type Description uid String DB에서 관리하는 id password String 회원 비밀번호 passwordConfirm String 회원 비밀번호 확인 email String 이메일 nickname String 닉네임 content String 자기소개 createDate LocalDateTime 회원가입일 likedpost String 좋아요한 글 목록 ​ Response (Fail) Field Type Description data null ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:1:1","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"1.2 회원가입 POST /accounts/signup ​ 회원가입 API 입니다. ​ Request parameters Field Type Description password String 회원 비밀번호 passwordConfirm String 회원 비밀번호 확인 email String 이메일 nickname String 닉네임 ​ Response(Success) Field Type Description result.data String success ​ Response (Fail) Field Type Description result.data String fail 1.2.1 이메일 중복확인 GET /accounts/emailCheck 회원가입시 이메일 중복확인하는 API 입니다. ​ Request parameters Field Type Description email String 이메일 ​ Response(Success) Field Type Description result.data String 아이디사용가능 ​ Response (Fail) Field Type Description result.data String 아이디중복 1.2.2닉네임 중복확인 GET /accounts/nicknameCheck 회원가입시 닉네임중복확인하는 API 입니다. ​ Request parameters Field Type Description nickname String 닉네임 ​ Response(Success) Field Type Description result.data String 닉네임사용가능 ​ Response (Fail) Field Type Description result.data String 닉네임중복 1.2.3이메일 인증 GET /accounts/emailAuth 이메일 중복 확인시 이메일을 인증메일을 보내는 API 입니다. ​ Request parameters Field Type Description email String 이메일 ​ Response(Success) Field Type Description dice int 이메일 인증 코드 ​ Response (Fail) Field Type Description data null ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:1:2","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"1.3 회원 정보 수정 PUT /accounts/update 회원정보 수정 API 입니다. ​ Request parameters Field Type Description uid String DB에서 관리하는 id password String 회원 비밀번호 nickname String 닉네임 content String 자기소개 ​ Response(Success) Field Type Description result.data String success ​ Response (Fail) Field Type Description result.data String fail ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:1:3","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"1.4 회원 정보 POST /accounts/userDetail 회원정보를 조회하는 API 입니다. ​ Request parameters Field Type Description uid String DB에서 관리하는 id ​ Response (Success) Field Type Description uid String DB에서 관리하는 id password String 회원 비밀번호 passwordConfirm String 회원 비밀번호 확인 email String 이메일 nickname String 닉네임 content String 자기소개 createDate LocalDateTime 회원가입일 likedpost String 좋아요한 글 목록 ​ Response (Fail) Field Type Description result.data String fail ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:1:4","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"1.5 회원탈퇴 DELETE /accounts/dropUser 회원 탈퇴 API 입니다. ​ Request parameters Field Type Description uid String DB에서 관리하는 id ​ Response(Success) Field Type Description result.data String success ​ Response (Fail) Field Type Description result.data String fail ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:1:5","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"2.게시물 API Members Descriptions POST /articles/register 글 작성 GET /articles/showArticle 글 상세 조회 PUT /articles/modify 글 수정 DELETE /articles/dropArticle 글 삭제 POST /articles/like 글 좋아요 POST /articles/likedList 좋아요 게시물 리스트 GET /articles/searchArticle 글 검색 POST /articles/getRecommentList 음식점 추천 리스트 GET/articles/list 전체 글 리스트 POST /articles/postedList 사용자가 작성한 글 리스트 GET/articles/postedListByLikes 좋아요순 글 리스트 GET/articles/postedListByHits 조회순 글 리스트 ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:2:0","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"2.1 글 작성 POST /articles/registe 글 작성 API 입니다. ​ Request parameters Field Type Description userid int 글 작성자의 id nickname String 글 작성자의 닉네임 title String 글 제목 content String 글 내용 hashtag String 글 해시태그 address String 주소 placename String 장소 이름 url String 상세보기 daum url lat String 위도 lon String 경도 ​ Response(Success) Field Type Description result.data String 글작성 성공 ​ Response (Fail) Field Type Description result.data String 글작성 실패 ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:2:1","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"2.2 글 상세 조회 GET /articles/showArticle 글 상세조회하는 API입니다. ​ Request parameters Field Type Description postId int DB에서 관리하는 post id ​ Response(Success) Field Type Description postId int DB에서 관리하는 post id userid int 글 작성자의 id title String 글 제목 lat String 위도 lon String 경도 content String 글 내용 hashtag String 글 해시태그 address String 주소 likes int 글 좋아요수 createDate String 글 작성일 nickname String 글 작성자의 닉네임 hits int 조회수 url String 상세보기 url starpoint String 크롤링 별점 placename String 장소 이름 ​ Response (Fail) Field Type Description result.data String 조회 실패 ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:2:2","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"2.3 글 수정 PUT /articles/modify 글 수정하는 API 입니다. ​ Request parameters Field Type Description userid int 글 작성자의 id nickname String 글 작성자의 닉네임 title String 글 제목 content String 글 내용 hashtag String 글 해시태그 address String 주소 placename String 장소 이름 url String 상세보기 daum url lat String 위도 lon String 경도 ​ Response(Success) Field Type Description postId int DB에서 관리하는 post id userid int 글 작성자의 id title String 글 제목 lat String 위도 lon String 경도 content String 글 내용 hashtag String 글 해시태그 address String 주소 likes int 글 좋아요수 createDate String 글 작성일 nickname String 글 작성자의 닉네임 hits int 조회수 url String 상세보기 url starpoint String 크롤링 별점 placename String 장소 이름 ​ Response (Fail) Field Type Description result.data String fail ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:2:3","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"2.4 글 삭제 DELETE /articles/dropArticle 글 삭제하는 API입니다. ​ Request parameters Field Type Description postId int DB에서 관리하는 post id ​ Response(Success) Field Type Description result.data String 삭제 성공 ​ Response (Fail) Field Type Description result.data String 삭제 실패 ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:2:4","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"2.5 글 좋아요 POST /articles/like 글 좋아요 올리거나 내리는 API 입니다. ​ Request parameters Field Type Description postId int DB에서 관리하는 post id userid int 글 작성자의 id ​ Response(Success) Field Type Description result.data String success ​ Response (Fail) Field Type Description result.data String fail ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:2:5","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"2.6 좋아요 게시물 리스트 POST /articles/likedList 좋아요 누른 게시물을 리턴해주는 API입니다. ​ Request parameters Field Type Description userid int 글 작성자의 id ​ Response(Success) Field Type Description result.data List Post객체의 리스트 ​ Response (Fail) Field Type Description result.data null ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:2:6","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"2.7 글 검색 GET /articles/searchArticle 글 검색 API 입니다. ​ Request parameters Field Type Description keyword(path) String 검색어 ​ Response(Success) Field Type Description result.data HashMap 해쉬맵으로 검색결과를 리턴 ​ Response (Fail) Field Type Description result.data null ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:2:7","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"2.8 음식점 추천 리스트 POST /articles/getRecommentList 음식점 추천 API입니다. ​ Request parameters Field Type Description food String 관련 태그를 ,로 연결하여 보내기 isCafe String 카페도 추천하면 추가 isDrink String 술집도 추천하면 추가 like String 피드백에서 좋아요수가 부족할때 watch String 피드백에서 조회수가 부족할때 star String 피드백에서 별점이 부족할때 ​ Response(Success) Field Type Description 음식 Post 추천하는 음식점 카페 Post 추천하는 카페 술집 Post 추천하느 술집 ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:2:8","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"2.9 전체 글 리스트 GET /articles/list 전체 글을 받는 API입니다. ​ Response(Success) Field Type Description result.comment List 댓글수의 리스트 result.list List 전체 글의 리스트 ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:2:9","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"2.10 사용자가 작성한 글 리스트 POST /articles/postedList 사용자가 작성한 글의 리스트를 리턴해주는 API 입니다. ​ Request parameters Field Type Description userid int 글 작성자의 id ​ Response(Success) Field Type Description result List 전체 글의 리스트 ​ Response (Fail) Field Type Description result null ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:2:10","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"2.11좋아요순 글 리스트 GET /articles/postedListByLikes 좋아요 순으로 글의 리스트를 리턴해주는 API 입니다. ​ Response(Success) Field Type Description result.comment List 댓글수의 리스트 result.list List 전체 글의 리스트 ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:2:11","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"2.12 조회순 글 리스트 GET /articles/postedListByHits 조회 순으로 글의 리스트를 리턴해주는 API 입니다. ​ Response(Success) Field Type Description result.comment List 댓글수의 리스트 result.list List 전체 글의 리스트 ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:2:12","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"2.13 좋아요순 글 리스트 GET /articles/postedListByStarpoint 별점순으로 글의 리스트를 리턴해주는 API 입니다. ​ Response(Success) Field Type Description result.comment List 댓글수의 리스트 result.list List 전체 글의 리스트 ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:2:13","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"3.글 임시저장 API Members Descriptions POST /subarticles/register 임시 글 작성 GET /subarticles/detail/{postid} 임시저장 글 상세 조회 GET /subarticles/list/{userid} 유저별 임시 글 리스트 DELETE /subarticles/dropSubarticle 임시 글 삭제 ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:3:0","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"3.1 임시 글 작성 POST /subarticles/register 임시 글 작성 API입니다. ​ Request parameters Field Type Description userid int 글 작성자의 id nickname String 글 작성자의 닉네임 title String 글 제목 content String 글 내용 hashtag String 글 해시태그 address String 주소 placename String 장소 이름 url String 상세보기 daum url lat String 위도 lon String 경도 ​ Response(Success) Field Type Description result.data String 글작성 성공 ​ Response (Fail) Field Type Description result.data String 글작성 실패 ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:3:1","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"3.2 임시저장 글 상세 조회 GET /subarticles/detail/{postid} 임시 글 상세조회 API입니다. ​ Request parameters Field Type Description postid int DB에서 관리하는 post id ​ Response(Success) Field Type Description result Post 유저별 임시저장 글 ​ Response (Fail) Field Type Description result.data String fail ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:3:2","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"3.3 유저별 임시 글 리스트 GET /subarticles/list/{userid} 유저별 임시 글 리스트 API입니다. ​ Request parameters Field Type Description userid int DB에서 관리하는 user id ​ Response(Success) Field Type Description result List 유저별 임시저장 글의 리스트 ​ Response (Fail) Field Type Description result.data String fail ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:3:3","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"3.4 임시 글 삭제 DELETE /subarticles/dropSubarticle 임시 글 삭제 API입니다. 글 삭제하는 API입니다. ​ Request parameters Field Type Description postId int DB에서 관리하는 post id ​ Response(Success) Field Type Description result.data String 임시저장 글 삭제 성공 ​ Response (Fail) Field Type Description result.data String 임시저장 글 삭제 실패 ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:3:4","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"4.댓글 API Members Descriptions GET /comments/list/{postid} 해당글의 댓글 전체 리스트 POST /comments/register 댓글 작성 PUT /comments/modify 댓글 수정 DELETE /comments/dropComment 댓글 삭제 ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:4:0","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"4.1 해당 글의 전체 댓글 GET /comments/list/{postid} 해당 글의 전체 댓글을 받아오는 API입니다. ​ Request parameters Field Type Description postid(path) int 해당 글 id ​ Response(Success) Field Type Description result.data List Comment객체의 리스트 ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:4:1","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"4.2 댓글 작성 POST /comments/register 댓글 작성하는 API 입니다. ​ Request parameters Field Type Description postid int 댓글을 쓰는 글의 id content String 댓글 내용 userid int 글 작성하 사용자의 DB userid nickname String 글 작성하는 사용자의 닉네임 ​ Response(Success) Field Type Description result.data String success ​ Response (Fail) Field Type Description result.data String fail ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:4:2","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"4.3 댓글 수정 PUT /comments/modify 댓글 수정하는 API 입니다. ​ Request parameters Field Type Description postid int 댓글을 쓰는 글의 id content String 댓글 내용 userid int 글 작성하 사용자의 DB userid nickname String 글 작성하는 사용자의 닉네임 ​ Response(Success) Field Type Description result.data String success ​ Response (Fail) Field Type Description result.data String fail ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:4:3","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["web","django","vue"],"content":"4.4 댓글 삭제 DELETE /comments/dropComment 댓글 삭제하는 API입니다. ​ Request parameters Field Type Description commentId int 댓글의 id ​ Response(Success) Field Type Description result.data String success ​ Response (Fail) Field Type Description result.data String fail ","date":"2020-09-24","objectID":"https://colinder.github.io/rest-api-reference/:4:4","tags":["Web"],"title":"REST API Reference","uri":"https://colinder.github.io/rest-api-reference/"},{"categories":["django","vue"],"content":"​ Naming Convention 정해진 규정은 없으나, 많은 개발자들이 암묵적으로 지키고 있는 이름짓는 방법. ​ snake_case 🐍 # _ == snake some_var = 5 my_awesome = 3 ​ camelCase 🐪 # 낙타등이 솟아 있는 모습 someVar = 5 pyAwesome = 3 ​ UpperCamelCase 🐪🐪 # 낙타얼굴과 등이 중간에 솟아 있는 모습 (파스칼식(Pascal case)이라고도 불린다.) SomeVar = 5 PyAwesome = 3 ​ Kebab-Case 🥙 # 케밥이 꼬챙이에 꽂힌 모습에서 생긴 방법(이라는데 난 생김새는 잘 모르겠다.ㅎ) main-login = 5 feed-content = 1 ​ ","date":"2020-08-02","objectID":"https://colinder.github.io/namingconvention/:0:0","tags":["django","vue"],"title":"Naming Convention","uri":"https://colinder.github.io/namingconvention/"}]
[{"categories":["django","vue"],"content":"Naming Convention 정해진 규정은 없으나, 많은 개발자들이 암묵적으로 지키고 있는 이름짓는 방법. ","date":"2020-08-02","objectID":"/namingconvention/:0:0","tags":["django","vue"],"title":"Naming Convention","uri":"/namingconvention/"},{"categories":["django","vue"],"content":"Python snake_case 🐍 # _ == snake some_var = 5 my_awesome = 3 ","date":"2020-08-02","objectID":"/namingconvention/:1:0","tags":["django","vue"],"title":"Naming Convention","uri":"/namingconvention/"},{"categories":["django","vue"],"content":"Javascript, Vue camelCase 🐪 # 낙타등이 중간에 솟아 있는 모습 someVar = 5 pyAwesome = 3 uppercamelCase 🐪🐪 # 낙타얼굴과 등이 중간에 솟아 있는 모습 SomeVar = 5 PyAwesome = 3 ","date":"2020-08-02","objectID":"/namingconvention/:2:0","tags":["django","vue"],"title":"Naming Convention","uri":"/namingconvention/"},{"categories":["Vue"],"content":"​ Vuex 란? (공식문서) Vuex는 Vue.js 애플리케이션에 대한 상태 관리 패턴 + 라이브러리 입니다. 애플리케이션의 모든 컴포넌트에 대한 중앙 집중식 저장소 역할을 하며 예측 가능한 방식으로 상태를 변경할 수 있습니다. 또한 Vue의 공식 devtools 확장 프로그램과 통합되어 설정 시간이 필요 없는 디버깅 및 상태 스냅 샷 내보내기/가져오기와 같은 고급 기능을 제공합니다. (공식문서 설명) 그렇다면? 상태관리패턴이란 무엇인가? ​ 🤔이를 알아보기 전에 간단히 지난 시간에 알아본 porps와 emit의 문제점을 생각해보자! 많은 components를 통과해야 하는 prop의 경우 테이터 이동을 위한 코드가 장황해질 수 있다. 형제 components는 부모를 거쳐 데이터를 이동해야 하는 불편함이 발생한다. 형제 components = 같은 가로층의 components\"\r형제 components = 같은 가로층의 components\r 심지어 손자 components 끼리 데이터를 이동하려면 엄청나게 많은 props와 emit이 작성되어야 하는데, 이런 불편함을 해소하기 위해 데이터 저장소(STORE) components를 생성하는 것을 고민해볼 수 있다. ​ 이 때문에 대규모 애플리케이션의 상태를 관리할 수 있는 상태 관리 패턴이 필요해진다. 예를 들면 이런 모습으로\"\r이런 모습으로\r ","date":"2020-08-02","objectID":"/vue_basic_04/:0:0","tags":["Vue"],"title":"Vue_basic_04 (Vuex)","uri":"/vue_basic_04/"},{"categories":["SW Expert Academy"],"content":"​ ","date":"2020-07-29","objectID":"/sw_20.07.29/:0:0","tags":["algorithm"],"title":"SW_20.07.29","uri":"/sw_20.07.29/"},{"categories":["SW Expert Academy"],"content":"D3_4466_최대 성적표 만들기 for T in range(int(input())): N, K = map(int, input().split()) score = list(map(int, input().split())) score.sort(reverse=True) result = 0 for i in range(K): result += score[i] print('#{} {}'.format(T+1, result)) ​ ","date":"2020-07-29","objectID":"/sw_20.07.29/:0:1","tags":["algorithm"],"title":"SW_20.07.29","uri":"/sw_20.07.29/"},{"categories":["SW Expert Academy"],"content":"D3_4406_모음이 보이지 않는 사람 for T in range(int(input())): sent = input() result = '' for i in sent: if i not in 'aeiou': result += i print('#{} {}'.format(T+1, result)) ​ ","date":"2020-07-29","objectID":"/sw_20.07.29/:0:2","tags":["algorithm"],"title":"SW_20.07.29","uri":"/sw_20.07.29/"},{"categories":["SW Expert Academy"],"content":"D3_4371_항구에 들어오는 배 ​ ","date":"2020-07-29","objectID":"/sw_20.07.29/:0:3","tags":["algorithm"],"title":"SW_20.07.29","uri":"/sw_20.07.29/"},{"categories":["SW Expert Academy"],"content":"D3_4299_태혁이의 사랑은 타이밍 for T in range(int(input())): D, H, M = map(int, input().split()) result = D*1440 + H*60 + M if result \u003e= 16511: print(f'#{T+1} {result-16511}') else: print(f'#{T+1} -1') ​ ","date":"2020-07-29","objectID":"/sw_20.07.29/:0:4","tags":["algorithm"],"title":"SW_20.07.29","uri":"/sw_20.07.29/"},{"categories":["Vue"],"content":"​ 1. VUE CLI 란? (공식문서) 간단히 vue-cli 는 기본 vue 개발 환경을 설정해주는 도구 여기서 CLI 란 ? 명령 줄 인터페이스(CLI, Command line interface) 또는 명령어 인터페이스는 텍스트 터미널을 통해 사용자와 컴퓨터가 상호 작용하는 방식. 즉, 작업 명령은 사용자가 컴퓨터 키보드 등을 통해 문자열의 형태로 입력하며, 컴퓨터로부터의 출력 역시 문자열의 형태로 주어진다. (위키백과) ​ 2. vue router 프로젝트 생성 후 보통의 경우 편의를 위해 terminal에 vue add router를 입력해 router설치를 진행한다. router를 설치하고 나면 기존의 vue 프로젝트의 tree구조에서 약간의 변화가 생긴다. router 설치 전: App.vue - components router 설치 후: App.vue - views - components ​ ","date":"2020-07-17","objectID":"/vue_basic_03/:0:0","tags":["Vue"],"title":"Vue_basic_03 (vue_cli \u0026 router \u0026 histoyMode)","uri":"/vue_basic_03/"},{"categories":["Vue"],"content":"views 폴더 속 .vue 파일의 특징 1. views 폴더안의 .vue 파일들은 App.vue에 직접 연결되며, components들을 품을 수도 있다. 2. props(부모에서 자식에게 데이터 이동)와 emit(자식에서 부모에게 데이터 이동)이다. 더 많은 특징 및 활용방법이 있을 것이나 상기 내용은 가장 기초이자 핵심이다. ​ ​ 🤷‍♂️ 1번 내용부터 실습해보자 부모(views)에 자식 (components)를 품는 상황을 가정하고 코딩 (Step 1~3 으로 구성) Step 1. // App.vue \u003ctemplate\u003e \u003cdiv id=\"app\"\u003e \u003cdiv id=\"nav\"\u003e //Component에 등록한 name 사용법 (위 아래가 동일) \u003crouter-link :to=\"{ name: 'Parent' }\"\u003eParnet\u003c/router-link\u003e | //디폴트 사용법 \u003crouter-link to=\"/about\"\u003eAbout\u003c/router-link\u003e \u003c/div\u003e // 연결된 router의 내용을 보여주는 곳 \u003crouter-view/\u003e \u003c/div\u003e \u003c/template\u003e Step 2. // components/Child.vue (직접 생성) \u003ctemplate\u003e \u003cdiv class=\"child\"\u003e \u003ch2\u003e자식 컴포넌트\u003c/h2\u003e \u003c/div\u003e \u003c/template\u003e \u003cscript\u003e export default { name: 'Child', } \u003c/script\u003e \u003c!-- views에서 components를 담을 때 모습이 어떻게 담기는기 보기 위해 경계선을 구현 --\u003e \u003cstyle\u003e .child { border: 3px solid blue; margin: 3px; padding: 3px; } \u003c/style\u003e Step 3. // views/Parent.vue (직접 생성) // views에 components 등록 ✨ Point! 1. views에서 components를 등록(Parent가 Child를 품고 싶다면)하고 싶다면, 1) components의 \u003cscript\u003e\u003c/script\u003e에 import 진행 2) \u003cscript\u003e\u003c/script\u003e안에 components: {Child}의 문법으로 등록 3) \u003ctemplate\u003e\u003c/template\u003e안에 components이름으로 탭을 만들면 해당 위치에 components 표현 가능 \u003ctemplate\u003e \u003cdiv class=\"parent\"\u003e \u003ch1\u003e부모 컴포넌트\u003c/h1\u003e \u003c!-- step 3. 사용 (feat. 나중에 자식에게서도 데이터를 받음. this.$emit('hungry' 여기 값을 반영)) --\u003e \u003cChild/\u003e \u003ch2\u003e최하단입니다.\u003c/h2\u003e \u003c/div\u003e \u003c/template\u003e \u003cscript\u003e // step 1. import import Child from '../components/Child.vue' export default { name: 'Parent', // step 2. 등록 }, components: { // 'Child': Child, 키 벨류가 같으면 아래와 같이 사용가능 Child, } } \u003c/script\u003e \u003c!-- views에서 components를 담을 때 모습이 어떻게 담기는기 보기 위해 경계선을 구현 --\u003e \u003cstyle\u003e .parent { border: 3px solid red; margin: 3px; padding: 3px; } \u003c/style\u003e ​ ※ Vue 프로젝트를 생성해 components를 등록하고, 화면을 구성하다보면 각각의 components에서 작성 또는 변경된 데이터를 이리저리 보낼 수 있다면 더 다양한 것을 할 수 있어진다. 이를 위한 것이 props(부모에서 자식에게 데이터 이동)와 emit(자식에서 부모에게 데이터 이동)이다. ​ 🤷‍♀️ 2번 내용도 실습해보자 부모 views에서 자식 component간의 용돈을 주고 받는 상황을 가정하고 코딩해보자 (Step 1~4) Step 1. ## App.vue \u003ctemplate\u003e \u003cdiv id=\"app\"\u003e \u003cdiv id=\"nav\"\u003e \u003c!-- Component에 등록한 name 사용법 (위 아래가 동일) --\u003e \u003crouter-link :to=\"{ name: 'Parent' }\"\u003eParnet\u003c/router-link\u003e | \u003c!-- 기존 사용법 --\u003e \u003crouter-link to=\"/about\"\u003eAbout\u003c/router-link\u003e \u003c/div\u003e \u003c!-- 연결된 router의 내용을 보여주는 곳 --\u003e \u003crouter-view/\u003e \u003c/div\u003e \u003c/template\u003e \u003cstyle\u003e... Step 2. ## views/Parent.vue (직접 생성) ## 부모에서 자식에게 데이터 전달 (views → components) ✨ Point! 1. views에서 components를 등록(Parent가 Child를 품고 싶다면)하고 싶다면, 1) components의 \u003cscript\u003e\u003c/script\u003e에 import 진행 2) \u003cscript\u003e\u003c/script\u003e안에 components: {Child}의 문법으로 등록 3) \u003ctemplate\u003e\u003c/template\u003e안에 components이름으로 탭을 만들면 해당 위치에 components 표현 가능 2. views에서 components에 데이터를 넘길때에는, 1) \u003ctemplate\u003e\u003c/template\u003e안에 components탭에 :내리고 싶은 데이터=\"데이터명\" `:propFromParentMsg=\"parentMsg\"`의 문법으로 전달 \u003ctemplate\u003e \u003cdiv class=\"parent\"\u003e \u003ch1\u003e부모 컴포넌트\u003c/h1\u003e \u003c!-- step 3. 사용 --\u003e \u003cChild :propFromParentMsg=\"parentMsg\"/\u003e \u003ch2\u003e최하단입니다.\u003c/h2\u003e \u003c/div\u003e \u003c/template\u003e \u003cscript\u003e // step 1. import import Child from '../components/Child.vue' export default { name: 'Parent', // step 2. 등록 data () { return { parentMsg: '용돈 필요하니(부모가 전달한 메세지)' } }, components: { // 'Child': Child, 키 벨류가 같으면 아래와 같이 사용가능 Child, } } \u003c/script\u003e \u003c!-- views에서 components를 담을 때 모습이 어떻게 담기는기 보기 위해 경계선을 구현 --\u003e \u003cstyle\u003e .parent { border: 3px solid red; margin: 3px; padding: 3px; } \u003c/style\u003e Step 3. ## components/Child.vue (직접 생성) ## 1. views에서 components에 받은 데이터 노출 (부모에게서 받은 데이터 노출) ## 2. components에서 views에 데이터 전달 (자식에서 부모에게 데이터 전달) ✨ Point! 1. views에서 받은 데이터를 노출하고 싶다면, 1) \u003cscript\u003e\u003c/script\u003e에 전달받은 데이터의 자료형을 선언해주며 등록 ex) props: {propFromParentMsg: String,} 2) 보간법('{{}}')을 사용하여 노출. ex) {{ propFromParentMsg }} 2. components에서 views에 데이터를 넘길때에는 이벤트를 생성해 전달하는데, 1) 부모에게 전달한 메서드 만든다. methods: { moneySignal () {this.$emit('needMoney')} } : 📌 this.$emit() : 부모에게 전달하는 이벤트 이름 📌 2) 메서드를 작동시킬 이벤트를 만든다. ex) \u003cbutton @click=\"moneySignal\"\u003e용돈 필요해요!!!\u003c/button\u003e → 클릭시 moneySignal이라는 메서드 실행 \u003ctemplate\u003e \u003cdiv class=\"child\"\u003e \u003ch2\u003e자식 컴포넌트\u003c/h2\u003e \u003c!-- 부모에게서 받은 데이터 노출 --\u003e {{ propFromParentMsg }} \u003cbr/\u003e \u003cbutton @click=\"moneySignal\"\u003e용돈 필요해요!!!\u003c/button\u003e \u003c/div\u003e \u003c/template\u003e \u003cscript\u003e export default { name: 'Child'","date":"2020-07-17","objectID":"/vue_basic_03/:1:0","tags":["Vue"],"title":"Vue_basic_03 (vue_cli \u0026 router \u0026 histoyMode)","uri":"/vue_basic_03/"},{"categories":["Vue"],"content":"​ ","date":"2020-07-17","objectID":"/vue_basic_02/:0:0","tags":["Vue"],"title":"Vue_basic_02 (Vue 문법2)","uri":"/vue_basic_02/"},{"categories":["Vue"],"content":"Vue의 기본 문법 및 동작 방법을 계속 알아보자 08_methods ✨Point 1. method는 methods: {}의 문법으로 구성한다. \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eMethods\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id='app'\u003e {{ message }} \u003c/div\u003e \u003c!-- CDN 설정 --\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e \u003cscript\u003e const app = new Vue({ el: '#app', data: { message: 'Hello Vue' }, methods: { alertWarning: function() { alert('WARNING') }, alertWarning () { // Syntactic Sugar : 위와 완전히 동일 alert(this.message) }, changeMessage() { this.message = 'CHANGED MESSAGE' } } }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ​ 09_v-on 위에서 선언한 methods를 이제 실행한다. ✨Point (아주아주 중요) 1. 난, v-on은 이벤트(methods 등)를 실행시켜주는 트리거라고 이해했다. 2. 트리거를 발동시키는 내용은 여러가지가 있으니 이는 별도로 공부해야 한다. \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003ev-on\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id='app'\u003e \u003ch1\u003e{{ message }}\u003c/h1\u003e \u003cbutton v-on:click=\"alertWarning\"\u003eAlert warning\u003c/button\u003e \u003cbutton v-on:click=\"alertMessage\"\u003eAlert Message\u003c/button\u003e \u003cbutton v-on:click=\"changeMessage\"\u003eChange Message\u003c/button\u003e \u003c!-- v-on: 는 @ 로 축약해서 사용할 수 있다. --\u003e \u003cbutton @click=\"changeMessage\"\u003eChange Message\u003c/button\u003e \u003chr\u003e \u003cinput v-on:keyup.enter=\"onInputChange\" type=\"text\"\u003e \u003c/div\u003e \u003c!-- CDN 설정 --\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e \u003cscript\u003e const app = new Vue({ el: '#app', data: { message: 'Hello Vue' }, methods: { alertWarning: function() { alert('WARNING') }, alertMessage () { // Syntactic Sugar : 위와 완전히 동일 alert(this.message) }, changeMessage() { this.message = 'CHANGED MESSAGE' }, onInputChange(event) { // console.log(\"!!\") // if (event.key === 'Enter') { this.message = event.target.value // } }, } }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 👍 v-on 이벤트 종류는 여기에 모두 있다. ​ 10_v-model ✨Point 1. 난, data값과 input값을 실시간으로 연동(양방향 바인딩)해주는 디렉티브 2. v-on(@)과 value를 동시에 걸어주면 양방향 바인딩이 가능함. \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003ev-model\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id=\"app\"\u003e \u003ch1\u003e{{ message }}\u003c/h1\u003e \u003c!-- v-model은 input, select, textarea에만 사용이 가능--\u003e \u003ch4\u003e단반향 binding (input =\u003e data)\u003c/h4\u003e 1way \u003cinput @keyup.enter=\"onInputChange\" type=\"text\"\u003e \u003chr\u003e \u003ch4\u003e양방향 binding\u003c/h4\u003e 2way \u003cinput @keyup.enter=\"onInputChange\" type=\"text\" :value=\"message\"\u003e \u003chr\u003e \u003c!-- 단뱡향과 양방향을 구분하기 귀찮아서 model을 개발 --\u003e \u003ch4\u003ev-model 양방향 binding\u003c/h4\u003e v-model/2way \u003cinput v-model=\"message\" type=\"text\"\u003e \u003c/div\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e \u003cscript\u003e const app = new Vue({ el:'#app', data: { message: 'hi' }, methods: { onInputChange(event) { // console.log(\"22\") this.message = event.target.value } } }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ​ 11_v-show ✨Point 1. v-if와 거의 유사하나 개발자 도구로 찍어보면 v-if는 조건에 따라 렌더링이 있다 없다 하지만, v-show의 요소는 항상 렌더링 되고 DOM에 남아있다. \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003ev-show\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id=\"app\"\u003e \u003c!-- v-if와 거의 유사!--\u003e \u003cbutton @click='changeF'\u003echangeF\u003c/button\u003e \u003cp v-if=\"t\"\u003eTrue\u003c/p\u003e \u003cp v-if=\"f\"\u003efalse\u003c/p\u003e \u003cp v-show=\"t\"\u003eshow True\u003c/p\u003e \u003cp v-show=\"f\"\u003eshow false\u003c/p\u003e \u003c/div\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e \u003cscript\u003e const app = new Vue({ el: \"#app\", data: { t: true, f: false, }, methods: { changeF() { this.f = !this.f } } }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ​ 12_computed ✨Point 1. computed는 페이지 시작시 별다른 선언없이도 자동으로 실행된다. \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id='app'\u003e \u003ch1\u003eBankrruped\u003c/h1\u003e {{ getBankrrupedPeople }} \u003c/div\u003e \u003c!-- CDN 설정 --\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e \u003cscript\u003e const app = new Vue({ el: '#app', data: { accounts: [ { name: 'neo', balance: 500, isBankrruped: true }, { name:","date":"2020-07-17","objectID":"/vue_basic_02/:1:0","tags":["Vue"],"title":"Vue_basic_02 (Vue 문법2)","uri":"/vue_basic_02/"},{"categories":["Vue"],"content":"종합 실습(로또 번호 추천) \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003elotto\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id=\"app\"\u003e \u003cbutton @click=\"getLuckySix\"\u003egetLuckySix\u003c/button\u003e \u003cul\u003e \u003cli v-for=\"number in myNumbers\"\u003e {{ number }} \u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e \u003c!-- 수학적 커멘드는 lodash 활용 --\u003e \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.15/lodash.min.js\"\u003e\u003c/script\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e \u003cscript\u003e const app = new Vue({ el: \"#app\", data: { allNumbers: _.range(1, 46), myNumbers: [] }, methods: { getLuckySix() { this.myNumbers = _.sampleSize(this.allNumbers, 6) // vue는 str로 자료를 보는데 이를 정수로 바꾸기 위한 코드는 아래와 같다. // vue에서 str과 str을 빼는 건 int로 값이 나오기 때문에 this.myNumbers.sort((a, b) =\u003e a - b) } }, }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-07-17","objectID":"/vue_basic_02/:1:1","tags":["Vue"],"title":"Vue_basic_02 (Vue 문법2)","uri":"/vue_basic_02/"},{"categories":["Vue"],"content":"​ Vue Vue.js는 웹 애플리케이션의 사용자 인터페이스를 만들기 위해 사용하는 오픈 소스 프로그레시브 자바스크립트 프레임워크 ​ ","date":"2020-07-17","objectID":"/vue_basic_01/:0:0","tags":["Vue"],"title":"Vue_basic_01 (Vue란? \u0026 Vue 문법1)","uri":"/vue_basic_01/"},{"categories":["Vue"],"content":"Vue의 이론적 구성 및 설명을 알아보자 1. Vue는 MVVM 패턴을 따른다. MVVM(Model-View-ViewModel) 패턴? 모델과 뷰 사이에 뷰모델이 위치하는 구조 MVVM 패턴\"\rMVVM 패턴\r ​ 2. Vue는 SPA (Single-Page Application) 서버로부터 완전한 새로운 페이지를 불러오지 않고 현재의 페이지를 동적으로 다시 작성함으로써 사용자와 소통하는 웹 애플리케이션을 말한다. 내가 이해한 방식: 변경사항이 발생했을 때 새로고침을하며 매번 페이지를 새롭게 구서하는 것이 아니라, 서버를 돌릴 때 이미 모든 페이지가 제작되어 있고 이를 사용자의 선택에 따라 보여주는 것. ​ ","date":"2020-07-17","objectID":"/vue_basic_01/:1:0","tags":["Vue"],"title":"Vue_basic_01 (Vue란? \u0026 Vue 문법1)","uri":"/vue_basic_01/"},{"categories":["Vue"],"content":"Vue의 기본 문법 및 동작 방법을 알아보자 01_data 선언 ✨Point 1. data는 함수로 선언하여 등록하고 사용한다. \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id='app'\u003e \u003c/div\u003e \u003c!-- Vue를 사용하겠다는 CDN 설정 --\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e \u003cscript\u003e const app = new Vue({ el: '#app', // component별로 data(변수등록)는 함수로 선언하여 사용한다. data: { message: 'Hello Vue' } }) console.log(app.message) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ​ 02_interpolation(보간법) ✨Point 1. 보간법: 두 점을 연결하는 방법 2. 난, `data(변수)는 {{}} 2개의 중괄호 안에 변수명을 적어 사용한다.` 정도로 이해했다. \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id='app'\u003e {{ message }} \u003c/div\u003e \u003c!-- CDN 설정 --\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e \u003cscript\u003e const app = new Vue({ el: '#app', data: { message: 'Hello Vue' } }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ​ 03_v-text ✨Point 1. data에 선언된 변수를 그대로 가져와서 노출 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id='app'\u003e \u003c!-- Vanilla JS. domElenment.innText --\u003e \u003c!-- v- 로 시작하는 것들은 모두 디렉티브(명령하는 것)라고 부른다. --\u003e \u003cp v-text='message'\u003e\u003c/p\u003e \u003cp\u003e{{ message }}\u003c/p\u003e \u003c/div\u003e \u003c!-- CDN 설정 --\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e \u003cscript\u003e const app = new Vue({ el: '#app', data: { message: '완전히 같아요' } }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 실행화면\"\r실행화면\r 04_v-if ✨Point 1. 태그 안 v-if가 true일 때만, 값이 노출된다. 2. vue에선 빈 리스트는 True값 반환 3. 이외에 false, 빈스트링(\"\"), 0은 False값 반환 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eVue-if\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id='app'\u003e \u003cp v-if='bool1'\u003etrue는 참이니 노출\u003c/p\u003e \u003c!--bool1이 참이니까. true가 보인다.--\u003e \u003cp v-if='bool2'\u003efalse\u003c/p\u003e \u003c!--bool2이 거짓이니까. false가 안보인다.--\u003e \u003cp v-if='str1'\u003e비어있지 않은 문자열은 True\u003c/p\u003e \u003c!--str1이 참이니까. true가 보인다.--\u003e \u003cp v-if='str2'\u003e비어있으면 false고 노출 안됨\u003c/p\u003e \u003c!--str2이 거짓이니까. false가 안보인다.--\u003e \u003cp v-if='num1'\u003e1은 True\u003c/p\u003e \u003c!--num1이 참이니까. true가 보인다.--\u003e \u003cp v-if='num2'\u003e0은 false\u003c/p\u003e \u003c!--num2이 거짓이니까. false가 안보인다.--\u003e \u003cp v-if='arr'\u003e빈 리스트는 arr_True!!!\u003c/p\u003e \u003c!-- vue는 빈배열이 true 평가 --\u003e \u003cp v-if='arr.length'\u003earr_false\u003c/p\u003e \u003c/div\u003e \u003c!-- CDN 설정 --\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e \u003cscript\u003e const app = new Vue({ el: '#app', data: { bool1:true, bool2:false, str1:'Yes', str2:'', num1:1, num2:0, arr: [], } }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ​ 05_v-if-elseif-else ✨Point 1. vue에선 if elseif else을 나누어 사용 가능. \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id='app'\u003e \u003c!-- 조건식도 가능 --\u003e \u003cp v-if=\"username === master\"\u003ehello master\u003c/p\u003e \u003cp v-else\u003ehello user\u003c/p\u003e \u003chr\u003e \u003cp v-if=\"number \u003e 0\"\u003e양수\u003c/p\u003e \u003cp v-else-if=\"number \u003c 0\"\u003e음수\u003c/p\u003e \u003cp v-else\u003e영\u003c/p\u003e \u003c/div\u003e \u003c!-- CDN 설정 --\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e \u003cscript\u003e const app = new Vue({ el: '#app', data: { username: 'master', number: 0, } }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ​ 06_v-for ✨Point 1. list안에 담으면 for사용 가능 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id='app'\u003e \u003cul\u003e \u003cli v-for='number in numbers'\u003e{{ number }}\u003c/li\u003e \u003c!-- 이런 것도 가능 --\u003e \u003cli v-for='number in numbers'\u003e{{ number + 1 }}\u003c/li\u003e \u003c/ul\u003e \u003col\u003e \u003cli v-for='teacher in teachers'\u003e{{teacher}}\u003c/li\u003e \u003cli v-for='teacher in teachers'\u003e{{teacher.name}}\u003c/li\u003e \u003c/ol\u003e \u003c/div\u003e \u003c!-- CDN 설정 --\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e \u003cscript\u003e const app = new Vue({ el: '#app', data: { numbers: [0,1,2,3,4,5], teachers: [ { name: 'neo'}, { name: 'tak'}, ] } }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 실행화면\"\r실행화면\r ​ 07_v-b","date":"2020-07-17","objectID":"/vue_basic_01/:2:0","tags":["Vue"],"title":"Vue_basic_01 (Vue란? \u0026 Vue 문법1)","uri":"/vue_basic_01/"},{"categories":["Vue"],"content":"​ Vue Vue.js는 웹 애플리케이션의 사용자 인터페이스를 만들기 위해 사용하는 오픈 소스 프로그레시브 자바스크립트 프레임워크 ","date":"2020-07-17","objectID":"/vue_setting/:0:0","tags":["Vue"],"title":"Vue_setting","uri":"/vue_setting/"},{"categories":["Vue"],"content":"1. 시작하기 Vue VS Django 어느 정도 공부를 하면서 체득한 가장 큰 구분점은 “Django는 App별로 응답을 구분하고, Vue는 Component별로 응답을 구분한다.“는 것이다. 큰 차이가 없어보이고, 큰 의미가 없어보일 수 있으나 이는 내가 vue를 이해하는데 가장 많은 도움이 된 부분이다. 개발 환경 설정 \u0026 프로젝트 생성 vscode 설치 nodeJS 설치 vscode 실행 후 terminal에서 npm install 설치 vscode 실행 후 terminal에서 npm i -g @vue/cli 설치 설치가 잘 되었나 vue --version으로 확인 (버전이 보이면 ok) (선택사항) vscode의 Extensions에서Vetur와 Vue VSCode Snippets 설치 Auto Rename Tag, Auto Close Tag $ vue create myproject # myproject 프로젝트 생성 $ cd myproject # 생성한 myproject 폴더로 이동 $ vue add router # (선택사항) myproject 히스토리를 관리해줄 router기능 설치 $ npm run serve # myproject의 디폴트 서버 실행 App running at: - Local: http://localhost:8080/ - Network: http://192.168.219.164:8080/ 이후 Local로 접속하면 생성된 서버 페이지 확인이 가능하다. 또 같은 공유기를 사용하고 있는 기기에서 접속하여 서버 확인이 가능하다. ​ 생성된 프로젝트의 기본사항 파악 Terminal창에 vue create myproject 명령어 입력 후 이와 같은 창이 뜨는데 default로 설정하고 enter하고, 프로젝트를 시작한다. ​ 프로젝트 생성이 완료되면 (router 미설치) 이와 같은 폴더 구조를 확인할 수 있다. ​ vue add router를 한다면. 두번의 묻는데 전부 y 로 처리(router와 history mode 설정을 묻는 것) ​ ","date":"2020-07-17","objectID":"/vue_setting/:1:0","tags":["Vue"],"title":"Vue_setting","uri":"/vue_setting/"},{"categories":["Vue"],"content":"여기서 잠깐✋ ","date":"2020-07-17","objectID":"/vue_setting/:1:1","tags":["Vue"],"title":"Vue_setting","uri":"/vue_setting/"},{"categories":["Vue"],"content":"1. VUE CLI 란? (공식문서) 간단히 vue-cli 는 기본 vue 개발 환경을 설정해주는 도구 여기서 CLI 란 ? 명령 줄 인터페이스(CLI, Command line interface) 또는 명령어 인터페이스는 텍스트 터미널을 통해 사용자와 컴퓨터가 상호 작용하는 방식. 즉, 작업 명령은 사용자가 컴퓨터 키보드 등을 통해 문자열의 형태로 입력하며, 컴퓨터로부터의 출력 역시 문자열의 형태로 주어진다. (위키백과) ​ ","date":"2020-07-17","objectID":"/vue_setting/:1:2","tags":["Vue"],"title":"Vue_setting","uri":"/vue_setting/"},{"categories":["Vue"],"content":"2. vue add router 필요한가? 라우팅은 URI에 따라 해당하는 정적파일을 내려주는 방식이다. 이를 브라우져에서 구현해야 하는것이 SPA 개발의 핵심 아이디어는 간단하다. 요청 URI에 따라 브라우져에서 돔을 변경하는 방식. 대부분의 경우 도움이 되는 기능이기 때문에 상당이 추천한다. (추가로 navbar? 도 생기니 더욱 추천) terminal에 vue add router 를 입력하면 history 모드를 사용하겠나고 묻는데 y 를 입력해주면 된다. ​ ","date":"2020-07-17","objectID":"/vue_setting/:1:3","tags":["Vue"],"title":"Vue_setting","uri":"/vue_setting/"},{"categories":["Vue"],"content":"3. vue add router 후 History Mode 설정은 왜 필요한가? vue router를 설치하게 되면 해시백 모드와 히스토리 모드 중 디폴트로 해시백 모드가 적용된다. URL 해시를 사용하여 전체 URL을 시뮬레이트하므로 URL이 변경될 때 페이지가 다시 로드 되지 않습니다. 해시를 제거하기 위해 라우터의 history 모드 를 사용할 수 있습니다. history.pushState API를 활용하여 페이지를 다시 로드하지 않고도 URL 탐색을 할 수 있습니다. (공식문서 설명..) 난 다른건 모르겠고 URL이 깔끔해 보이게되어 좋다. ","date":"2020-07-17","objectID":"/vue_setting/:1:4","tags":["Vue"],"title":"Vue_setting","uri":"/vue_setting/"},{"categories":["SW Expert Academy"],"content":"​ ","date":"2020-07-10","objectID":"/sw_20.07.10/:0:0","tags":["algorithm"],"title":"SW Expert Academy_D3 4676, 4615, 4579, 4522","uri":"/sw_20.07.10/"},{"categories":["SW Expert Academy"],"content":"D3_4676_늘어지는 소리 만들기 for T in range(int(input())): sent = list(input()) # wow H = int(input()) po = sorted(list(map(int, input().split()))) # 2 3 2 for i in range(H): a = po[i]+i sent.insert(a,'-') print('#{} {}'.format(T+1, ''.join(sent))) # 단순 산수로 해결 ​ ","date":"2020-07-10","objectID":"/sw_20.07.10/:0:1","tags":["algorithm"],"title":"SW Expert Academy_D3 4676, 4615, 4579, 4522","uri":"/sw_20.07.10/"},{"categories":["SW Expert Academy"],"content":"D3_4615_재미있는 오셀로 게임 ​ ","date":"2020-07-10","objectID":"/sw_20.07.10/:0:2","tags":["algorithm"],"title":"SW Expert Academy_D3 4676, 4615, 4579, 4522","uri":"/sw_20.07.10/"},{"categories":["SW Expert Academy"],"content":"D3_4579_세상의 모든 팰린드롬 2 for T in range(int(input())): arr = input() result = 'Exist' for i in range(len(arr) // 2): if arr[i] == '*' or arr[-1 - i] == '*': result = 'Exist' break if arr[i] != arr[-1 - i]: result = 'Not exist' break print(f'#{T+1} {result}') # *이 등장하기 전까지 대칭을 이루고 있다면 무조건 'Exist'이고, 만약 *가 없다면, 대칭인지 판별하면 된다. ​ ","date":"2020-07-10","objectID":"/sw_20.07.10/:0:3","tags":["algorithm"],"title":"SW Expert Academy_D3 4676, 4615, 4579, 4522","uri":"/sw_20.07.10/"},{"categories":["SW Expert Academy"],"content":"D3_4522_세상의 모든 팰린드롬 for T in range(int(input())): arr = list(map(str, input())) result = 'Exist' for i in range(len(arr)): if arr[i] == '?': arr[i] = arr[-i - 1] if arr != arr[::-1]: result = 'Not exist' print(f'#{T+1} {result}') # ?가 등장하면 무조건 해당 index의 반대쪽이 대칭을 이룬다고 생각할 수 있으니까, ?의 index 반대쪽을 동일하게 변경해주고 대칭인지 판별하면 된다. ​ ","date":"2020-07-10","objectID":"/sw_20.07.10/:0:4","tags":["algorithm"],"title":"SW Expert Academy_D3 4676, 4615, 4579, 4522","uri":"/sw_20.07.10/"},{"categories":["Django"],"content":"CRUD? CRUD는 대부분의 컴퓨터 소프트웨어가 가지는 기본적인 데이터 처리 기능인 Create(생성), Read(읽기), Update(갱신), Delete(삭제)를 묶어서 일컫는 말이다. 사용자 인터페이스가 갖추어야 할 기능(정보의 참조/검색/갱신)을 구현해보자 ","date":"2020-07-10","objectID":"/django_02_crud_c/:1:0","tags":["Django"],"title":"Django_02_CRUD(02)","uri":"/django_02_crud_c/"},{"categories":["SW Expert Academy"],"content":"​ ","date":"2020-07-08","objectID":"/sw_20.07.08/:0:0","tags":["algorithm"],"title":"SW Expert Academy_D3 5162, 4789, 4751, 4698","uri":"/sw_20.07.08/"},{"categories":["SW Expert Academy"],"content":"D3_5162_두가지 빵의 딜레마 for T in range(int(input())): A, B, C = map(int, input().split()) N = min(A, B) print(\"#{} {}\".format(T+1, int(C/N))) # 단순 산수로 해결 ​ ","date":"2020-07-08","objectID":"/sw_20.07.08/:0:1","tags":["algorithm"],"title":"SW Expert Academy_D3 5162, 4789, 4751, 4698","uri":"/sw_20.07.08/"},{"categories":["SW Expert Academy"],"content":"D3_4789_성공적인 공연 기획 for T in range(int(input())): P = list(map(int, map(str, input()))) need = P[0] count = 0 for i in range(1, len(P)): if need \u003e= i: need += P[i] else: count += i - need need = i + P[i] print(f'#{T+1} {count}') # 문제를 이해하는 것이 Point였다. # 먼저 str로 input을 받아 개별 숫자로 나누고 바로 int 변경하여 인자를 받음. # # \"i번째 글자가 의미하는 바는 기립 박수를 하고 있는 사람이 i-1명 이상일 때 기립 박수를 하는 사람의 수\" # Test case3의 경우 (09) 9는 큰 의미 없이 2번째 글자임으로 기립박수를 하고 있는 사람이 1명일 이상일 때 기립박수를 친다. # 즉 index만 가지고 조건을 판단 하면 된다! ​ ","date":"2020-07-08","objectID":"/sw_20.07.08/:0:2","tags":["algorithm"],"title":"SW Expert Academy_D3 5162, 4789, 4751, 4698","uri":"/sw_20.07.08/"},{"categories":["SW Expert Academy"],"content":"D3_4751_다솔이의 다이아몬드 장식 T= int(input()) for tc in range(T): text = input() n= len(text) for i in range(5): if i == 0 : print('..#.'*n+'.') elif i == 1 : print('.#'*(n*2)+'.') elif i == 2 : print('#',end='') for a in range(len(text)) : print(('.{}.#'.format(text[a])), end=\"\") elif i == 3 : print() print('.#'*(n*2)+'.') elif i == 4 : print('..#.' * n + '.') # 단순 작업이었으나, 반복되는 곳의 기준을 어디로 할 것인가를 잘 지정해야 함. ​ ","date":"2020-07-08","objectID":"/sw_20.07.08/:0:3","tags":["algorithm"],"title":"SW Expert Academy_D3 5162, 4789, 4751, 4698","uri":"/sw_20.07.08/"},{"categories":["SW Expert Academy"],"content":"D3_4698_테네스의 특별한 소수 ","date":"2020-07-08","objectID":"/sw_20.07.08/:0:4","tags":["algorithm"],"title":"SW Expert Academy_D3 5162, 4789, 4751, 4698","uri":"/sw_20.07.08/"},{"categories":["SW Expert Academy"],"content":"​ ","date":"2020-07-01","objectID":"/sw_20.07.01/:0:0","tags":["algorithm"],"title":"SW Expert Academy_D3 5431, 5356, 5293, 5215","uri":"/sw_20.07.01/"},{"categories":["SW Expert Academy"],"content":"D3_5431_민석이의 과제 체크하기 for T in range(int(input())): N, K = map(int, input().split()) P = list(map(int, input().split())) result = [] for i in range(1,N+1): if i not in P: result.append(str(i)) print('#{} {}'.format(T+1, ' '.join(result))) # 제출한 수강생 리스트를 만들고(P) 이를 for로 돌리며 검증 ​ ","date":"2020-07-01","objectID":"/sw_20.07.01/:0:1","tags":["algorithm"],"title":"SW Expert Academy_D3 5431, 5356, 5293, 5215","uri":"/sw_20.07.01/"},{"categories":["SW Expert Academy"],"content":"D3_5356_의석이의 세로로 말해요 for T in range(int(input())): sent = [list(str(input())) for _ in range(5)] #입력받은 요소의 길이를 알아내야 한다. max = 0 for n in range(5): long = len(sent[n]) if long \u003e= max: max = long result = '' for i in range(max): for j in range(5): try: if sent[j][i] != \"\": result += sent[j][i] except IndexError: pass print(f'다시 풀이 #{T+1} {result}') # 입력받은 5개의 단어 중 가자 긴 단어의 길이를 저장하고(long) # long 길이 만큼 순회를 하면서 5개의 단어에 index로 접근하고 index값이 비어있지 않으면 result에 추가 ​ ","date":"2020-07-01","objectID":"/sw_20.07.01/:0:2","tags":["algorithm"],"title":"SW Expert Academy_D3 5431, 5356, 5293, 5215","uri":"/sw_20.07.01/"},{"categories":["SW Expert Academy"],"content":"D3_5293_이진 문자열 복원 for T in range(int(input())): A, B, C, D = map(int, input().split()) if B == 0 and C == 0 and A != 0 and D != 0: result = 'impossible' elif abs(B - C) \u003e 1: result = 'impossible' else: if B == 0 and C == 0: if A != 0: result = '0' * (A + 1) else: result = '1' * (D + 1) elif B \u003c C: result = '1' * D + '10' * C + '0' * A elif B \u003e C: result = '0' * A + '01' * B + '1' * D else: result = '0' * A + '01' * B + '1' * D + '0' print('#{} {}'.format(T+1, result)) # 하드코딩...ㅎㅎ ​ ","date":"2020-07-01","objectID":"/sw_20.07.01/:0:3","tags":["algorithm"],"title":"SW Expert Academy_D3 5431, 5356, 5293, 5215","uri":"/sw_20.07.01/"},{"categories":["SW Expert Academy"],"content":"D3_5215_햄버거 다이어트 for T in range(int(input())): N, maxKcal = map(int, input().split()) Sum = [0] * (10**4 + 1) for _ in range(N): Point, Kcal = map(int, input().split()) for idx in range(maxKcal, Kcal + 1, -1): if Sum[idx] \u003c Sum[idx - Kcal] + Point: Sum[idx] = Sum[idx - Kcal] + Point print(f'#{T+1} {Sum[maxKcal]}') ","date":"2020-07-01","objectID":"/sw_20.07.01/:0:4","tags":["algorithm"],"title":"SW Expert Academy_D3 5431, 5356, 5293, 5215","uri":"/sw_20.07.01/"},{"categories":["Hugo"],"content":"​ 블로그를 만들면서… 최초 기술블로그를 제작하면서 바닥부터 모든 것을 스스로 만들어 보기로 결심하고 제작을 시작하지만, 결코 쉽지 않았다. 개인적으로 꼭 원했던 기능이었던 tag기능과 categories를 구현하지 못하면서… 결국 기존에 있는 라이브러리들을 활용하기로 한다. ​ **가장 많은 사용자가 존재하는 jekyll로 시작한다. ** ​ ","date":"2020-06-29","objectID":"/hugo_setting/:0:0","tags":["Hugo"],"title":"Hugo_setting stroy (feat.LoveTt 제작자)","uri":"/hugo_setting/"},{"categories":["Hugo"],"content":"jekyll 기초 설정 Jekyll : Jekyll은 Ruby Gem으로 제공되며 템플릿과 템플릿의 구성요소, 인라인 코드, 마크다운과 같은 동적인 구성요소를 정적인 웹페이지로 만들어주는 파싱 엔진 ​ ","date":"2020-06-29","objectID":"/hugo_setting/:1:0","tags":["Hugo"],"title":"Hugo_setting stroy (feat.LoveTt 제작자)","uri":"/hugo_setting/"},{"categories":["Hugo"],"content":"jekyll 서버 구동 방법 # 공식 홈페이지 설명 ~$ gem install bundler jekyll # jekyll 구동을 위한 프로그램 설치 ~$ jekyll new MYBLOG # MYBLOG 라는 이름의 블로그 폴더 \u0026 기초틀 생성 ~$ cd MYBLOG # MYBLOG 폴더로 이동 ~/MYBLOG $ bundle exec jekyll serve # MYBLOG 서버 구동 # 이후 명령창에 Servuer address : http://127.0.0.1:4000/ 로 인터넷 접속하면 jekell의 디폴트 서버 모습이 보인다. 이게 다다. ​ 포스팅을 하면서 이 내용을 정리할 때쯤. 알 수 없는 치명적인 오류로 인해 작성했던 .md파일과 git 서버가 폭파했다. 여러 방면으로 복구를 시도했지만, 모든 방법이 실패했고. 그리하여.. 난 jekyll을 떠나 Hugo로 이동하기로 했다. ​ ","date":"2020-06-29","objectID":"/hugo_setting/:1:1","tags":["Hugo"],"title":"Hugo_setting stroy (feat.LoveTt 제작자)","uri":"/hugo_setting/"},{"categories":["Hugo"],"content":"Hugo ","date":"2020-06-29","objectID":"/hugo_setting/:2:0","tags":["Hugo"],"title":"Hugo_setting stroy (feat.LoveTt 제작자)","uri":"/hugo_setting/"},{"categories":["Hugo"],"content":"Why Hugo? #1. window를 공식 지원한다. ( Jekyll은 window를 공식적으로 지원하진 않는다. ) → Hugo가 Jekyll 보다 window환경에서 안정적이지 않을까? #2. The world’s fastest framework for building websites → 빠르다. Hugo로 블로그를 구축한다면 이를 git의 서버를 통해 배포한다. ​ ","date":"2020-06-29","objectID":"/hugo_setting/:2:1","tags":["Hugo"],"title":"Hugo_setting stroy (feat.LoveTt 제작자)","uri":"/hugo_setting/"},{"categories":["Hugo"],"content":"Hugo로 github.io 블로그 만들기 ","date":"2020-06-29","objectID":"/hugo_setting/:3:0","tags":["Hugo"],"title":"Hugo_setting stroy (feat.LoveTt 제작자)","uri":"/hugo_setting/"},{"categories":["Hugo"],"content":"1. Git, Hugo 설치 Git 설치란? Git_bash설치를 뜻한다. 링크를 타고 들어가 적절한 버전을 선택해 설치를 진행한다. ​ 👉 bash를 실행시키고 git --version을 입력해서 version 정보가 확인되면 정상 설치가 된 것이다. ​ Hugo 설치 (공식홈페이지의 Quick_Start 참고) ​ 👉 난 Hugo_release에서 최신버전을 다운받아 직접 설치했다. C:\\Hugo\\bin\\에 압축을 해제. window + Q로 검색창을 연 뒤 변수를 검색해서 시스템 환경 변수 편집에 들어간다. 아래의 환경 변수(N)를 클릭. 위쪽 박스에서 Path를 더블클릭한다. 새로 만들기를 클릭 후, 아까 압축을 풀었던 곳인 C:\\Hugo\\bin를 등록. 닫고 배경화면에서 bash 실행 후 hugo version을 입력해서 version 정보가 나오면 잘 설치가 된 것. ","date":"2020-06-29","objectID":"/hugo_setting/:3:1","tags":["Hugo"],"title":"Hugo_setting stroy (feat.LoveTt 제작자)","uri":"/hugo_setting/"},{"categories":["Hugo"],"content":"2. Hugo 블로그 구축하기 프로젝트를 구축할 폴더(혹은 장소)에서 bash를 실행 hugo new site \u003c프로젝트 이름\u003e # ex) hugo new site MyBlog → MyBlog라는 프로젝트 폴더를 생성. 휴고 사이트 생성 명령어\"\r휴고 사이트 생성 명령어\r 이때 생성된 폴더는 프로젝트폴더, root폴더, default폴더 등으로 불리며, 기본 구조는 이러하며, 먼저 테마를 설정해보자. 필자는 LoveIt 테마를 선택해 사용함. ​ Theme는 다운 → 적용의 2단계를 거친다. ​ ​ 1. 다운 먼저 LoveIt 테마 Git홈페이지에 가 clone을 떠온다. 프로젝트폴더에서 bash를 실행 후 cd theme # theme 폴더로 이동 git clone https://github.com/dillonzq/LoveIt.git # LoveIt 테마 클론(다운) ​ ​ 2. 적용 프로젝트폴더속 config.toml파일을 열어 수정을 하여 적용하는데 적용 방법은 각 Theme의 git_site에 정리 되어 있다. LoveIt theme의 경우 아래와 같은 방법으로 설정하며 추가 버전이 release되어 있어 이를 적용하는 방법은 공식 문서를 읽어보며 custom한다. baseURL = \"http://example.org/\" # [en, zh-cn, fr, ...] determines default content language defaultContentLanguage = \"en\" # language code languageCode = \"en\" # Change the default theme to be use when building the site with Hugo theme = \"LoveIt\" ... ... ","date":"2020-06-29","objectID":"/hugo_setting/:3:2","tags":["Hugo"],"title":"Hugo_setting stroy (feat.LoveTt 제작자)","uri":"/hugo_setting/"},{"categories":["Django"],"content":"​ Django 개발환경준비 편리함을 추구하기 위해 AWS Cloud9을 사용하여 진행 https://ide.cs50.io/ 주소로 접속하면 진행이 가능하며, 진행을 위해선 Git 아이디가 있어야 한다. Git? : 버전 관리 시스템이며 Git은 소프트웨어를 개발하는 기업의 핵심 자산인 소스코드를 효과적으로 관리할 수 있게 해주는 무료, 공개소프트웨어. git에 대한 내용은 따로 정리해보도록 한다. 로그인까지 마치면 이제 Django 개발 준비 끝. C9 접속 화면(블랙테마 적용되어 있음)\"\rC9 접속 화면(블랙테마 적용되어 있음)\r ​ ","date":"2020-06-25","objectID":"/django_02_crud_setting/:0:0","tags":["Django"],"title":"Django_02_CRUD(01)","uri":"/django_02_crud_setting/"},{"categories":["Django"],"content":"1. 프로젝트 시작하기 django-admin startproject blog # blog라는 django프로젝트를 시작 cd blog # blog 폴더로 이동 python manage.py startapp articles # articles라는 앱(기능폴더)을 생성 # Point🎈 # 1. blog라는 이름은 내가 원하는 프로젝트 명으로 변경이 가능 # 2. cd blog → django의 명령어는 모두 manage.py가 존재하는 폴더안에서 실행해야 함, 이를 위한 이동 구조를 만들었으니 구조들을 연결할 setting을 해주어야 한다. ​ # settings.py # 웹 사용자를 특정하는 부분 ALLOWED_HOSTS = ['*'] # '*' == 모든 사용자가 입장가능 # 프로젝트에 사용되는 APP 및 기능들을 등록 INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', \"articles\", # 등록 ] ... ... LANGUAGE_CODE = 'ko-KR' TIME_ZONE = 'Asia/Seoul' 가장 기본이 되는 setting 완료 ​ # 기본 설정이 잘 되었는지 확인할 서버구동 python manage.py runserver 8080 # 8080은 생략가능 ​ 여기까지 진행한 것을 보통(로켓을 띄운다.)고 한다.\"\r여기까지 진행한 것을 보통(로켓을 띄운다.)고 한다.\r 이와 같은 화면이 나오면 Basic Setting 완료 ","date":"2020-06-25","objectID":"/django_02_crud_setting/:0:1","tags":["Django"],"title":"Django_02_CRUD(01)","uri":"/django_02_crud_setting/"},{"categories":["SW Expert Academy"],"content":"​ ","date":"2020-06-25","objectID":"/sw_20.06.25/:0:0","tags":["algorithm"],"title":"SW Expert Academy_D3 5948, 5789, 5688, 5549","uri":"/sw_20.06.25/"},{"categories":["SW Expert Academy"],"content":"D3_5948_새샘이의 7-3-5 게임 for T in range(int(input())): N = list(map(int, input().split())) result = set() for i in range(5): for j in range(i+1, 6): for x in range(j+1, 7): result.add(N[i]+N[j]+N[x]) result = list(result) result.sort() print('#{} {}'.format(T+1, result[-5])) # 3수의 합을 정리하는데 set으로 중복을 제거하는 방법으로 result set을 정리 # set은 순서가 없기 때문에 result를 다시 list로 정리하고 .sort를 이용해 순서대로 나열 후 출력 ​ ","date":"2020-06-25","objectID":"/sw_20.06.25/:0:1","tags":["algorithm"],"title":"SW Expert Academy_D3 5948, 5789, 5688, 5549","uri":"/sw_20.06.25/"},{"categories":["SW Expert Academy"],"content":"D3_5789_현주의 상자 바꾸기 for T in range(int(input())): N, Q = map(int, input().split()) arr = ['0' for _ in range(N)] for i in range(1, Q+1): L, R = map(int, input().split()) for _ in range(L-1, R): arr[_] = str(i) print('#{} {}'.format(T+1, ' '.join(arr))) # arr이라는 0이 적힌 상자 리스트를 생성 # index L~R에 _의 숫자를 입력(출력하기 쉽게 str형태로 입력) # join을 써서 str형태의 list인자를 붙여서 출력 ​ ","date":"2020-06-25","objectID":"/sw_20.06.25/:0:2","tags":["algorithm"],"title":"SW Expert Academy_D3 5948, 5789, 5688, 5549","uri":"/sw_20.06.25/"},{"categories":["SW Expert Academy"],"content":"D3_5688_세제곱근을 찾아라 for T in range(int(input())): N = round(int(input())**(1/3), 2) print(\"#{} {}\".format(T+1, int(N) if int(N) == N else -1)) # 출력 방식에 조건을 넣어서 시도해봄 ​ ","date":"2020-06-25","objectID":"/sw_20.06.25/:0:3","tags":["algorithm"],"title":"SW Expert Academy_D3 5948, 5789, 5688, 5549","uri":"/sw_20.06.25/"},{"categories":["SW Expert Academy"],"content":"D3_5549_홀수일까 짝수일까 for T in range(int(input())): N = int(input()) print('#{} {}'.format(T+1, 'Even' if N%2 == 0 else 'Odd')) # 출력 방식에 조건을 넣어서 시도해봄 ","date":"2020-06-25","objectID":"/sw_20.06.25/:0:4","tags":["algorithm"],"title":"SW Expert Academy_D3 5948, 5789, 5688, 5549","uri":"/sw_20.06.25/"},{"categories":["Django"],"content":"​ Web ? 월드 와이드 웹(World Wide Web)이란 인터넷에 연결된 사용자들이 서로의 정보를 공유할 수 있는 공간을 의미하며, 줄여서 WWW나 W3라고도 부르며, 간단히 웹(Web)이라고 가장 많이 불린다. 인터넷과 같은 의미로 많이 사용되고 있지만, 정확히 말해 웹은 인터넷상의 인기 있는 하나의 서비스일 뿐. Web의 작동방식을 간단히 설명하자면, 요청과 응답. 사용자는 서버에 어떠한 요구사항을 요청하고 서버는 이에 따라 처리결과를 응답한다. 예를들어 사용자가 Login 버튼을 누른 행위는 user가 서버에 로그인 하고 싶다고 요청한 것이며, 서버는 로그인 창을 띄움으로서 user가 로그인할 수 있게 응답한 것입니다. ","date":"2020-06-23","objectID":"/django_01/:0:0","tags":["Django"],"title":"Django_01_basic","uri":"/django_01/"},{"categories":["Django"],"content":"web Protocal 요청에 대한 응답을 처리할 서버를 만드는 것이 Django ​ Django ? python 기반의 web framework ​ framework? : web 개발시 어려움을 줄이는데 목적이 있는 기능을 통칭 ​ ","date":"2020-06-23","objectID":"/django_01/:1:0","tags":["Django"],"title":"Django_01_basic","uri":"/django_01/"},{"categories":["Django"],"content":"Django의 개발 방식 (MTV) Django의 개발 방식은 MTV(Model, Template, View) 패턴을 따른다. Model: data를 구성 Template: 사용자(User)에서 보여주는 화면을 구성 (HTML로 구현) View: data 처리 및 전달 ​ ","date":"2020-06-23","objectID":"/django_01/:2:0","tags":["Django"],"title":"Django_01_basic","uri":"/django_01/"},{"categories":["Django"],"content":"Django_basic 장고는 하나의 프로젝트 단위로 web을 개발한다. 프로젝트 안에는 여러 app별로 기능을 나누어 구성한다. ​ ex) 회원들 계정을 관리하는 app (accounts) / 게시판을 관리하는 app (articles) 등등 요청은 Url로 접수하고 (ex. 게시판으로 이동하고 싶어 게시판 버튼을 클릭) 접수된 내용을 View에서 처리 (ex. 게시판버튼을 클릭하면 게시판 화면을 사용자에게 보여주게 구성) 처리한 화면을 Template로 꾸며(구성해) 사용자에게 응답 ","date":"2020-06-23","objectID":"/django_01/:3:0","tags":["Django"],"title":"Django_01_basic","uri":"/django_01/"},{"categories":["SW Expert Academy"],"content":"​ ","date":"2020-06-23","objectID":"/sw_20.06.23/:0:0","tags":["algorithm"],"title":"SW Expert Academy_D3 6190, 6057, 6019, 5986","uri":"/sw_20.06.23/"},{"categories":["SW Expert Academy"],"content":"D3_6190_정곤이의 단조 증가하는 수 for T in range(int(input())): N = int(input()) L = list(map(int, input().split())) result = -1 for i in range(N-1): for j in range(i+1, N): num = str(L[i]*L[j]) if len(num) \u003e 1 and '0' not in num and result \u003c int(num) and list(num) == sorted(num): result = int(num) print(f'#{T+1} {result}') # 단조증가하는 지를 검증하는 방법으로 sorted를 썼는데 이를 활용하기 위해서는 str형태로 변경해야 검증이 가능하다. # 한자리 숫자는 단조증가하는 수가 아니다. # 중간에 0이 있다면 볼 필요도 없이 단조증가수가 아니기 때문에 처리 속도 증가가 가능하다. ​ ","date":"2020-06-23","objectID":"/sw_20.06.23/:0:1","tags":["algorithm"],"title":"SW Expert Academy_D3 6190, 6057, 6019, 5986","uri":"/sw_20.06.23/"},{"categories":["SW Expert Academy"],"content":"D3_6057_그래프의 삼각형 for T in range(int(input())): N, M = map(int,input().split()) # N: 정점, M: 간선 arr = [[0]*(N+1) for n in range(N+1)] # part1 for _ in range(M): X, Y = map(int,input().split()) arr[X][Y] = 1 arr[Y][X] = 1 # part2 result = 0 for i in range(1, N+1): for j in range(i+1, N+1): if arr[i][j] == 1: for r in range(j+1, N+1): if arr[j][r] == 1 and arr[r][i] == 1: result += 1 print(f\"#{T+1} {result}\") # part1에서 삼각형의 정점의 정보를 담는 arr을 만들고 # part2에서 만들어진 배열을 돌며 정점의 정보를 발견(1)하면 해당 정점을 기준으로 삼각형이 되는지 검증 ​ ","date":"2020-06-23","objectID":"/sw_20.06.23/:0:2","tags":["algorithm"],"title":"SW Expert Academy_D3 6190, 6057, 6019, 5986","uri":"/sw_20.06.23/"},{"categories":["SW Expert Academy"],"content":"D3_6019_기차 사이의 파리 for T in range(int(input())): D, A, B, F = map(int,input().split()) t = D / (B+A) print('#{} {}'.format(T+1, F*t)) #단순 수학으로 해결 ​ ","date":"2020-06-23","objectID":"/sw_20.06.23/:0:3","tags":["algorithm"],"title":"SW Expert Academy_D3 6190, 6057, 6019, 5986","uri":"/sw_20.06.23/"},{"categories":["SW Expert Academy"],"content":"D3_5986_새샘이와 세 소수 for T in range(int(input())): N = int(input()) # part1 PN = set() for i in range(2, N+1): for j in range(2, i+1): if i % j == 0: break PN.add(j) PN =list(PN) pn = PN.sort(reverse=True) # part2 count = 0 for i in range(len(PN)): for j in range(i,len(PN)): for k in range(j,len(PN)): if N == PN[i]+PN[j]+PN[k]: count += 1 print('#{} {}'.format(T+1, count)) # part1에서 소수 리스트를 만들고(1과 자기 자신만을 약수로 가지는 수 리스트) # part2에서 세 소수의 합으로 나타낼 경우의 수를 종합. ","date":"2020-06-23","objectID":"/sw_20.06.23/:0:4","tags":["algorithm"],"title":"SW Expert Academy_D3 6190, 6057, 6019, 5986","uri":"/sw_20.06.23/"},{"categories":["SW Expert Academy"],"content":"​ ","date":"2020-06-20","objectID":"/sw_20.06.20/:0:0","tags":["algorithm"],"title":"SW Expert Academy_D3 9700, 7675, 6692, 6485","uri":"/sw_20.06.20/"},{"categories":["SW Expert Academy"],"content":"D3_9700_USB 꽂기의 미스터리 for T in range(int(input())): p, q = map(float, input().split()) s1 = (1-p)*q s2 = p*(1-q)*q if s1 \u003c s2: print(f'#{T+1} YES') else: print(f'#{T+1} NO') # 단순 수학을 통해 해결. ​ ","date":"2020-06-20","objectID":"/sw_20.06.20/:0:1","tags":["algorithm"],"title":"SW Expert Academy_D3 9700, 7675, 6692, 6485","uri":"/sw_20.06.20/"},{"categories":["SW Expert Academy"],"content":"D3_7675_통역사 성경이 for T in range(int(input())): N = int(input()) sent = input() sent = sent.replace('.', ' @').replace('!', ' @').replace('?', ' @').split() #print(sent) result = \"\" count = 0 for i in sent: if i.isalpha() and i == i.capitalize(): count += 1 if i == '@': result += str(count) + ' ' count = 0 print(\"#{} {}\".format(T+1, result)) # 주어지는 문장을 띄어쓰기를 기준으로 나누기 위해 .split()을 사용하고 # 문제에서 주어진 `이름`의 조건이 `첫 알파벳이 대문자이고 나머진 소문자`이기 때문에 # 문자로만 이루어져있는 것인지 .isalpha()로 검증 (VS .isdigit() 주어진 문자열이 숫자인지 검증) # `이름`의 조건이 맞는지 .capitalize()로 검증 # 추가 공부 내용 # upper - 주어진 문자열에서 모든 알파벳들을 대문자로 변환시킨다. # capitalize - 주어진 문자열에서 맨 첫 글자를 대문자로 변환하고 나머지는 소문자로 변환시킨다. # title - 주어진 문자열에서 알파벳 외의 문자(숫자, 특수기호, 띄어쓰기 등)로 나누어져 있는 영단어들의 첫 글자를 모두 대문자로 변환시킨다. # .isalpha()와 .capitalize()를 알고나면 간단해지는 문제. ​ ","date":"2020-06-20","objectID":"/sw_20.06.20/:0:2","tags":["algorithm"],"title":"SW Expert Academy_D3 9700, 7675, 6692, 6485","uri":"/sw_20.06.20/"},{"categories":["SW Expert Academy"],"content":"D3_6692_다솔이의 월급 상자 for T in range(int(input())): tc = int(input()) result = 0 for _ in range(tc): P, X = map(float, input().split()) result += P*X print(f'#{T+1} {result}') # input을 float형으로 받으면서 단순 수학을 사용해 해결 ​ ","date":"2020-06-20","objectID":"/sw_20.06.20/:0:3","tags":["algorithm"],"title":"SW Expert Academy_D3 9700, 7675, 6692, 6485","uri":"/sw_20.06.20/"},{"categories":["SW Expert Academy"],"content":"D3_6485_삼성시의 버스 노선 for T in range(int(input())): info = [0]*5001 for N in range(int(input())): st, la = map(int, input().split()) for x in range(st, la+1): info[x] +=1 station = [] for P in range(int(input())): station.append(str(info[int(input())])) print('#{} {}'.format(T+1, ' '.join(station))) # info로 정류장의 index를 기록(중복되는 위치를 표기하기 위해 +1 씩 진행) # P개의 버스 정류장을 확인하는데 저장되어있는 info의 정류장 정보를 가져와서 station리스트에 기록 # 주어진 문제에서 만약 범위?를 알려준다면 그만큼의 저장 리스트를 생성하는 것이 빠르다. # 예를 들어 info = [] 보다 info = [0]*5001 로 설정해 사용하는 것이 더 빠른 실행시간을 보여준다. ","date":"2020-06-20","objectID":"/sw_20.06.20/:0:4","tags":["algorithm"],"title":"SW Expert Academy_D3 9700, 7675, 6692, 6485","uri":"/sw_20.06.20/"}]
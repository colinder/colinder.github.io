<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>면접대비 - Tag - </title>
        <link>https://colinder.github.io/tags/%EB%A9%B4%EC%A0%91%EB%8C%80%EB%B9%84/</link>
        <description>면접대비 - Tag - </description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 03 Jan 2024 13:32:55 &#43;0900</lastBuildDate><atom:link href="https://colinder.github.io/tags/%EB%A9%B4%EC%A0%91%EB%8C%80%EB%B9%84/" rel="self" type="application/rss+xml" /><item>
    <title>what is Abstraction(추상화)?</title>
    <link>https://colinder.github.io/abstraction/</link>
    <pubDate>Wed, 03 Jan 2024 13:32:55 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/abstraction/</guid>
    <description><![CDATA[​
추상화 &amp; 구체화  개발 미팅을 하다보면 자주 듣게 되었는데, 정확한 정의와 의미를 알기 위해 정리합니다.
 ​
​
추상화 추상화는 복잡한 시스템, 객체 또는 개념을 단순화하여 핵심 기능에 집중하고 불필요한 세부 사항을 숨기는 프로세스입니다. 이는 문제를 이해하기 쉽게 만들고, 핵심 개념에 집중하여 설계를 간소화하며, 재사용성을 높이는 데 도움이 됩니다.
프로그래밍에서 추상화는 여러 수준에서 발생할 수 있습니다:
 데이터 추상화: 데이터를 간소화하거나 숨기는 것으로, 특정 데이터 유형의 세부 정보를 숨기고 핵심 데이터만 표시하는 것을 의미합니다.]]></description>
</item><item>
    <title>Time Complexity 시간복잡도</title>
    <link>https://colinder.github.io/time_complexity/</link>
    <pubDate>Tue, 17 Oct 2023 12:24:58 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/time_complexity/</guid>
    <description><![CDATA[​
Time Complexity (시간 복잡도)  효율적인 알고리즘 구성을 위해 항상 신경써야하는 시간 복잡도.
그리고 시간 복잡도를 표기하는 방법인 Big-O(빅-오) 표기법에 대해 정리합니다.
 ​
​
시간 복잡도  위키백과에 따르면 시간복잡도는 계산복잡도 이론에서 문제를 해결하는데 걸리는 시간과 입력의 함수 관계를 가리킨다. 또 컴퓨터과학에서 알고리즘의 시간복잡도는 입력을 나타내는 문자열 길이의 함수로서 작동하는 알고리즘을 취해 시간을 정량화하는 것인데, 간단히 input 후 연산이 진행되고 output을 반환하는데 시간이 얼마나 걸리는가?를 계산한 값입니다. 조금 더 간단하게는 알고리즘의 수행시간입니다.]]></description>
</item><item>
    <title>localStorage vs sessionStorage</title>
    <link>https://colinder.github.io/localvssession_storage/</link>
    <pubDate>Wed, 23 Feb 2022 14:32:36 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/localvssession_storage/</guid>
    <description><![CDATA[​
Local Storage와 Session Storage의 차이 를 알아보기 전에
​
​
 &lsquo;Storage(web storage)&lsquo;란 무엇인지 우선 알아봅시다.  HTML5에서 등장한 웹의 데이터를 클라이언트에 저장할 수 있는 기능
 인터넷상의 통신을 하는데 어떤 자료를 가지고 있어야 한다거나, 나의 정보(유저정보)를 관리하는 등의 데이터 관리를 위한 저장소 기능. 그리고 storage는 두 가지 종류가 존재
​
​
 Local Storage와 Session Storage   Local storage
origin(요청이 시작된 서버를 나타내는 URL)이 같을 경우, 여러 탭과 브라우저 창에서 공유되는 저장소.]]></description>
</item><item>
    <title>Process VS Thread</title>
    <link>https://colinder.github.io/processvsthread/</link>
    <pubDate>Tue, 01 Dec 2020 13:40:25 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/processvsthread/</guid>
    <description><![CDATA[​
Process VS Thread  면접 질문에서 가장 많이 들어본 이야기라고 친구들이 이야기 해줬습니다. 근데 전 아직 자신있게 설명할 정도로 알지 못하기에 알아봅시다!
 ​
​
프로그램(Program)란 무엇인지 우선 알아봅시다. 소프트웨어의 한가지로, 어떤 문제를 해결하기 위하여 그 처리 방법과 순서(a.k.a ALGORITHM)를 기술하여 컴퓨터에 주어지는 일련의 명령문 집합체를 뜻합니다. 쉽게 말해, “어떤 작업을 위해 실행할 수 있는 파일”을 뜻합니다. 그리고 그 프로그램을 실행 시키는 주체를 인스턴스라고도 표현합니다.
예들 들어, Excel.exe, kakaotalk.exe 등과 같이 어떤 작업을 위해 실행할 수 있는 (설치 등)파일을 생각해 볼 수 있습니다.]]></description>
</item><item>
    <title>HTTP VS HTTPS</title>
    <link>https://colinder.github.io/httpvshttps/</link>
    <pubDate>Tue, 24 Nov 2020 11:28:42 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/httpvshttps/</guid>
    <description><![CDATA[​
HTTP vs HTTPS  웹개발 프로젝트를 하면서 인터넷 주소창(URL)을 자주 보게 되었습니다. 그러던 중 HTTP와 HTTPS의 차이를 발견하였고 단순히 HTTPS가 보안이 더 뛰어나서 적용하면 좋다. 정도의 개념만을 가지고 있다, &lsquo;한 번 차이를 깔끔히 정리하면 좋겠다.&rsquo; 싶어 정리해보겠습니다.
 ​
뜬금없이 URL란 무엇인지 우선 알아봅시다. 우리가 &lsquo;인터넷 주소창&rsquo;이라고 흔히 말하는 URL은 Uniform Resource Locator, 자원 위치 규약? 정도로 이해하면 좋을 것 같습니다.
우리가 사는 주소를 잠시 생각해봅시다. 먼저, 대한민국안에 서울특별시에 있는 강남구를 생각해보면 대한민국이라는 국가에서 서울특별시라는 위치로 그리고 그 안에 강남구로 범위를 좁히며 구체적인 위치를 생각할 수 있습니다.]]></description>
</item><item>
    <title>동기 &amp; 비동기 &amp; CallBack함수</title>
    <link>https://colinder.github.io/sync_async_callback/</link>
    <pubDate>Sun, 11 Oct 2020 21:47:43 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sync_async_callback/</guid>
    <description><![CDATA[​
동기(Synchronous)란? 어떤 작업을 실행했을 때, 그 작업이 끝나고 결과를 응답받은 뒤에 다음 함수를 실행하는 방식.
만약 응답값이 없다면, 무한정 기다려요. 즉, 응답을 받아야! 다음 실행이 되는 방식입니다.
ex) A실행 👉 A의 결과값 return 확인 👉 B실행
 ​
비동기(Asynchronous)란? 어떤 작업을 실행한 후 결과값을 기다리지 않고, 바로 다음 함수를 실행합니다.
ex) A실행 👉 B실행 👉 &hellip;
 ​
CallBack함수란? 비동기 처리결과로 반환되는 Callback함수
Callback함수는 특정함수에 매개변수로 전달된 함수를 의미합니다.]]></description>
</item><item>
    <title>what is AJAX(axios)?</title>
    <link>https://colinder.github.io/what_is_ajaxaxios_00/</link>
    <pubDate>Sun, 11 Oct 2020 21:25:51 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/what_is_ajaxaxios_00/</guid>
    <description><![CDATA[​
AJAX  세상에는 다양한 web서버가 있다.
그리고 모든 web은 &ldquo;요청&rdquo;과 &ldquo;응답&rdquo;으로 통신한다. 예를 들어..
 요청: &ldquo;이미지를 보여줘&rdquo;
응답: &ldquo;오키&rdquo; or &ldquo;싫어&rdquo;
 그렇다면, 이 web서버들과 통신 하려면 어떻게 해야 할까?
  대표적인 통신 방법을 AJAX라 한다. 이는 JavaScript의 라이브러리중 하나이며 Asynchronous Javascript And Xml(비동기식 자바스크립트와 xml)의 약자며, 자체가 하나의 특정한 기술을 말하는 것이 아니며, 함께 사용하는 기술의 묶음을 지칭하는 용어이다.
브라우저가 가지고있는 XMLHttpRequest 객체를 이용해서 전체 페이지를 새로 고치지 않고도 페이지의 일부만을 위한 데이터를 로드하는 기법 이며 Ajax를 한마디로 정의하자면 JavaScript를 사용한 비동기 통신, 클라이언트와 서버간에 XML 데이터를 주고받는 기술이라고 할 수 있겠습니다.]]></description>
</item></channel>
</rss>

<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>web - Tag - </title>
        <link>https://colinder.github.io/tags/web/</link>
        <description>web - Tag - </description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 10 Jun 2021 09:06:44 &#43;0900</lastBuildDate><atom:link href="https://colinder.github.io/tags/web/" rel="self" type="application/rss+xml" /><item>
    <title>form 태그</title>
    <link>https://colinder.github.io/form/</link>
    <pubDate>Thu, 10 Jun 2021 09:06:44 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/form/</guid>
    <description><![CDATA[​
form 태그의 고찰   form tag의 inline 요소 중 **&lsquo;action&rsquo;**과 &lsquo;onsubmit&rsquo;
1 2 3 4 5 6 7 8  &lt;form action=&#34;https://colinder.github.io/oh my god&#34; onsubmit=&#34;return test()&#34;&gt; &lt;input type=&#34;submit&#34; value=&#34;hahaha&#34;&gt; &lt;/form&gt; &lt;script&gt; function test(){ console.log(&#39;HHHI&#39;) } &lt;/script&gt;     submit 형태의 input을 클릭하게 되면, submit이 동작하면서 form의 &lsquo;onsubmit&rsquo;이 실행
  이후 에 form 태그의 &lsquo;action&rsquo;이 실행
즉, 두가지의 행동이 실행됩니다.
​
  비효율적이지만, 만약 위와 같은 코드에서 나중에 실행되는 action은 동작하지 않게 하고 싶다면.]]></description>
</item><item>
    <title>What is jQuery($)?</title>
    <link>https://colinder.github.io/what_is_jquery/</link>
    <pubDate>Thu, 29 Apr 2021 23:09:27 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/what_is_jquery/</guid>
    <description><![CDATA[​
웹 개발을 위해 인터넷의 레퍼런스들을 참고하다보면, 눈에 띄는 기호가 있습니다. $ 이게 뭘까요.? 검색해보니 제이쿼리라는데 많이 쓰이는 것 같습니다. 이에 알아봅시다!
​
jQuery란?  jQuery(제이쿼리)는 HTML의 클라이언트 사이드 조작(ex. 사용자가 어떤 버튼을 누른다. 사용자가 드랍박스에 선택지를 고른다.)을 단순화 하도록 설계된 크로스 플랫폼(여러 종류의 컴퓨터 플랫폼에서 동작할 수 있다는 것)의 자바스크립트 라이브러리다. 존 레식이 2006년 뉴욕 시 바캠프(Barcamp NYC)에서 공식적으로 소개하였다. 출처: 위키백과
최대한 구체적으로 알아보았는데요. 이 내용이 이해되었다면 다음으로 넘어갑시다.]]></description>
</item><item>
    <title>HTTP VS HTTPS</title>
    <link>https://colinder.github.io/httpvshttps/</link>
    <pubDate>Tue, 24 Nov 2020 11:28:42 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/httpvshttps/</guid>
    <description><![CDATA[​
HTTP vs HTTPS  웹개발 프로젝트를 하면서 인터넷 주소창(URL)을 자주 보게 되었습니다. 그러던 중 HTTP와 HTTPS의 차이를 발견하였고 단순히 HTTPS가 보안이 더 뛰어나서 적용하면 좋다. 정도의 개념만을 가지고 있다, &lsquo;한 번 차이를 깔끔히 정리하면 좋겠다.&rsquo; 싶어 정리해보겠습니다.
 ​
뜬금없이 URL란 무엇인지 우선 알아봅시다. 우리가 &lsquo;인터넷 주소창&rsquo;이라고 흔히 말하는 URL은 Uniform Resource Locator, 자원 위치 규약? 정도로 이해하면 좋을 것 같습니다.
우리가 사는 주소를 잠시 생각해봅시다. 먼저, 대한민국안에 서울특별시에 있는 강남구를 생각해보면 대한민국이라는 국가에서 서울특별시라는 위치로 그리고 그 안에 강남구로 범위를 좁히며 구체적인 위치를 생각할 수 있습니다.]]></description>
</item><item>
    <title>what is Domain</title>
    <link>https://colinder.github.io/what_is_domain/</link>
    <pubDate>Mon, 23 Nov 2020 12:47:53 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/what_is_domain/</guid>
    <description><![CDATA[​
도메인(domain)이란?  도메인의 뜻은 무엇일까요? 어찌저찌 설명할 순 있지만, 확신을 가지고 정확하게 답할 수 없었기에 정리해보겠습니다.
 ​
이번에도 뜬금없이 &lsquo;IP&rsquo; 란 무엇인지 우선 알아봅시다. IP는 Internet Protocol의 약자로 인터넷에 연결되어 있는 장치(컴퓨터, 스마트폰, 타블릿, 서버 등등)들은 각각의 장치를 식별할 수 있는 주소를 가지고 있는데 이를 ip라고 합니다. 간단히 각 장치(device)들의 주민등록번호라고 생각하면 이해하는데 도움이 됩니다.
ex) 125.209.222.141, 172.217.175.238
​
도메인(domain)이란? ip는 사람이 이해하고 기억하기 어렵기 때문에 쉽게 접근할 수 있게 각 ip에 고유한 이름을 부여할 수 있게 했는데, 이것을 도메인이라고 합니다.]]></description>
</item><item>
    <title>Interpreter VS Compiler_Language</title>
    <link>https://colinder.github.io/interpretervscompiler_language/</link>
    <pubDate>Wed, 18 Nov 2020 11:54:20 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/interpretervscompiler_language/</guid>
    <description><![CDATA[​
Interpreter VS Compiler_Language  web 개발을 하다보면 javascript를 공부하게 되고, javascript를 공부하다보면, 어려워지죠ㅎ.
더 어려워 지기 전에 기초적인 지식?인 인터프리터 언어와 컴파일 언어의 특징과 차이에 대하여 알아봅시다!
 ​
뜬금없이 프로그래밍 언어란 무엇인지 우선 알아봅시다. 컴퓨터는 이진수만 이해할 수 있습니다. 즉 컴퓨터는 우리가 사용하는 언어가 아닌 &lsquo;0&rsquo;, &lsquo;1&rsquo;만 이해합니다.
근데 이게 프로그래밍 언어랑 무슨 상관일까요? 상관이 아주 많습니다&hellip;ㅎ.. 프로그래밍 언어로 프로그램을 만들고 실행 할 때 우리는 &lsquo;0&rsquo;, &lsquo;1&rsquo; 같은 명령어로 코딩을 하지 않습니다.]]></description>
</item><item>
    <title>React-Native_google login</title>
    <link>https://colinder.github.io/react-native_googlelogin/</link>
    <pubDate>Thu, 29 Oct 2020 23:13:25 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/react-native_googlelogin/</guid>
    <description><![CDATA[​
React-Native google login  서비스를 개발하다보면 로그인 기능이 새삼 대단해보입니다. 신경쓸 것도 많고, 하지만 이런 수고를 sns로그인 기능으로 대신한다면 편의성이 많이 높아집니다. 하여 해보겠습니다.
 *google login을 하기 위해 firebase(모바일 및 웹 애플리케이션 개발 플랫폼)을 사용합니다.
  개발환경
  npm으로 진행
  react-native_cli (✨expo로 진행하지 않습니다.)
  android 기준
  함수형 컴포넌트로 진행 (✨ 클래스 컴포넌트로 진행하지 않습니다.)
  RN 버전 0.60이상에서 진행]]></description>
</item><item>
    <title>React-Native_navigation</title>
    <link>https://colinder.github.io/react-native_navigation/</link>
    <pubDate>Thu, 29 Oct 2020 21:24:52 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/react-native_navigation/</guid>
    <description><![CDATA[​
React-Native navigation  vue는 router를 사용해 화면을 이동합니다. 그렇다면, react-native는 어떻게 화면을 이동할까요?
바로 react-native navigation을 사용합니다. 어떻게 사용하는건지 기록합시다.
 공식홈페이지의 Getting started로 알아봅시다.
​
*새로운 프로젝트를 만들고 root폴더에서 진행.
  개발환경
  npm으로 진행
  react-native_cli (✨expo로 진행하지 않습니다.)
  android 기준
  함수형 컴포넌트로 진행 (✨ 클래스 컴포넌트로 진행하지 않습니다.)
  RN 버전 0.60이상에서 진행
  react-native-cli: 2.0.1
  react-native: 0.]]></description>
</item><item>
    <title>what is Cookie?</title>
    <link>https://colinder.github.io/what_is_cookie/</link>
    <pubDate>Mon, 19 Oct 2020 14:59:01 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/what_is_cookie/</guid>
    <description><![CDATA[​
개발을 하다보면, 유저의 로그인 기능을 고민하는 경우가 많습니다. 근데. 로그인 기능을 개발하다보면 꼭 마주치는 두 가지&hellip;
cookie와 session에 대하여 알아보겠습니다. 다만 그전에 cookie와 session이 생기게 된 배경에 대하여 같이 알아 보겠습니다.
​
HTTP 프로토콜의 특징 HTTP는 Connectionless(비연결성)하고, Stateless하다고 합니다.
Connectionless란, 클라이언트가 행위를 통해 서비스를 제공받기 위해 서버에 request(요청)를 하면 서버는 클라이언트의 요청값에 따라 클라이언트에게 response(응답)하게 됩니다. 이렇게 한번의 request — response의 결과로 클라이언트는 어플리케이션이 제공하는 서비스를 받게되면서, 서로의 접속을 끊게 된다는 특성입니다.]]></description>
</item><item>
    <title>what is DOM?</title>
    <link>https://colinder.github.io/what_is_dom/</link>
    <pubDate>Tue, 13 Oct 2020 14:26:29 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/what_is_dom/</guid>
    <description><![CDATA[​
Web을 공부하다보면 반드시 듣게 되는 단어. &ldquo;DOM&rdquo;
근데 이게 뭔지 감이 잘 안왔고 그래서 WIT블로그를 필사하며 공부한 내용을 추가해 정리했습니다.
​
DOM이란?  DOM(Document Object Model)은 웹 페이지에 대한 인터페이스입니다. 기본적으로 페이지의 콘텐츠 및 구조, 그리고 스타일을 읽고 조작할 수 있도록 API를 제공합니다. 먼저 DOM을 이해하기 전에 웹 페이지가 어떻게 빌드 되는지 알아보면 이해하는데 도움이 됩니다. 하여 알아봅시다!
 *인터페이스(interface): 서로 다른 두 개의 시스템, 장치 사이에서 정보나 신호를 주고받는 경우의 접점이나 경계면이다.]]></description>
</item><item>
    <title>동기 &amp; 비동기 &amp; CallBack함수</title>
    <link>https://colinder.github.io/sync_async_callback/</link>
    <pubDate>Sun, 11 Oct 2020 21:47:43 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sync_async_callback/</guid>
    <description><![CDATA[​
동기(Synchronous)란? 어떤 작업을 실행했을 때, 그 작업이 끝나고 결과를 응답받은 뒤에 다음 함수를 실행하는 방식.
만약 응답값이 없다면, 무한정 기다려요. 즉, 응답을 받아야! 다음 실행이 되는 방식입니다.
ex) A실행 👉 A의 결과값 return 확인 👉 B실행
 ​
비동기(Asynchronous)란? 어떤 작업을 실행한 후 결과값을 기다리지 않고, 바로 다음 함수를 실행합니다.
ex) A실행 👉 B실행 👉 &hellip;
 ​
CallBack함수란? 비동기 처리결과로 반환되는 Callback함수
Callback함수는 특정함수에 매개변수로 전달된 함수를 의미합니다.]]></description>
</item></channel>
</rss>

<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>algorithm - Tag - </title>
        <link>https://colinder.github.io/tags/algorithm/</link>
        <description>algorithm - Tag - </description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 16 Feb 2021 23:33:17 &#43;0900</lastBuildDate><atom:link href="https://colinder.github.io/tags/algorithm/" rel="self" type="application/rss+xml" /><item>
    <title>SW Expert Academy_D4 3143</title>
    <link>https://colinder.github.io/sw_21.02.16/</link>
    <pubDate>Tue, 16 Feb 2021 23:33:17 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sw_21.02.16/</guid>
    <description><![CDATA[​
D4_3143_가장 빠른 문자열 타이핑 1 2 3 4 5 6 7  for T in range(int(input())): A, B = input().split() result = len(A) - (A.count(B)*(len(B)-1)) print(f&#39;#{T+1} {result}&#39;) # 왜 D4 인가.   ​]]></description>
</item><item>
    <title>BEAKJOON 15649, 15650</title>
    <link>https://colinder.github.io/bj_21.02.09/</link>
    <pubDate>Tue, 09 Feb 2021 17:59:18 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/bj_21.02.09/</guid>
    <description><![CDATA[​
15649_N과 M (1) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  N, M = map(int, input().split()) def DFS(count): if count == M: print(*arr) return for i in range(N): if visited[i] == True: continue visited[i] = True arr.append(num_list[i]) DFS(count+1) arr.pop() visited[i] = False num_list = [i + 1 for i in range(N)] visited = [False] * N arr = [] DFS(0)   ​]]></description>
</item><item>
    <title>SW Expert Academy_D4 1258, 1249, 1238, 4261</title>
    <link>https://colinder.github.io/sw_21.02.02/</link>
    <pubDate>Tue, 02 Feb 2021 22:38:05 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sw_21.02.02/</guid>
    <description><![CDATA[​
D4_1258_행렬찾기 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  def check(x, y): dx, dy = 0, 0 while x + dx &lt; N and arr[x+dx][y]: dx += 1 while y + dy &lt; N and arr[x][y+dy]: dy += 1 result.append([dx*dy, dx, dy]) for i in range(x, x+dx): for j in range(y, y+dy): arr[i][j] = 0 for T in range(int(input())): N = int(input()) arr = [list(map(int, input().]]></description>
</item><item>
    <title>BEAKJOON 1021, 5430, 10866</title>
    <link>https://colinder.github.io/bj_21.01.31/</link>
    <pubDate>Sun, 31 Jan 2021 20:41:31 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/bj_21.01.31/</guid>
    <description><![CDATA[​
1021_회전하는 큐 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  import sys from collections import deque N, M = map(int, sys.stdin.readline().split()) arr = deque([i for i in range(1, N+1)]) poplist = deque(list(map(int, sys.stdin.readline().split()))) count = 0 while poplist: try: if arr[0] == poplist[0]: arr.popleft() poplist.popleft() L = len(arr) a = abs(arr.]]></description>
</item><item>
    <title>BEAKJOON 18258, 2164, 11866, 1966</title>
    <link>https://colinder.github.io/bj_21.01.28/</link>
    <pubDate>Thu, 28 Jan 2021 22:51:52 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/bj_21.01.28/</guid>
    <description><![CDATA[​
18258_큐 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  import sys from collections import deque # import time N = int(sys.stdin.readline().rstrip()) # start = time.time() # 시작 시간 저장 q = deque() for _ in range(N): command = sys.]]></description>
</item><item>
    <title>Python_Library</title>
    <link>https://colinder.github.io/python_library/</link>
    <pubDate>Thu, 28 Jan 2021 22:39:31 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/python_library/</guid>
    <description><![CDATA[​
Python Library   raise 예외(&lsquo;에러메시지&rsquo;) 1 2 3 4 5 6 7 8 9 10 11 12  # python에서는 의도적으로 오류를 일으킬 수 있는데 # 이를 해주는 것이 raise 메서드. try: x = 2 if x % 3 != 0: raise Exception(&#39;3의 배수가 아닙니다.&#39;) print(&#34;입력된 값&#34;, x) except Exception as e: print(&#39;예외가 발생했습니다.&#39;, e) &gt;&gt;&gt; 예외가 발생했습니다. 3의 배수가 아닙니다.   ​
  filter() VS find() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  ## filter(function, iterable) # 배열의 `모든 요소`에 접근하여 조건에 맞는 `값`을 찾는다.]]></description>
</item><item>
    <title>BEAKJOON 4949, 10828, 1874, 17298</title>
    <link>https://colinder.github.io/bj_21.01.27/</link>
    <pubDate>Wed, 27 Jan 2021 22:41:03 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/bj_21.01.27/</guid>
    <description><![CDATA[​
4949_균형잡힌 세상 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  import sys while True: text = sys.stdin.readline().rstrip() if text == &#34;.&#34;: break stack =[] result = &#34;yes&#34; for i in text: if i.isalpha() or i == &#34; &#34;: continue elif i == &#34;(&#34; or i == &#34;[&#34;: stack.]]></description>
</item><item>
    <title>BEAKJOON 1037, 1934, 2609, 5086</title>
    <link>https://colinder.github.io/bj_21.01.26/</link>
    <pubDate>Tue, 26 Jan 2021 18:11:31 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/bj_21.01.26/</guid>
    <description><![CDATA[​
1037_약수 1 2 3 4 5 6 7 8  import sys N = int(sys.stdin.readline().rstrip()) arr = list(map(int, sys.stdin.readline().split())) Max = max(arr) Min = min(arr) print(Max*Min)   ​
1934_최소공배수 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  import sys def GCD(a, b): while b != 0: m = a % b a = b b = m return a for T in range(int(sys.]]></description>
</item><item>
    <title>BEAKJOON 1931, 11399, 1541, 13305</title>
    <link>https://colinder.github.io/bj_21.01.25/</link>
    <pubDate>Mon, 25 Jan 2021 22:33:33 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/bj_21.01.25/</guid>
    <description><![CDATA[​
1931_회의실 배정 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  import sys N = int(sys.stdin.readline().rstrip()) arr = [list(map(int, sys.stdin.readline().split())) for _ in range(N)] schedule = sorted(arr, key=lambda x: (x[1], x[0])) count, end = 0, 0 for s, f in schedule: if s &gt;= end: count += 1 end = f print(count) # 왠지 정렬을 잘하면 계산이 쉬울 것 같아서.]]></description>
</item><item>
    <title>SW Expert Academy_D4 1226, 1227, 1231, 5643</title>
    <link>https://colinder.github.io/sw_21.01.21/</link>
    <pubDate>Thu, 21 Jan 2021 22:32:25 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sw_21.01.21/</guid>
    <description><![CDATA[​
D4_1226_미로1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  dx = [0,1, 0, -1] dy = [1,0, -1, 0 ] def IsSafe(x, y): if 0&lt;= x &lt; 16 and 0 &lt;= y &lt; 16: return True def DFS(x, y): global result visited[x][y] = 1 if arr[x][y] == 3: result = 1 for i in range(4): nx = x + dx[i] ny = y + dy[i] if IsSafe(nx, ny) and visited[nx][ny] == 0 and arr[nx][ny] !]]></description>
</item></channel>
</rss>

<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Django - Tag - </title>
        <link>https://colinder.github.io/tags/django/</link>
        <description>Django - Tag - </description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 09 Oct 2021 14:49:10 &#43;0900</lastBuildDate><atom:link href="https://colinder.github.io/tags/django/" rel="self" type="application/rss+xml" /><item>
    <title>Django_11_CustomUserhotfix</title>
    <link>https://colinder.github.io/django_11_customuserhotfix/</link>
    <pubDate>Sat, 09 Oct 2021 14:49:10 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_11_customuserhotfix/</guid>
    <description><![CDATA[​
Django Foreign Key constraint failed [ 주의! 본 포스팅은 내용이 정확하지 않을 수 있습니다. 수정할 부분은 피드백해주시면 감사드리겠습니다.]
문제는 Custom User Model 을 생성하면서 생긴 user_user 테이블과 기존에 python manage.py createsuperuser 명령어로 어드민 계정이 저장된 auth_user 테이블의 상속문제? 때문에 에러가 발생.
Custom User Model 을 사용할 때 settings.py 에 AUTH_USER_MODEL = '내가만든app이름.User모델' 을 추가하게 되는데 기존의 auth_user 테이블 대신 새로운 user_user 모델을 사용하겠다는 뜻.
그런데 나는 기존에 크롤러 데이터를 확인하기위해 auth_user 에 이미 admin 계정이 하나 생성되어있었던 상황.]]></description>
</item><item>
    <title>Django_10_CustomAuthUser_AbstractUser</title>
    <link>https://colinder.github.io/django_10_customauthuser_abstractuser/</link>
    <pubDate>Fri, 08 Oct 2021 10:17:53 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_10_customauthuser_abstractuser/</guid>
    <description><![CDATA[​
Django AbstractUser  이전에 AbstractBaseUser를 사용한 커스텀 사용자 인증 테이블을 구성해보았습니다. 해당 내용에 이어서 AbstractUser로 커스텀 사용자 인증 테이블을 구성해보고 createsuperuser 명령어 입력시, 관리자 계정이 커스텀한 테이블에 생성되게 해보겠습니다.
 ​
AbstractUser을 상속받아 커스텀을 진행  우선 AbstractUser는 Django에서 기본으로 제공해주는 사용자 인증 테이블의 요소를 그대로 가져와 사용하기 때문에 그 요소들은 어떤 것들이 있는지 알아보자.
id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined 총 11개의 column이 존재하며 이외에 column을 추가 하고 싶을 때 코드를 추가로 작성합니다.]]></description>
</item><item>
    <title>Django_09_CustomAuthUser_AbstractBaseUser</title>
    <link>https://colinder.github.io/django_09_customauthuser_abstractbaseuser/</link>
    <pubDate>Fri, 08 Oct 2021 10:17:50 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_09_customauthuser_abstractbaseuser/</guid>
    <description><![CDATA[​
Django AbstractBaseUser  django는 기본적으로 username 과 password를 가지고 로그인합니다. 하지만 요즘에는 대부분의 웹사이트들이 email 과 password로 로그인(사용자를 인식 및 인증)을 합니다.
 ​
제가 진행할 것은 django의 AbstractBaseUser을 사용해 테이블을 만들고 사용자 인증하기 입니다.
  조건
  email, password, nickname 및 필수 요소(is_active, is_admin)로만 인증 테이블 구성.
  createsuperuser 명령어 입력시, 관리자 계정이 커스텀한 테이블에 생성.
​
    Django 공식문서에는 models.py에서 기본적인 사용자모델을 설정하고 이를 활용해 admin.]]></description>
</item><item>
    <title>Django_08_AbstractBaseUser VS AbstractUser</title>
    <link>https://colinder.github.io/django_08_abstractbaseuservsabstractuser/</link>
    <pubDate>Thu, 07 Oct 2021 10:17:20 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_08_abstractbaseuservsabstractuser/</guid>
    <description><![CDATA[​
Django AbstractBaseUser VS AbstractUser  Django로 프로젝트를 진행하면서 계정관련 내용을 등록하는 것을 가장 많이 했음에도, 아직 명확하게 차이를 알지 못하고 사용했던 것이 있었습니다.
바로! User custom에 관한 부분이었는데요. 크게 AbstractBaseUser와 AbstractUser를 사용하는 방법이 있는데 이 둘의 차이를 꼼꼼히 알아보기 위해 해당 포스팅이 작성되었습니다.
 ​
AbstractBaseUser VS AbstractUser  프로젝트 생성 후 accounts 라는 app을 만들고 makemigrations &amp; migrate를 하기 전
 ​
1. Model 설정 AbstractBaseUser
위치: accounts/models.py]]></description>
</item><item>
    <title>Django_07_1:N 불러오기</title>
    <link>https://colinder.github.io/django_07_1vsn_%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0/</link>
    <pubDate>Tue, 14 Sep 2021 17:25:44 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_07_1vsn_%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0/</guid>
    <description><![CDATA[​
Django 1:N 불러오기  prefetch_related() or annotate()
 ​
models.py 구성
1 2 3  class Question(models.Model): question_text = models.CharField(max_length=200) pub_date = models.DateTimeField(&#39;date published&#39;)   1 2 3 4  class Choice(models.Model): question = models.ForeignKey(Question, on_delete=models.CASCADE, related_name=&#39;choices&#39;) choice_text = models.CharField(max_length=200) votes = models.IntegerField(default=0)   ​
​
prefetch_related() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  # views.py def get_context_data(): context[&#34;questions&#34;] = Question.]]></description>
</item><item>
    <title>Django_06_Django &amp; Oracle18 error LOG</title>
    <link>https://colinder.github.io/django_06_djangooracle18_error_log/</link>
    <pubDate>Mon, 06 Sep 2021 11:41:44 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_06_djangooracle18_error_log/</guid>
    <description><![CDATA[​
Django &amp; Oracle 18 오류 일지  각종 스트레스의 원인에 대하여 해결방법을 정리합니다.
 ​
  ORA-00955: name is already used by an existing object
 1 2 3  # 해결법 python manage.py makemigrations python manage.py migrate --fake-initial    이미 migrate 한 내용을 수정하니 반영되지 않아 오류가 발생하였는데 위의 명령어는 migratie를 초기화해서 재설정 하는 것 같습니다.
​
  그리고 많은 경우에
 1 2  python manage.]]></description>
</item><item>
    <title>Django_05_Check DB connection</title>
    <link>https://colinder.github.io/django_05_check-db-connection/</link>
    <pubDate>Mon, 06 Sep 2021 11:29:11 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_05_check-db-connection/</guid>
    <description><![CDATA[​
Django DB 연결 확인 ​
python manage.py createsuperuser 후.. default로 생기는 DB를 기준으로 실행
​
1 2  ## setting.py AUTH_USER_MODEL = &#39;auth.User&#39; # default 설정.   ​
이후 terminal에서
1 2 3 4 5 6 7  $ python manage.py shell_plus	# 모델에 접근하기 위해 shell_plus 실행 &gt; Post = get_user_model()	# 생성된 모델의 user table 불러오기 &gt; post = Post.objects.all()	# user table의 모든 값 가져오기 &gt; for i in post:	# for문으로 user table값 순환 &gt; print(i)	# user table 값 출력   하면 연결된 모델의 값을 확인할 수 있다.]]></description>
</item><item>
    <title>Django_03_overriding templates</title>
    <link>https://colinder.github.io/django_03_overridingtemplates/</link>
    <pubDate>Tue, 27 Apr 2021 20:27:30 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_03_overridingtemplates/</guid>
    <description><![CDATA[​
Django Overriding Templates  웹개발을 하다보면 재활용되어야 하는 부분. 즉, 변경되지 않아야 하는 부분과, 변해야 하는 부분이 있습니다. (대표적으로 navbar) 그리고 이런 개발의 편의성을 위해 Django는 Overriding 이라는 기술을 제공합니다.
 ​
지난 &ldquo;app&quot;에 이어 진행
변경되지 않아야 하는 부분은 그림의 &lsquo;배경&rsquo;이고, 변해야 하는 부분은 그림의 &lsquo;디테일 요소&rsquo;라고 생각하면 이해가 쉽습니다. / 그럼 변경되지 않아야 하는 부분을 먼저 제작해봅시다.
1. 변경 하지 않을 부분 == 배경 제작 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  &lt;!]]></description>
</item><item>
    <title>Django_04_form</title>
    <link>https://colinder.github.io/django_04_form/</link>
    <pubDate>Fri, 23 Apr 2021 20:04:47 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_04_form/</guid>
    <description><![CDATA[​
Django_form  이제 여러 html파일을 만들어 여러 화면을 돌아다닐 수 있게 되었습니다. 그렇다면 A화면에서 입력한 정보를 B화면으로 가져가고 싶다면 어떻게 해야 할까요? form테그를 사용하면 됩니다.
 ​
👨‍💻 개발해봅시다. 기존에 만들었던 main.html을 활용해 만들어 보겠습니다.
1. form 태그 생성 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  &lt;!-- articles/templates/articles/main.html --&gt; &lt;!DOCTYPE html&gt; &lt;html lang=&#34;en&#34;&gt; &lt;head&gt; &lt;meta charset=&#34;UTF-8&#34;&gt; &lt;meta http-equiv=&#34;X-UA-Compatible&#34; content=&#34;IE=edge&#34;&gt; &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.]]></description>
</item><item>
    <title>Django_02_addapp</title>
    <link>https://colinder.github.io/django_02_addapp/</link>
    <pubDate>Thu, 22 Apr 2021 23:17:41 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_02_addapp/</guid>
    <description><![CDATA[​
Django_app  이번에는 생성된 프로젝트에서 1. app을 추가해 등록해보고 2. 서버 접속시 첫 메인 페이지를 제작해봅시다.
 ​
뜬금없이 CRUD를 알아보고 갑시다.  CRUD는 대부분의 컴퓨터 소프트웨어가 가지는 기본적인 데이터 처리 기능인 Create(생성), Read(읽기), Update(갱신), Delete(삭제)를 묶어서 일컫는 말입니다. 사용자 인터페이스가 갖추어야 할 기능(정보의 참조/검색/갱신 등) 중 가장 기본이라고 생각되는 기술들입니다.
 ​
이제 이어서 개발해봅시다. ​
1. App 생성 지난번에는 프로젝트를 생성하고 setting.py에서 기본 설정만 변경해주었습니다. 이제 app을 생성해봅시다.]]></description>
</item></channel>
</rss>

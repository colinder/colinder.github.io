<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Django - Tag - </title>
        <link>https://colinder.github.io/tags/django/</link>
        <description>Django - Tag - </description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 14 Sep 2021 17:25:44 &#43;0900</lastBuildDate><atom:link href="https://colinder.github.io/tags/django/" rel="self" type="application/rss+xml" /><item>
    <title>Django_07_1:N 불러오기</title>
    <link>https://colinder.github.io/django_07_1vsn_%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0/</link>
    <pubDate>Tue, 14 Sep 2021 17:25:44 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_07_1vsn_%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0/</guid>
    <description><![CDATA[​
Django 1:N 불러오기  prefetch_related() or annotate()
 ​
models.py 구성
1 2 3  class Question(models.Model): question_text = models.CharField(max_length=200) pub_date = models.DateTimeField(&#39;date published&#39;)   1 2 3 4  class Choice(models.Model): question = models.ForeignKey(Question, on_delete=models.CASCADE, related_name=&#39;choices&#39;) choice_text = models.CharField(max_length=200) votes = models.IntegerField(default=0)   ​
​
prefetch_related() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  # views.py def get_context_data(): context[&#34;questions&#34;] = Question.]]></description>
</item><item>
    <title>Django_06_Django &amp; Oracle18 error LOG</title>
    <link>https://colinder.github.io/django_06_djangooracle18_error_log/</link>
    <pubDate>Mon, 06 Sep 2021 11:41:44 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_06_djangooracle18_error_log/</guid>
    <description><![CDATA[​
Django &amp; Oracle 18 오류 일지  각종 스트레스의 원인에 대하여 해결방법을 정리합니다.
 ​
  ORA-00955: name is already used by an existing object
 1 2 3  # 해결법 python manage.py makemigrations python manage.py migrate --fake-initial    이미 migrate 한 내용을 수정하니 반영되지 않아 오류가 발생하였는데 위의 명령어는 migratie를 초기화해서 재설정 하는 것 같습니다.
​
  그리고 많은 경우에
 1 2  python manage.]]></description>
</item><item>
    <title>Django_05_Check DB connection</title>
    <link>https://colinder.github.io/django_05_check-db-connection/</link>
    <pubDate>Mon, 06 Sep 2021 11:29:11 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_05_check-db-connection/</guid>
    <description><![CDATA[​
Django DB 연결 확인 ​
python manage.py createsuperuser 후.. default로 생기는 DB를 기준으로 실행
​
1 2  ## setting.py AUTH_USER_MODEL = &#39;auth.User&#39; # default 설정.   ​
이후 terminal에서
1 2 3 4 5 6 7  $ python manage.py shell_plus	# 모델에 접근하기 위해 shell_plus 실행 &gt; Post = get_user_model()	# 생성된 모델의 user table 불러오기 &gt; post = Post.objects.all()	# user table의 모든 값 가져오기 &gt; for i in post:	# for문으로 user table값 순환 &gt; print(i)	# user table 값 출력   하면 연결된 모델의 값을 확인할 수 있다.]]></description>
</item><item>
    <title>Django_03_overriding templates</title>
    <link>https://colinder.github.io/django_03_overridingtemplates/</link>
    <pubDate>Tue, 27 Apr 2021 20:27:30 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_03_overridingtemplates/</guid>
    <description><![CDATA[​
Django Overriding Templates  웹개발을 하다보면 재활용되어야 하는 부분. 즉, 변경되지 않아야 하는 부분과, 변해야 하는 부분이 있습니다. (대표적으로 navbar) 그리고 이런 개발의 편의성을 위해 Django는 Overriding 이라는 기술을 제공합니다.
 ​
지난 &ldquo;app&quot;에 이어 진행
변경되지 않아야 하는 부분은 그림의 &lsquo;배경&rsquo;이고, 변해야 하는 부분은 그림의 &lsquo;디테일 요소&rsquo;라고 생각하면 이해가 쉽습니다. / 그럼 변경되지 않아야 하는 부분을 먼저 제작해봅시다.
1. 변경 하지 않을 부분 == 배경 제작 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  &lt;!]]></description>
</item><item>
    <title>Django_04_form</title>
    <link>https://colinder.github.io/django_04_form/</link>
    <pubDate>Fri, 23 Apr 2021 20:04:47 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_04_form/</guid>
    <description><![CDATA[​
Django_form  이제 여러 html파일을 만들어 여러 화면을 돌아다닐 수 있게 되었습니다. 그렇다면 A화면에서 입력한 정보를 B화면으로 가져가고 싶다면 어떻게 해야 할까요? form테그를 사용하면 됩니다.
 ​
👨‍💻 개발해봅시다. 기존에 만들었던 main.html을 활용해 만들어 보겠습니다.
1. form 태그 생성 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  &lt;!-- articles/templates/articles/main.html --&gt; &lt;!DOCTYPE html&gt; &lt;html lang=&#34;en&#34;&gt; &lt;head&gt; &lt;meta charset=&#34;UTF-8&#34;&gt; &lt;meta http-equiv=&#34;X-UA-Compatible&#34; content=&#34;IE=edge&#34;&gt; &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.]]></description>
</item><item>
    <title>Django_02_addapp</title>
    <link>https://colinder.github.io/django_02_addapp/</link>
    <pubDate>Thu, 22 Apr 2021 23:17:41 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_02_addapp/</guid>
    <description><![CDATA[​
Django_app  이번에는 생성된 프로젝트에서 1. app을 추가해 등록해보고 2. 서버 접속시 첫 메인 페이지를 제작해봅시다.
 ​
뜬금없이 CRUD를 알아보고 갑시다.  CRUD는 대부분의 컴퓨터 소프트웨어가 가지는 기본적인 데이터 처리 기능인 Create(생성), Read(읽기), Update(갱신), Delete(삭제)를 묶어서 일컫는 말입니다. 사용자 인터페이스가 갖추어야 할 기능(정보의 참조/검색/갱신 등) 중 가장 기본이라고 생각되는 기술들입니다.
 ​
이제 이어서 개발해봅시다. ​
1. App 생성 지난번에는 프로젝트를 생성하고 setting.py에서 기본 설정만 변경해주었습니다. 이제 app을 생성해봅시다.]]></description>
</item><item>
    <title>Django_01_startproject</title>
    <link>https://colinder.github.io/django_01_startproject/</link>
    <pubDate>Thu, 22 Apr 2021 23:13:25 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_01_startproject/</guid>
    <description><![CDATA[Django 개발환경준비   편리함을 추구하기 위해 AWS Cloud9을 사용하여 진행
  https://ide.cs50.io/ 주소로 접속하면 진행이 가능하며, 진행을 위해선 Git 아이디가 있어야 한다.
Git? : 버전 관리 시스템이며 Git은 소프트웨어를 개발하는 기업의 핵심 자산인 소스코드를 효과적으로 관리할 수 있게 해주는 무료, 공개소프트웨어. git에 대한 내용은 따로 정리해보도록 한다.
  로그인까지 마치면 이제 Django 개발 준비 끝.
​
   👏 21.04.18 기준 django : 3.2 V 으로 다시 정리 합니다.]]></description>
</item><item>
    <title>Django_00_basic</title>
    <link>https://colinder.github.io/django_00_whatisdjango/</link>
    <pubDate>Thu, 22 Apr 2021 23:10:27 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_00_whatisdjango/</guid>
    <description><![CDATA[​
Web ?  월드 와이드 웹(World Wide Web)이란 인터넷에 연결된 사용자들이 서로의 정보를 공유할 수 있는 공간을 의미하며, 줄여서 WWW나 W3라고도 부르며, 간단히 웹(Web)이라고 가장 많이 불린다.
인터넷과 같은 의미로 많이 사용되고 있지만, 정확히 말해 웹은 인터넷상의 인기 있는 하나의 서비스일 뿐.
Web의 작동방식을 간단히 설명하자면, 요청과 응답.
사용자는 서버에 어떠한 요구사항을 요청하고 서버는 이에 따라 처리결과를 응답한다.
예를들어 사용자가 Login 버튼을 누른 행위는 user가 서버에 로그인 하고 싶다고 요청한 것이며, 서버는 로그인 창을 띄움으로서 user가 로그인할 수 있게 응답한 것입니다.]]></description>
</item></channel>
</rss>

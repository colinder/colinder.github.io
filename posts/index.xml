<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - </title>
        <link>https://colinder.github.io/posts/</link>
        <description>All Posts | </description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 01 Dec 2020 13:40:25 &#43;0900</lastBuildDate><atom:link href="https://colinder.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Process VS Thread</title>
    <link>https://colinder.github.io/processvsthread/</link>
    <pubDate>Tue, 01 Dec 2020 13:40:25 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/processvsthread/</guid>
    <description><![CDATA[​
Process VS Thread  면접 질문에서 가장 많이 들어본 이야기라고 친구들이 이야기 해줬습니다. 근데 전 아직 자신있게 설명할 정도로 알지 못하기에 알아봅시다!
 ​
​
프로그램(Program)란 무엇인지 우선 알아봅시다. 소프트웨어의 한가지로, 어떤 문제를 해결하기 위하여 그 처리 방법과 순서(a.k.a ALGORITHM)를 기술하여 컴퓨터에 주어지는 일련의 명령문 집합체를 뜻합니다. 쉽게 말해, “어떤 작업을 위해 실행할 수 있는 파일”을 뜻합니다. 그리고 그 프로그램을 실행 시키는 주체를 인스턴스라고도 표현합니다.
예들 들어, Excel.exe, kakaotalk.exe 등과 같이 어떤 작업을 위해 실행할 수 있는 (설치 등)파일을 생각해 볼 수 있습니다.]]></description>
</item><item>
    <title>HTTP VS HTTPS</title>
    <link>https://colinder.github.io/httpvshttps/</link>
    <pubDate>Tue, 24 Nov 2020 11:28:42 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/httpvshttps/</guid>
    <description><![CDATA[​
HTTP vs HTTPS  웹개발 프로젝트를 하면서 인터넷 주소창(URL)을 자주 보게 되었습니다. 그러던 중 HTTP와 HTTPS의 차이를 발견하였고 단순히 HTTPS가 보안이 더 뛰어나서 적용하면 좋다. 정도의 개념만을 가지고 있다, &lsquo;한 번 차이를 깔끔히 정리하면 좋겠다.&rsquo; 싶어 정리해보겠습니다.
 ​
뜬금없이 URL란 무엇인지 우선 알아봅시다. 우리가 &lsquo;인터넷 주소창&rsquo;이라고 흔히 말하는 URL은 Uniform Resource Locator, 자원 위치 규약? 정도로 이해하면 좋을 것 같습니다.
우리가 사는 주소를 잠시 생각해봅시다. 먼저, 대한민국안에 서울특별시에 있는 강남구를 생각해보면 대한민국이라는 국가에서 서울특별시라는 위치로 그리고 그 안에 강남구로 범위를 좁히며 구체적인 위치를 생각할 수 있습니다.]]></description>
</item><item>
    <title>what is Domain</title>
    <link>https://colinder.github.io/what_is_domain/</link>
    <pubDate>Mon, 23 Nov 2020 12:47:53 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/what_is_domain/</guid>
    <description><![CDATA[​
도메인(domain)이란?  도메인의 뜻은 무엇일까요? 어찌저찌 설명할 순 있지만, 확신을 가지고 정확하게 답할 수 없었기에 정리해보겠습니다.
 ​
이번에도 뜬금없이IP 란 무엇인지 우선 알아봅시다. IP는 Internet Protocol의 약자로 인터넷에 연결되어 있는 장치(컴퓨터, 스마트폰, 타블릿, 서버 등등)들은 각각의 장치를 식별할 수 있는 주소를 가지고 있는데 이를 ip라고 합니다. 간단히 각 장치(device)들의 주민등록번호라고 생각하면 이해하는데 도움이 됩니다.
ex) 125.209.222.141, 172.217.175.238
​
도메인(domain)이란? ip는 사람이 이해하고 기억하기 어렵기 때문에 쉽게 접근할 수 있게 각 ip에 고유한 이름을 부여할 수 있게 했는데, 이것을 도메인이라고 합니다.]]></description>
</item><item>
    <title>Async To Sync in Javascript</title>
    <link>https://colinder.github.io/asynctosyncinjavascript/</link>
    <pubDate>Fri, 20 Nov 2020 13:59:06 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/asynctosyncinjavascript/</guid>
    <description><![CDATA[​
Async to Sync in Javascript  누구나 웹개발을 하다보면 HTTP 통신을 통해 데이터를 가져오고 가공하고 사용하게됩니다. 그리고 동기, 비동기 처리 때문에 골치가 아파집니다. (만약 골치가 아프지 않다면.. 부럽습니다..) 더 이상 골치아프기 싫어서 정리해봅시다.👍
 *동기, 비동기 설명은 이전 포스팅으로 갈음합니다.
​
Async(비동기) to Sync(동기) 방법 자바스크립트에서의 비동기를 동기로 동작시키는 대표적인 3가지의 방법을 알아보겠습니다.
  Callback
  Promise
  Async / Await
  ​
1. Callback  개발자들 마다 정의가 조금씩 다르겠지만, 저는 어떤 이벤트가 발생한 후, 수행될 함수로 정의해보겠습니다.]]></description>
</item><item>
    <title>Interpreter VS Compiler_Language</title>
    <link>https://colinder.github.io/interpretervscompiler_language/</link>
    <pubDate>Wed, 18 Nov 2020 11:54:20 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/interpretervscompiler_language/</guid>
    <description><![CDATA[​
Interpreter VS Compiler_Language  web 개발을 하다보면 javascript를 공부하게 되고, javascript를 공부하다보면, 점점 궁금해지는 것이 많아집니다. 그 많은 호기심을 채우기 전 많이 듣게 되는 기초적인 지식?인 인터프리터 언어와 컴파일 언어의 특징과 차이에 대하여 알아봅시다!
 ​
뜬금없이 프로그래밍 언어란 무엇인지 우선 알아봅시다. 컴퓨터는 이진수만 이해할 수 있습니다. 즉 컴퓨터는 우리가 사용하는 언어가 아닌 &lsquo;0&rsquo;, &lsquo;1&rsquo;만 이해합니다.
근데 이게 프로그래밍 언어랑 무슨 상관일까요? 상관이 아주 많습니다&hellip;ㅎ.. 프로그래밍 언어로 프로그램을 만들고 실행 할 때 우리는 &lsquo;0&rsquo;, &lsquo;1&rsquo; 같은 명령어로 코딩을 하지 않습니다.]]></description>
</item><item>
    <title>React-Native_google login</title>
    <link>https://colinder.github.io/react-native_googlelogin/</link>
    <pubDate>Thu, 29 Oct 2020 23:13:25 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/react-native_googlelogin/</guid>
    <description><![CDATA[​
React-Native google login  서비스를 개발하다보면 로그인 기능이 새삼 대단해보입니다. 신경쓸 것도 많고, 하지만 이런 수고를 sns로그인 기능으로 대신한다면 편의성이 많이 높아집니다. 하여 해보겠습니다.
 *google login을 하기 위해 firebase(모바일 및 웹 애플리케이션 개발 플랫폼)을 사용합니다.
  개발환경
  npm으로 진행
  react-native_cli (✨expo로 진행하지 않습니다.)
  android 기준
  함수형 컴포넌트로 진행 (✨ 클래스 컴포넌트로 진행하지 않습니다.)
  RN 버전 0.60이상에서 진행]]></description>
</item><item>
    <title>React-Native_navigation</title>
    <link>https://colinder.github.io/react-native_navigation/</link>
    <pubDate>Thu, 29 Oct 2020 21:24:52 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/react-native_navigation/</guid>
    <description><![CDATA[​
React-Native navigation  vue는 router를 사용해 화면을 이동합니다. 그렇다면, react-native는 어떻게 화면을 이동할까요?
바로 react-native navigation을 사용합니다. 어떻게 사용하는건지 기록합시다.
 공식홈페이지의 Getting started로 알아봅시다.
​
*새로운 프로젝트를 만들고 root폴더에서 진행.
  개발환경
  npm으로 진행
  react-native_cli (✨expo로 진행하지 않습니다.)
  android 기준
  함수형 컴포넌트로 진행 (✨ 클래스 컴포넌트로 진행하지 않습니다.)
  RN 버전 0.60이상에서 진행
  react-native-cli: 2.0.1
  react-native: 0.]]></description>
</item><item>
    <title>SW Expert Academy_D4 6959, , , </title>
    <link>https://colinder.github.io/sw_20.10.23/</link>
    <pubDate>Fri, 23 Oct 2020 21:19:33 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sw_20.10.23/</guid>
    <description><![CDATA[​
D4_6959_이상한 나라의 덧셈게임 1 2 3 4 5 6 7 8 9 10  for T in range(int(input())): N = input() result = [&#34;A&#34;, &#34;B&#34;] turn = 1 while len(N) &gt; 1: N = str(int(N[0]) + int(N[1])) + N[2:] turn += 1 print(f&#39;#{T+1} {result[turn%2]}&#39;) # 단순 산수   ​]]></description>
</item><item>
    <title>what is Cookie?</title>
    <link>https://colinder.github.io/what_is_cookie/</link>
    <pubDate>Mon, 19 Oct 2020 14:59:01 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/what_is_cookie/</guid>
    <description><![CDATA[​
개발을 하다보면, 유저의 로그인 기능을 고민하는 경우가 많습니다. 근데. 로그인 기능을 개발하다보면 꼭 마주치는 두 가지&hellip;
cookie와 session에 대하여 알아보겠습니다. 다만 그전에 cookie와 session이 생기게 된 배경에 대하여 같이 알아 보겠습니다.
​
HTTP 프로토콜의 특징 HTTP는 Connectionless(비연결성)하고, Stateless하다고 합니다.
Connectionless란, 클라이언트가 행위를 통해 서비스를 제공받기 위해 서버에 request(요청)를 하면 서버는 클라이언트의 요청값에 따라 클라이언트에게 response(응답)하게 됩니다. 이렇게 한번의 request — response의 결과로 클라이언트는 어플리케이션이 제공하는 서비스를 받게되면서, 서로의 접속을 끊게 된다는 특성입니다.]]></description>
</item><item>
    <title>06_Vue_LifeCycle</title>
    <link>https://colinder.github.io/06_vue_lifecycle/</link>
    <pubDate>Thu, 15 Oct 2020 21:04:53 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/06_vue_lifecycle/</guid>
    <description><![CDATA[​
Vue_LifeCycle  솔직히 처음 라이프사이클이란 것을 공부했을 때는 이게 무슨 말인지? 삶의 주기를 왜 알아야 하는지 전혀 몰랐습니다. 이런 저에게 Vue 공식문서에는 말했습니다.
지금 당장 모든 것을 완전히 이해할 필요는 없지만 다이어그램은 앞으로 도움이 될 것입니다.
 그리고, LifeCycle을 공부 하기 전 DOM에 대한 개념이 부족하다면 what is DOM?을 꼭 보고 오길 추천합니다.
​
Vue.js의 라이프 사이클은 크게 Creation, Mounting, Updating, Destruction으로 나눌 수 있습니다. 이는 생성(create)되고, DOM에 부착(mount)되고, 업데이트(update)되며, 없어지는(destroy) 4가지 과정을 말합니다.]]></description>
</item></channel>
</rss>

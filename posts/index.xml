<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - </title>
        <link>https://colinder.github.io/posts/</link>
        <description>All Posts | </description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 15 Dec 2020 21:01:50 &#43;0900</lastBuildDate><atom:link href="https://colinder.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>BEAKJOON 10809, 2941, 2908, 1316</title>
    <link>https://colinder.github.io/bj_20.12.15/</link>
    <pubDate>Tue, 15 Dec 2020 21:01:50 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/bj_20.12.15/</guid>
    <description><![CDATA[​
10809_알파벳찾기 1 2 3 4 5 6 7 8 9 10  import sys word = sys.stdin.readline().rstrip() alphabet = list(range(97,123)) for x in alphabet : print(word.find(chr(x)), end=&#34; &#34;) # find함수는 조건에 맞는 값의 index를 출력하고 # 찾지 못하는 경우 -1을 출력한다.    ​
2941_크로아티아 알파벳 1 2 3 4 5 6 7 8 9 10  import sys cro = [&#34;c=&#34;, &#34;c-&#34;, &#34;dz=&#34;, &#34;d-&#34;, &#34;lj&#34;, &#34;nj&#34;, &#34;s=&#34;, &#34;z=&#34;] s = sys.]]></description>
</item><item>
    <title>JavaScript Hoisting</title>
    <link>https://colinder.github.io/js_hoisting/</link>
    <pubDate>Fri, 11 Dec 2020 11:16:09 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/js_hoisting/</guid>
    <description><![CDATA[​
JavaScript Hoisting  web 개발을 하면서 여러 레퍼런스들을 확인하고 공부하게 되는데, 문득 똑같아 보이나 왜 이건 되고? 왜 이건 안되지?하는 부분이 있었습니다.
그 차이는 Hoisting에 대한 내용이었는데요. 알아두면 쓸모있기에 정리해봅시다.
 ​
호이스팅(Hoisting)이란? 호이스팅을 한 줄로 설명하자면, 선언문을 유효 범위의 최상단으로 끌어올리는 행위라고 할 수 있습니다.
최상단이라는 표현이 중요한데요. 인터프리터 언어인 자바스크립트가 한 줄씩 순서대로 코딩을 실행하는 것이 아니라, 임의로 특정 내용을 최상단으로 끌어 올려서 우선 실행하는 것을 호이스팅이라고 합니다.]]></description>
</item><item>
    <title>JavaScript Scope</title>
    <link>https://colinder.github.io/js_scope/</link>
    <pubDate>Thu, 10 Dec 2020 17:03:25 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/js_scope/</guid>
    <description><![CDATA[​
JavaScript Scope란?  Scope [ skoʊp ]1 (무엇을 하거나 이룰 수 있는) 기회[여지/능력] (=potential)2 (주제조직활동 등이 다루는) 범위3 샅샅이[자세히] 살피다.
스코프는 &ldquo;유효 범위&quot;로써 번수에 매개변수가 어디까지 유효한지를 나타냅니다.
자바스크립트에선 스코프는 2가지 타입이 있습니다. 바로 Global(전역)과 Local(지역)인데요. 함수 안에서 선언된 변수(Local 변수)는 함수 블록 안에서만 접근이 가능합니다.전역 변수는 어디서든 접근이 가능합니다.
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  // global 변수 선언 var a = 10; console.]]></description>
</item><item>
    <title>JavaScript Operators</title>
    <link>https://colinder.github.io/js_operators/</link>
    <pubDate>Wed, 09 Dec 2020 22:04:20 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/js_operators/</guid>
    <description><![CDATA[​
JavaScript Operators  Javascript의 연산자를 알아 봅시다. 종류가 많이 있어 많이 사용하는 것들 중심으로 먼저 알아보겠습니다.
 ​
1. 할당 연산자 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  // 할당 연산자 let numder = 0 numder += 10 console.log(numder) // 10  numder -= 8 console.log(numder) // 2  numder *= 10 console.log(numder) // 20  numder ++ // 1을 더한다.]]></description>
</item><item>
    <title>JavaScript Type</title>
    <link>https://colinder.github.io/js_type/</link>
    <pubDate>Wed, 09 Dec 2020 10:23:18 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/js_type/</guid>
    <description><![CDATA[​
JavaScript Type은?  제 생각에 개발 언어를 공부하면서 가장 먼저 알아야 알 것은 그리고 가장 중요한 것은 형식입니다.
때마침 Javascript를 공부하고 있는데, 가장 먼저 Type에 대해 정리해보겠습니다.
 ​
그 전에 먼저 변수를 선언하는 방법을 알아봅시다. 1 2 3 4 5 6 7 8  // 변수를 선언 하는 방법  // function scope var a = 10 // 일반적인 변수 선언 방법  // block scope {} 안에서만 존재하는 변수 let b = 20 // 재할당 가능 [최근에는 사용률이 낮아지고 있다고 합니다.]]></description>
</item><item>
    <title>Process VS Thread</title>
    <link>https://colinder.github.io/processvsthread/</link>
    <pubDate>Tue, 01 Dec 2020 13:40:25 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/processvsthread/</guid>
    <description><![CDATA[​
Process VS Thread  면접 질문에서 가장 많이 들어본 이야기라고 친구들이 이야기 해줬습니다. 근데 전 아직 자신있게 설명할 정도로 알지 못하기에 알아봅시다!
 ​
​
프로그램(Program)란 무엇인지 우선 알아봅시다. 소프트웨어의 한가지로, 어떤 문제를 해결하기 위하여 그 처리 방법과 순서(a.k.a ALGORITHM)를 기술하여 컴퓨터에 주어지는 일련의 명령문 집합체를 뜻합니다. 쉽게 말해, “어떤 작업을 위해 실행할 수 있는 파일”을 뜻합니다. 그리고 그 프로그램을 실행 시키는 주체를 인스턴스라고도 표현합니다.
예들 들어, Excel.exe, kakaotalk.exe 등과 같이 어떤 작업을 위해 실행할 수 있는 (설치 등)파일을 생각해 볼 수 있습니다.]]></description>
</item><item>
    <title>HTTP VS HTTPS</title>
    <link>https://colinder.github.io/httpvshttps/</link>
    <pubDate>Tue, 24 Nov 2020 11:28:42 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/httpvshttps/</guid>
    <description><![CDATA[​
HTTP vs HTTPS  웹개발 프로젝트를 하면서 인터넷 주소창(URL)을 자주 보게 되었습니다. 그러던 중 HTTP와 HTTPS의 차이를 발견하였고 단순히 HTTPS가 보안이 더 뛰어나서 적용하면 좋다. 정도의 개념만을 가지고 있다, &lsquo;한 번 차이를 깔끔히 정리하면 좋겠다.&rsquo; 싶어 정리해보겠습니다.
 ​
뜬금없이 URL란 무엇인지 우선 알아봅시다. 우리가 &lsquo;인터넷 주소창&rsquo;이라고 흔히 말하는 URL은 Uniform Resource Locator, 자원 위치 규약? 정도로 이해하면 좋을 것 같습니다.
우리가 사는 주소를 잠시 생각해봅시다. 먼저, 대한민국안에 서울특별시에 있는 강남구를 생각해보면 대한민국이라는 국가에서 서울특별시라는 위치로 그리고 그 안에 강남구로 범위를 좁히며 구체적인 위치를 생각할 수 있습니다.]]></description>
</item><item>
    <title>what is Domain</title>
    <link>https://colinder.github.io/what_is_domain/</link>
    <pubDate>Mon, 23 Nov 2020 12:47:53 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/what_is_domain/</guid>
    <description><![CDATA[​
도메인(domain)이란?  도메인의 뜻은 무엇일까요? 어찌저찌 설명할 순 있지만, 확신을 가지고 정확하게 답할 수 없었기에 정리해보겠습니다.
 ​
이번에도 뜬금없이IP 란 무엇인지 우선 알아봅시다. IP는 Internet Protocol의 약자로 인터넷에 연결되어 있는 장치(컴퓨터, 스마트폰, 타블릿, 서버 등등)들은 각각의 장치를 식별할 수 있는 주소를 가지고 있는데 이를 ip라고 합니다. 간단히 각 장치(device)들의 주민등록번호라고 생각하면 이해하는데 도움이 됩니다.
ex) 125.209.222.141, 172.217.175.238
​
도메인(domain)이란? ip는 사람이 이해하고 기억하기 어렵기 때문에 쉽게 접근할 수 있게 각 ip에 고유한 이름을 부여할 수 있게 했는데, 이것을 도메인이라고 합니다.]]></description>
</item><item>
    <title>Async To Sync in Javascript</title>
    <link>https://colinder.github.io/asynctosyncinjavascript/</link>
    <pubDate>Fri, 20 Nov 2020 13:59:06 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/asynctosyncinjavascript/</guid>
    <description><![CDATA[​
Async to Sync in JavaScript  누구나 웹개발을 하다보면 HTTP 통신을 통해 데이터를 가져오고 가공하고 사용하게됩니다. 그리고 동기, 비동기 처리 때문에 골치가 아파집니다. (만약 골치가 아프지 않다면.. 부럽습니다..) 더 이상 골치아프기 싫어서 정리해봅시다.👍
 *동기, 비동기 설명은 이전 포스팅으로 갈음합니다.
​
Async(비동기) to Sync(동기) 방법 자바스크립트에서의 비동기를 동기로 동작시키는 대표적인 3가지의 방법을 알아보겠습니다.
  Callback
  Promise
  Async / Await
  ​
1. Callback  개발자들 마다 정의가 조금씩 다르겠지만, 저는 어떤 이벤트가 발생한 후, 수행될 함수로 정의해보겠습니다.]]></description>
</item><item>
    <title>Interpreter VS Compiler_Language</title>
    <link>https://colinder.github.io/interpretervscompiler_language/</link>
    <pubDate>Wed, 18 Nov 2020 11:54:20 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/interpretervscompiler_language/</guid>
    <description><![CDATA[​
Interpreter VS Compiler_Language  web 개발을 하다보면 javascript를 공부하게 되고, javascript를 공부하다보면, 점점 궁금해지는 것이 많아집니다. 그 많은 호기심을 채우기 전 많이 듣게 되는 기초적인 지식?인 인터프리터 언어와 컴파일 언어의 특징과 차이에 대하여 알아봅시다!
 ​
뜬금없이 프로그래밍 언어란 무엇인지 우선 알아봅시다. 컴퓨터는 이진수만 이해할 수 있습니다. 즉 컴퓨터는 우리가 사용하는 언어가 아닌 &lsquo;0&rsquo;, &lsquo;1&rsquo;만 이해합니다.
근데 이게 프로그래밍 언어랑 무슨 상관일까요? 상관이 아주 많습니다&hellip;ㅎ.. 프로그래밍 언어로 프로그램을 만들고 실행 할 때 우리는 &lsquo;0&rsquo;, &lsquo;1&rsquo; 같은 명령어로 코딩을 하지 않습니다.]]></description>
</item></channel>
</rss>

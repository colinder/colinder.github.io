<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - </title>
        <link>https://colinder.github.io/posts/</link>
        <description>All Posts | </description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 15 Sep 2020 22:52:51 &#43;0900</lastBuildDate><atom:link href="https://colinder.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>SW Expert Academy_D3 3131, 3233, , </title>
    <link>https://colinder.github.io/sw_20.09.15/</link>
    <pubDate>Tue, 15 Sep 2020 22:52:51 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sw_20.09.15/</guid>
    <description><![CDATA[​
D3_3131_100만 이하의 모든 소수 1 2 3 4 5 6 7 8 9 10 11 12  a = [0, 0] + [1] * 1000000 for i in range(2, 1000000): if a[i] == 1: for j in range(2*i, 1000001, i): a[j] = 0 for i in range(2, 1000000): if a[i] == 1: print(i, end=&#34; &#34;) # 에라토스테네스의 체   ​
D3_3233_정삼각형 분할 놀이 1 2 3 4 5 6 7 8 9 10  for T in range(int(input())): A, B = map(int, input().]]></description>
</item><item>
    <title>Python_Library</title>
    <link>https://colinder.github.io/python_library/</link>
    <pubDate>Fri, 11 Sep 2020 22:39:31 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/python_library/</guid>
    <description><![CDATA[​
자주 쓰는 Python Library  자주 사용하게되는 파이썬 라이브러리를 정리한다.
 ​
  정규표현식  일대일 매칭되는 문자
 정규표현식 안에서, 바로 다음 절에서 설명하는 메타문자를 제외한 모든 문자 하나는 일반 문자열 하나와 매칭된다. 예를 들어, a는 a와 매칭되고, 가는 ‘가’와 매칭되는 식이다. 당연히 a가 ‘b’ 또는 ‘가’와 매칭되지는 않는다.
1 2 3 4 5 6 7 8 9 10 11 12  어떤 프로그래밍 언어의 정규표현식이든 메타문자(특수한 기능을 하는 문자)라는 것이 존재한다.]]></description>
</item><item>
    <title>SW Expert Academy_D3 4698, 1493, 10570, 3032</title>
    <link>https://colinder.github.io/sw_20.09.09/</link>
    <pubDate>Tue, 08 Sep 2020 23:13:31 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sw_20.09.09/</guid>
    <description><![CDATA[​
D3_4698_테네스의 특별한 소수 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  for T in range(int(input())): D, A, B = map(int, input().split()) D = str(D) a = [0, 0] + [1] * (B - 1) rootB = int(B**0.5)	👈 이 아이디어를 얻기까지 오랜시간이 걸렸다. for i in range(2, rootB+1):	👈 if a[i] == 1:	👈 for j in range(2*i, B+1, i):	👈 에라토스테네스의 체 를 활용 a[j] = 0	👈 result = [] for i in range(A, B+1): if a[i] == 1 and D in str(i): result.]]></description>
</item><item>
    <title>SW Expert Academy_D3 2817, 1491, 1229, 5515</title>
    <link>https://colinder.github.io/sw_20.09.05/</link>
    <pubDate>Sat, 05 Sep 2020 00:06:14 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sw_20.09.05/</guid>
    <description><![CDATA[​
D3_2817_부분 수열의 합 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  import itertools for T in range(int(input())): N, K = map(int, input().split()) # N: 갯수, K: 목표 합 Nums = list(map(int, input().split())) count = 0 for i in range(1, N+1): boxs = itertools.combinations(Nums, i) for box in boxs: if sum(box) == K: count += 1 print(count) # 하... 라이브러리 쓰자..   ​]]></description>
</item><item>
    <title>SW Expert Academy_D3 10505, 10200, 3376, 5642</title>
    <link>https://colinder.github.io/sw_20.09.04/</link>
    <pubDate>Fri, 04 Sep 2020 00:00:59 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sw_20.09.04/</guid>
    <description><![CDATA[​
D3_10505_소득 불균형 1 2 3 4 5 6 7 8 9  for T in range(int(input())): N = int(input()) dp = [0] * 100001 Max = 0 for i in list(map(int, input().split())): dp[i] += 1 Max += i print(f&#39;#{T+1} {sum(dp[:int(Max/N)+1])}&#39;)   ​
D3_10200_구독자 전쟁 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  for T in range(int(input())): N, A, B = map(int, input().]]></description>
</item><item>
    <title>BlockChain setting &amp; basic</title>
    <link>https://colinder.github.io/blockchain/</link>
    <pubDate>Thu, 03 Sep 2020 22:06:15 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/blockchain/</guid>
    <description><![CDATA[​
🎈가상환경에서 블록체인 채굴 및 기본 시스템 정리 ​
1. geth(Go-ethereum) 설치  블록체인 기술은 중앙집중화된 데이터베이스에 반기를 들고 나온 개념이기 때문에 중앙 서버 이런게 없다. 즉 누구라도 해당 블록체인 네트워크에 참여하고 싶다면 언제라도 블록체인 데이터베이스를 싱크해주는 로컬 프로그램을 다운 받아 실행하면 데이터를 받을 수 있다.
그렇다면 블록체인 네트워크에 참여하고 싶다면 어떻게 해야 할까? 앞서 말한 로컬 프로그램을 다운 받으면 참여가 가능하다.
이 프로그램들 중 하나인 GO 로 짜여진 Go Ethereum(줄여서, geth)을 설치해본다.]]></description>
</item><item>
    <title>08_Vuex_03</title>
    <link>https://colinder.github.io/08_vuex_03/</link>
    <pubDate>Thu, 27 Aug 2020 21:48:19 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/08_vuex_03/</guid>
    <description><![CDATA[​
Vuex 핵심컨셉(getters, mutations, actions, modules)  3. Actions  공식문서에 따르면 액션(Actions)은 변이(mutations)와 유사하나, 몇가지 다른 점이 있다고 한다.
 상태를 변이시키는 대신 액션으로 변이에 대한 커밋을 합니다. 작업에는 임의의 비동기 작업이 포함될 수 있습니다.    Q. 상태를 변이시키는 대신 액션으로 변이에 대한 커밋을 합니다.
A. mutations의 역할은 State를 관리하는 것이다. 그런데 만약 비동기적 요청을 마구잡이로 보내게 된다면, State가 변질될 가능성이 높아진다. 결국 비동기 요청의 경우에도 mutations에 정의한 메소드의 형태로 보내어 상태가 변화하는 것을 추적한다.]]></description>
</item><item>
    <title>BEAKJOON 10844, 2156, </title>
    <link>https://colinder.github.io/bj_20.08.25/</link>
    <pubDate>Tue, 25 Aug 2020 23:01:50 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/bj_20.08.25/</guid>
    <description><![CDATA[​
10844_쉬운 계단 수 1    ​
2156_포도주 시식 1       포도주 6 10 13 8 8 1     넘버링 c1 c2 c3 c4 c5 c6    |경우의 수| c1| c1 + c2 | c1 + c2 | | | | | | | | c1 + C3 | | |]]></description>
</item><item>
    <title>07_Vuex_02</title>
    <link>https://colinder.github.io/07_vuex_02/</link>
    <pubDate>Sun, 16 Aug 2020 19:39:10 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/07_vuex_02/</guid>
    <description><![CDATA[​
Vuex 핵심컨셉(getters, mutations, actions, modules)  1. Getters  만약? A.vue와 B.vue에서 각각 store의 state에 등록된 second의 2를 3으로 변형해 사용하고 싶다면 어떻게 해야 할까? 저장소에 등록되어 있는 상태(state)를 변경하고 싶다면?
 이런 모습으로"이런 모습으로 아마 귀찮겠지만, 각각의 파일에서
1 2 3 4 5 6 7  // A.vue  computed: { change() { return this.$store.state.second + 1 } }   1 2 3 4 5 6 7  // B.]]></description>
</item><item>
    <title>04_Vue_Reactivity</title>
    <link>https://colinder.github.io/04_vue_reactivity/</link>
    <pubDate>Sun, 16 Aug 2020 12:22:44 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/04_vue_reactivity/</guid>
    <description><![CDATA[​
Vue_반응형 ]]></description>
</item></channel>
</rss>

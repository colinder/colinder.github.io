<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - </title>
        <link>https://colinder.github.io/posts/</link>
        <description>All Posts | </description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 16 Aug 2020 19:39:10 &#43;0900</lastBuildDate><atom:link href="https://colinder.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>07_Vuex_02</title>
    <link>https://colinder.github.io/07_vuex_02/</link>
    <pubDate>Sun, 16 Aug 2020 19:39:10 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/07_vuex_02/</guid>
    <description><![CDATA[​
Vuex 핵심컨셉(getters, mutations, actions, modules)  1. Getters  만약? A.vue와 B.vue에서 각각 store의 state에 등록된 second의 2를 3으로 변형해 사용하고 싶다면 어떻게 해야 할까? 저장소에 등록되어 있는 상태(state)를 변경하고 싶다면?
 이런 모습으로"이런 모습으로 아마 귀찮겠지만, 각각의 파일에서
1 2 3 4 5 6 7  // A.vue  computed: { change() { return this.$store.state.second + 1 } }   1 2 3 4 5 6 7  // B.]]></description>
</item><item>
    <title>04_Vue_Reactivity</title>
    <link>https://colinder.github.io/04_vue_reactivity/</link>
    <pubDate>Sun, 16 Aug 2020 12:22:44 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/04_vue_reactivity/</guid>
    <description><![CDATA[​
Vue_반응형 ]]></description>
</item><item>
    <title>06_Vue_LifeCycle</title>
    <link>https://colinder.github.io/06_vue_lifecycle/</link>
    <pubDate>Fri, 14 Aug 2020 21:04:53 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/06_vue_lifecycle/</guid>
    <description><![CDATA[​
Vue_LifeCycle  솔직한 고백으로, 처음 라이프사이클이란 것을 배웠을 때는 이게 무슨 말인지?, 어떤 경우에 이 삶의 주기를 고려하게 되는지 전혀 납득, 이해하지 못했다. Vue 공식문서에는 나와 비슷한 사용자들에게 말하고 있다.
지금 당장 모든 것을 완전히 이해할 필요는 없지만 다이어그램은 앞으로 도움이 될 것입니다.
 ]]></description>
</item><item>
    <title>BEAKJOON 1149, 1932, 2579, 1463</title>
    <link>https://colinder.github.io/bj_20.08.06/</link>
    <pubDate>Wed, 05 Aug 2020 22:11:35 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/bj_20.08.06/</guid>
    <description><![CDATA[​
1149_RGB거리 1 2 3 4 5 6 7 8 9 10 11 12 13  N = int(input()) RGB = [list(map(int, input().split())) for _ in range(N)] for i in range(1, len(RGB)): RGB[i][0] = RGB[i][0] + min(RGB[i-1][1], RGB[i-1][2]) RGB[i][1] = RGB[i][1] + min(RGB[i-1][0], RGB[i-1][2]) RGB[i][2] = RGB[i][2] + min(RGB[i-1][0], RGB[i-1][1]) print(min(RGB[i][0], RGB[i][1], RGB[i][2])) # 2시간이 넘게 고민한 결과... # 문제 속 조건3 &#34;&#34;i(2 ≤ i ≤ N-1)번 집의 색은 i-1번, i+1번 집의 색과 같지 않아야 한다.]]></description>
</item><item>
    <title>BEAKJOON 1103, 1904, 2748, 9461</title>
    <link>https://colinder.github.io/bj_20.08.04/</link>
    <pubDate>Tue, 04 Aug 2020 22:12:11 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/bj_20.08.04/</guid>
    <description><![CDATA[​
1003_피보나치 함수 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  def Fibonacci(N): if N &lt; 3: print(zero[N], one[N]) else: f = 1 s = 2 for i in range(N-2): zero.append(zero[f] + zero[s]) one.append(one[f] + one[s]) f += 1 s += 1 print(zero[N], one[N]) for T in range(int(input())): N = int(input()) zero = [1, 0, 1] one = [0, 1, 1] Fibonacci(N)   ​]]></description>
</item><item>
    <title>Naming Convention</title>
    <link>https://colinder.github.io/namingconvention/</link>
    <pubDate>Sun, 02 Aug 2020 22:24:45 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/namingconvention/</guid>
    <description><![CDATA[​
Naming Convention  정해진 규정은 없으나, 많은 개발자들이 암묵적으로 지키고 있는 이름짓는 방법.
 ​
  snake_case 🐍
1 2 3  # _ == snake some_var = 5 my_awesome = 3   ​
  camelCase 🐪
1 2 3  # 낙타등이 솟아 있는 모습 someVar = 5 pyAwesome = 3   ​
  UpperCamelCase 🐪🐪
1 2 3  # 낙타얼굴과 등이 중간에 솟아 있는 모습 (파스칼식(Pascal case)이라고도 불린다.]]></description>
</item><item>
    <title>05_Vuex_01</title>
    <link>https://colinder.github.io/05_vuex_01/</link>
    <pubDate>Sun, 02 Aug 2020 22:22:58 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/05_vuex_01/</guid>
    <description><![CDATA[​
Vuex 란? (공식문서)  Vuex는 Vue.js 애플리케이션에 대한 상태 관리 패턴 + 라이브러리 입니다. 애플리케이션의 모든 컴포넌트에 대한 중앙 집중식 저장소 역할을 하며 예측 가능한 방식으로 상태를 변경할 수 있습니다. 또한 Vue의 공식 devtools 확장 프로그램과 통합되어 설정 시간이 필요 없는 디버깅 및 상태 스냅 샷 내보내기/가져오기와 같은 고급 기능을 제공합니다. (공식문서 설명)
 ​
1 2 3 4 5  # 설치 명령어 npm i vuex or npm install vuex # 이후 src폴더안에 vuex폴더를 만들고 store.]]></description>
</item><item>
    <title>SW_20.07.29</title>
    <link>https://colinder.github.io/sw_20.07.29/</link>
    <pubDate>Wed, 29 Jul 2020 22:59:28 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/sw_20.07.29/</guid>
    <description><![CDATA[​
D3_4466_최대 성적표 만들기 1 2 3 4 5 6 7 8 9 10 11  for T in range(int(input())): N, K = map(int, input().split()) score = list(map(int, input().split())) score.sort(reverse=True) result = 0 for i in range(K): result += score[i] print(&#39;#{} {}&#39;.format(T+1, result))   ​
D3_4406_모음이 보이지 않는 사람 1 2 3 4 5 6 7  for T in range(int(input())): sent = input() result = &#39;&#39; for i in sent: if i not in &#39;aeiou&#39;: result += i print(&#39;#{} {}&#39;.]]></description>
</item><item>
    <title>03_Vue_cli &amp; router &amp; histoyMode</title>
    <link>https://colinder.github.io/03_vue_cli/</link>
    <pubDate>Fri, 17 Jul 2020 22:03:11 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/03_vue_cli/</guid>
    <description><![CDATA[​
1. Vue CLI 란? (공식문서) 간단히 vue-cli 는 기본 vue 개발 환경을 설정해주는 도구
 여기서 CLI 란 ?
명령 줄 인터페이스(CLI, Command line interface) 또는 명령어 인터페이스는 텍스트 터미널을 통해 사용자와 컴퓨터가 상호 작용하는 방식. 즉, 작업 명령은 사용자가 컴퓨터 키보드 등을 통해 문자열의 형태로 입력하며, 컴퓨터로부터의 출력 역시 문자열의 형태로 주어진다. (위키백과)
 ​
2. Vue router 프로젝트 생성 후 보통의 경우 편의를 위해 terminal에 vue add router를 입력해 router설치를 진행한다.]]></description>
</item><item>
    <title>02_Vue_basic (Vue 문법2)</title>
    <link>https://colinder.github.io/02_vue_basic/</link>
    <pubDate>Fri, 17 Jul 2020 22:03:09 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/02_vue_basic/</guid>
    <description><![CDATA[​
Vue의 기본 문법 및 동작 방법을 계속 알아보자 08_methods
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  ✨Point 1. method는 methods: {}의 문법으로 구성한다. &lt;!DOCTYPE html&gt; &lt;html lang=&#34;en&#34;&gt; &lt;head&gt; &lt;meta charset=&#34;UTF-8&#34;&gt; &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt; &lt;title&gt;Methods&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&#39;app&#39;&gt; {{ message }} &lt;/div&gt; &lt;!]]></description>
</item></channel>
</rss>

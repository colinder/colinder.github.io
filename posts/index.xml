<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - </title>
        <link>https://colinder.github.io/posts/</link>
        <description>All Posts | </description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 09 Sep 2021 17:24:56 &#43;0900</lastBuildDate><atom:link href="https://colinder.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Data labeling Image &amp; Video DOC</title>
    <link>https://colinder.github.io/data_labeling_doc/</link>
    <pubDate>Thu, 09 Sep 2021 17:24:56 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/data_labeling_doc/</guid>
    <description><![CDATA[​
이미지/영상 데이터 Annotation Tool  기초 라벨링 툴 제작에 필요한 사항들을 정리합니다.
 ​
저작도구?  저작(여러 형태의 데이터를 편집)에 사용되는 소프트웨어
 ​
라벨링 가이드라인?  라벨링 작업 방식과 기준이 기재된 문서. (프로젝트 별로 내용이 상이함)
 ​
용어 정리   객체(Object)
 라벨링 대상
   카테고리(Category)
 분류/탐지하고자 하는 대상을 카테고리화 한 것으로 분류체계를 의미
   태스크(Task)
 작업을 태스크라고 하며, 대기/작업완료/반려/완료 등의 상태 속성을 가짐]]></description>
</item><item>
    <title>Django_06_Django &amp; Oracle18 error LOG</title>
    <link>https://colinder.github.io/django_06_djangooracle18_error_log/</link>
    <pubDate>Mon, 06 Sep 2021 11:41:44 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_06_djangooracle18_error_log/</guid>
    <description><![CDATA[​
Django &amp; Oracle 18 오류 일지  각종 스트레스의 원인에 대하여 해결방법을 정리합니다.
 ​
  ORA-00955: name is already used by an existing object
 1 2 3  # 해결법 python manage.py makemigrations python manage.py migrate --fake-initial    이미 migrate 한 내용을 수정하니 반영되지 않아 오류가 발생하였는데 위의 명령어는 migratie를 초기화해서 재설정 하는 것 같습니다.
​
  그리고 많은 경우에
 1 2  python manage.]]></description>
</item><item>
    <title>Django_05_Check DB connection</title>
    <link>https://colinder.github.io/django_05_check-db-connection/</link>
    <pubDate>Mon, 06 Sep 2021 11:29:11 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_05_check-db-connection/</guid>
    <description><![CDATA[​
Django DB 연결 확인 ​
python manage.py createsuperuser 후.. default로 생기는 DB를 기준으로 실행
​
1 2  ## setting.py AUTH_USER_MODEL = &#39;auth.User&#39; # default 설정.   ​
이후 terminal에서
1 2 3 4 5 6 7  $ python manage.py shell_plus	# 모델에 접근하기 위해 shell_plus 실행 &gt; Post = get_user_model()	# 생성된 모델의 user table 불러오기 &gt; post = Post.objects.all()	# user table의 모든 값 가져오기 &gt; for i in post:	# for문으로 user table값 순환 &gt; print(i)	# user table 값 출력   하면 연결된 모델의 값을 확인할 수 있다.]]></description>
</item><item>
    <title>정적(Static) 링크 Vs 동적(Dynamic) 링크</title>
    <link>https://colinder.github.io/staticvsdynamic_link/</link>
    <pubDate>Mon, 06 Sep 2021 10:10:24 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/staticvsdynamic_link/</guid>
    <description><![CDATA[​
정적(Static) 링크 Vs 동적(Dynamic) 링크 ​
정적(Static) 링크 란?  link 단계에서 라이브러리(*.lib 파일)을 실행 바이너리(컴퓨터가 이해할 수 있는 문법으로 만들어진 결과물)에 포함한다는 의미
 *.lib 파일이란? &gt; Library 파일, 개발 코드에서 반복되는 기능들을 모아둔 파일
  ex) *.exe 파일
  라이브러리 관련 수정사항이 생기면 파일 전체를 다시 컴파일하여 재배포해야 한다.
​
​
  동적(Dynamic) 링크 란?  특정 기능을 사용하고자 하는 실행 바이너리에서 필요시 사용할 수 있도록 최소한의 정보만 포함하여 링크하거나, 독립적으로 dll을 로드/사용/해제 시킨다는 의미.]]></description>
</item><item>
    <title>License 배포 시 소스코드 제공 의무와 범위</title>
    <link>https://colinder.github.io/01_dutis_and_scope_at_deployment/</link>
    <pubDate>Thu, 02 Sep 2021 16:37:00 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/01_dutis_and_scope_at_deployment/</guid>
    <description><![CDATA[​
License 배포 시 소스코드 제공 의무와 범위  License에 대하여 알아보다보니, 배포 시 준수해야 하는 내용이 별도로 존재하고 있어 오픈소스 SW라이선스 종합정보시스템에서 발최한 내용을 추가로 정리합니다.
 ​
​
- Work Based on the Code -제공의무: 원 저작물의 소스코드를 원본 그대로, 혹은 수정하여 새로운 SW에 포함하였을 경우 -제공범위: 원 저작물의 소스코드가 포함되어, 파생 저작물로 인정되는 범위내의 모든 소스코드 -GNU GPL, GNU AGPL 등
​
- Derivative Work -제공의무: 원 저작물의 소스코드를 수정하여 사용한 경우 제공의무가 존재하며, 수정 없이 그대로 사용하였을 경우에는 소스코드를 제공하지 않아도 됨 -제공범위: 원 저작물을 사용함에 있어 수정을 거쳤다면, 원 저작물의 소스코드에서부터 존재하던 파일을 모두 공개해야 하며, 파생 저작물의 저작자가 추가적으로 생성한 부분에 대해서는 공개하지 않아도 됨 -GNU LGPL, NASA Open Source Agreement, Simple Public License 등]]></description>
</item><item>
    <title>Software License</title>
    <link>https://colinder.github.io/00_license/</link>
    <pubDate>Thu, 02 Sep 2021 09:54:00 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/00_license/</guid>
    <description><![CDATA[​
License  실무를 담당하고 있다면, 새로운 프로젝트에 앞서 어떤 기술을 사용할 것인지 조사하는 것도 업무중의 하나입니다.
근데 항상 고민이 되는 부분. 비용과 권한
그리고 비용과 권한 정리되어 있는 것이 License
 ​
한국저작권위원회의 OLIS(오픈소스SW 라이선스 종합정보시스템)에는 라이선스에 대한 내용이 잘 정리 되어 있습니다. 많은 라이선스들이 있지만,
접해본 라이선스 위주로, 개발을 위해 중요하게 보았던 부분을 정리합니다.
​
​
1. MIT License  아마 가장 흔하게 접하는 라이선스일 것입니다.
&ldquo;MIT 라이선스(MIT License)는 미국 매사추세츠 공과대학교(MIT)에서 해당 대학의 소프트웨어 공학도들을 돕기 위해 개발한 라이선스다.]]></description>
</item><item>
    <title>Vue_DevInfo</title>
    <link>https://colinder.github.io/vue_devinfo/</link>
    <pubDate>Sun, 08 Aug 2021 14:09:22 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/vue_devinfo/</guid>
    <description><![CDATA[​
Vue Dev_Info  Vue 개발을 하면서 알게 된(깨닫게 된) 내용을 정리해 기록합니다.
 ​
1. Vuex 동작에 대한 고찰  개인적으로 DB의 자료를 가져오는데 5개 이상의 테이블에서 DB를 가져오고, 이를 종합해 새로운 리스트 혹은 데이터를 만들어야 한다면 무조건 vuex의 사용을 추천합니다. 다만, vuex를 사용하는데 일반적으로 알려진 단계를 지켜야 하는 이유와 방법에 대하여 정리합니다.
  위의 그래프를 보면 .vue 파일에서 .dispatch()를 사용에 vuex의 store.js에 등록된 actions의 함수를 동작하는 신호를 보냅니다.]]></description>
</item><item>
    <title>Oracle 18C_network_connect</title>
    <link>https://colinder.github.io/oracle_network_connect/</link>
    <pubDate>Tue, 06 Jul 2021 14:17:20 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/oracle_network_connect/</guid>
    <description><![CDATA[​
오라클 18C_외부DB 접근(네트워크 연동) 방법  오라클 18 버전의 외부 DB 접근(네트워크 연동) 방법에 대하여 정리합니다.
제가 네트워크 연동을 기획하면서 두 가지 관점으로 생각했습니다.
첫째, DB를 가진 host가 있을 것이고
둘째, DB에 연결할 guest가 있을 것이다.
그렇다면, host가 guest의 IP를 등록해놓으면 guest가 접근하면 DB가 연결되는 걸까?
guest가 host의 IP를 입력해 DB를 연결하는 걸까?
아래 내용은 위의 두 가지를 다 진행하여 연결하였습니다. 
 ​
👀주의
각 단계 단계들이 필수적인 사항인지는 파악되지 않았습니다.]]></description>
</item><item>
    <title>RNN &amp; LSTM</title>
    <link>https://colinder.github.io/rnn-lstm/</link>
    <pubDate>Mon, 28 Jun 2021 14:35:39 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/rnn-lstm/</guid>
    <description><![CDATA[​
RNN &amp; LSTM  감정분석을 위한 프로젝트를 기획하면서 RNN과 LSTM이라는 신경망 분석에 대하여 알게 되었습니다. 신경망 분석은 기계학습과 인지과학에서 영감을 얻어 설계된 통계학적 학습 알고리즘인데요. 이 둘의 개념를 알아보겠습니다.
 ​
&lsquo;머신러닝&rsquo;이란 무엇인지 우선 알아봅시다.  머신 러닝(machine learning) 또는 기계 학습(機械學習)은 경험을 통해 자동으로 개선하는 컴퓨터 알고리즘 연구 분야입니다. 이는 인공지능의 한 분야로 간주되며, 컴퓨터가 학습할 수 있도록 하는 알고리즘과 기술을 개발합니다. 예를 들어 &lsquo;이 운동화가 진품이 맞는지?&rsquo;, &lsquo;특정 시간대에 A에서 B까지 가는데 얼마나 시간이 걸리는지?]]></description>
</item><item>
    <title>Activation_Function</title>
    <link>https://colinder.github.io/activation-function/</link>
    <pubDate>Thu, 24 Jun 2021 15:04:29 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/activation-function/</guid>
    <description><![CDATA[​
Activation Function(활성화 함수)  입력 신호의 총합을 출력신호로 변환하는 함수를 일반적으로 Activation Function이라고 합니다.
 ​
아직 잘 모르겠습니다. 하여 인공신경망에 빗대어 이해해보겠습니다.
인공 신경망은 인간의 중추신경계(뇌)속의 뉴런들이 정보를 전달하고 학습하여 결과를 도출해내는 과정을 모방한 학습알고리즘입니다.
여기서 의문점이 생깁니다.
  예를 들어 지나가다 귤을 보았는데 맛이 있을지 없을지 어떻게 알 수 있을까요? 저 귤의 데이터를 수집해 봅시다.
  타원형, 이쁜 노란색, 푸르른 꼭지 라는 데이터를 눈으로 보고 뇌속의 뉴런들이 이 정보를 분석해 맛있겠다.]]></description>
</item></channel>
</rss>

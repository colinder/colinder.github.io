<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - </title>
        <link>https://colinder.github.io/posts/</link>
        <description>All Posts | </description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 22 Dec 2021 12:16:29 &#43;0900</lastBuildDate><atom:link href="https://colinder.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Django_11_simple_JWT</title>
    <link>https://colinder.github.io/django_11_simple_jwt/</link>
    <pubDate>Wed, 22 Dec 2021 12:16:29 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_11_simple_jwt/</guid>
    <description><![CDATA[​
Django JWT(Json Web Token)  Django의 대표적인 jwt 패키지는 djangorestframework-jwt, djangorestframework-simplejwt가 있지만 전자는 업데이트가 더이상 진행되지 않아서 후자를 사용하는 것을 추천합니다.
 ​
djangorestframework-simplejwt  간단한 사용법 정리
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  def Usage(request): ## SIMPLEJWT METHOD TEST # print(&#34;================================&#34;) # a = JWTAuthentication() # b = a.]]></description>
</item><item>
    <title>Numpy &amp; Pandas</title>
    <link>https://colinder.github.io/numpy-pandas/</link>
    <pubDate>Wed, 15 Dec 2021 14:29:31 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/numpy-pandas/</guid>
    <description><![CDATA[​
Numpy  ML, AI 등 개발을 진행하다보면 무지성으로 import하는 library가 있다.
import numpy as np
python만 할 줄 안다면 어렵지 않게 사용이 가능하지만, 그래도 numpy의 개념을 알고 진행하고 싶은 마음에 내용을 정리해보자
 ​
What is Numpy(Numerical Python)?  공식문서를 따르면,
NumPy is the fundamental package for scientific computing in Python. It is a Python library that provides a multidimensional array object, various derived objects (such as masked arrays and matrices), and an assortment of routines for fast operations on arrays, including mathematical, logical, shape manipulation, sorting, selecting, I/O, discrete Fourier transforms, basic linear algebra, basic statistical operations, random simulation and much more.]]></description>
</item><item>
    <title>MariaDB 외부접속 허용</title>
    <link>https://colinder.github.io/mariadb_share/</link>
    <pubDate>Wed, 03 Nov 2021 11:19:43 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/mariadb_share/</guid>
    <description><![CDATA[​
MariaDB 외부 접속 허용  해당 MariaDB 공유는 root PC에서 진행하는 것이며, 외부에서 접속할 client는 별도로 설정할 건 없습니다.
또한 무조건 이 방법이 맞다!라기보다는 제가 이렇게 하니 외부 접속이 되었다. 는 경험의 기록입니다.
 ​
MySQL Client를 실행합니다.
​
실행하면 아래와 같은 초기 화면에 진입합니다.
​
MariaDB 설치를 진행하면서 등록한 password입력하면 아래와 같은 화면이 나옵니다.
​
초기 접속의 경우, DB table이 &lsquo;none&rsquo;으로 설정되어 있는데, **공유를 원하는 table로 설정을 바꿔줍니다. **]]></description>
</item><item>
    <title>Django_10_CustomAuthUser_AbstractUser</title>
    <link>https://colinder.github.io/django_10_customauthuser_abstractuser/</link>
    <pubDate>Fri, 08 Oct 2021 10:17:53 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_10_customauthuser_abstractuser/</guid>
    <description><![CDATA[​
Django AbstractUser  이전에 AbstractBaseUser를 사용한 커스텀 사용자 인증 테이블을 구성해보았습니다. 해당 내용에 이어서 AbstractUser로 커스텀 사용자 인증 테이블을 구성해보고 createsuperuser 명령어 입력시, 관리자 계정이 커스텀한 테이블에 생성되게 해보겠습니다.
 ​
AbstractUser을 상속받아 커스텀을 진행  우선 AbstractUser는 Django에서 기본으로 제공해주는 사용자 인증 테이블의 요소를 그대로 가져와 사용하기 때문에 그 요소들은 어떤 것들이 있는지 알아보자.
id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined 총 11개의 column이 존재하며 이외에 column을 추가 하고 싶을 때 코드를 추가로 작성합니다.]]></description>
</item><item>
    <title>Django_09_CustomAuthUser_AbstractBaseUser</title>
    <link>https://colinder.github.io/django_09_customauthuser_abstractbaseuser/</link>
    <pubDate>Fri, 08 Oct 2021 10:17:50 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_09_customauthuser_abstractbaseuser/</guid>
    <description><![CDATA[​
Django AbstractBaseUser  django는 기본적으로 username 과 password를 가지고 로그인합니다. 하지만 요즘에는 대부분의 웹사이트들이 email 과 password로 로그인(사용자를 인식 및 인증)을 합니다.
 ​
제가 진행할 것은 django의 AbstractBaseUser을 사용해 테이블을 만들고 사용자 인증하기 입니다.
  조건
  email, password, nickname 및 필수 요소(is_active, is_admin)로만 인증 테이블 구성.
  createsuperuser 명령어 입력시, 관리자 계정이 커스텀한 테이블에 생성.
​
    Django 공식문서에는 models.py에서 기본적인 사용자모델을 설정하고 이를 활용해 admin.]]></description>
</item><item>
    <title>Django_08_AbstractBaseUser VS AbstractUser</title>
    <link>https://colinder.github.io/django_08_abstractbaseuservsabstractuser/</link>
    <pubDate>Thu, 07 Oct 2021 10:17:20 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_08_abstractbaseuservsabstractuser/</guid>
    <description><![CDATA[​
Django AbstractBaseUser VS AbstractUser  Django로 프로젝트를 진행하면서 계정관련 내용을 등록하는 것을 가장 많이 했음에도, 아직 명확하게 차이를 알지 못하고 사용했던 것이 있었습니다.
바로! User custom에 관한 부분이었는데요. 크게 AbstractBaseUser와 AbstractUser를 사용하는 방법이 있는데 이 둘의 차이를 꼼꼼히 알아보기 위해 해당 포스팅이 작성되었습니다.
 ​
AbstractBaseUser VS AbstractUser  프로젝트 생성 후 accounts 라는 app을 만들고 makemigrations &amp; migrate를 하기 전
 ​
1. Model 설정 AbstractBaseUser
위치: accounts/models.py]]></description>
</item><item>
    <title>MariaDB 설치 방법</title>
    <link>https://colinder.github.io/mariadb_setting/</link>
    <pubDate>Wed, 15 Sep 2021 10:44:21 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/mariadb_setting/</guid>
    <description><![CDATA[​
MariaDB 설치 방법 1. 설치 https://mariadb.org/download/ 에서 자동으로 확인된 버전으로 다운로드 받습니다.
​
Next 클릭​
별도의 커스텀은 하지 않습니다.​
&lsquo;root 비밀번호 설정&rsquo;과 &lsquo;UTF 변환 및 외부에서 root 접속을 허용 할 것&rsquo;인지 물어보는 데 이곳이 중요합니다.
단순 개발용이라면 상관없을 수 있으나 개인적으로 실제 운용할 서버 or 개발 서버라도 외부에서 root에 접속하게 하는 것은 보안상 좋지 않을 것이라고 생각합니다.
실제로 서비스를 운영 할 서버라면 절때 root를 원격지에서 사용할 수 없게 하는 것을 추천합니다.]]></description>
</item><item>
    <title>Django_07_1:N 불러오기</title>
    <link>https://colinder.github.io/django_07_1vsn_%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0/</link>
    <pubDate>Tue, 14 Sep 2021 17:25:44 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_07_1vsn_%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0/</guid>
    <description><![CDATA[​
Django 1:N 불러오기  prefetch_related() or annotate()
 ​
models.py 구성
1 2 3  class Question(models.Model): question_text = models.CharField(max_length=200) pub_date = models.DateTimeField(&#39;date published&#39;)   1 2 3 4  class Choice(models.Model): question = models.ForeignKey(Question, on_delete=models.CASCADE, related_name=&#39;choices&#39;) choice_text = models.CharField(max_length=200) votes = models.IntegerField(default=0)   ​
​
prefetch_related() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  # views.py def get_context_data(): context[&#34;questions&#34;] = Question.]]></description>
</item><item>
    <title>Django_06_Django &amp; Oracle18 error LOG</title>
    <link>https://colinder.github.io/django_06_djangooracle18_error_log/</link>
    <pubDate>Mon, 06 Sep 2021 11:41:44 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_06_djangooracle18_error_log/</guid>
    <description><![CDATA[​
Django &amp; Oracle 18 오류 일지  각종 스트레스의 원인에 대하여 해결방법을 정리합니다.
 ​
  ORA-00955: name is already used by an existing object
 1 2 3  # 해결법 python manage.py makemigrations python manage.py migrate --fake-initial    이미 migrate 한 내용을 수정하니 반영되지 않아 오류가 발생하였는데 위의 명령어는 migratie를 초기화해서 재설정 하는 것 같습니다.
​
  그리고 많은 경우에
 1 2  python manage.]]></description>
</item><item>
    <title>Django_05_Check DB connection</title>
    <link>https://colinder.github.io/django_05_check-db-connection/</link>
    <pubDate>Mon, 06 Sep 2021 11:29:11 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://colinder.github.io/django_05_check-db-connection/</guid>
    <description><![CDATA[​
Django DB 연결 확인 ​
python manage.py createsuperuser 후.. default로 생기는 DB를 기준으로 실행
​
1 2  ## setting.py AUTH_USER_MODEL = &#39;auth.User&#39; # default 설정.   ​
이후 terminal에서
1 2 3 4 5 6 7  $ python manage.py shell_plus	# 모델에 접근하기 위해 shell_plus 실행 &gt; Post = get_user_model()	# 생성된 모델의 user table 불러오기 &gt; post = Post.objects.all()	# user table의 모든 값 가져오기 &gt; for i in post:	# for문으로 user table값 순환 &gt; print(i)	# user table 값 출력   하면 연결된 모델의 값을 확인할 수 있다.]]></description>
</item></channel>
</rss>
